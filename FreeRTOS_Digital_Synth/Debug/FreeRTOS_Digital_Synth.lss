
FreeRTOS_Digital_Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e74  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  20000000  00003e74  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001fc  2000006c  00003ee0  0001006c  2**2
                  ALLOC
  3 .stack        00002000  20000268  000040dc  0001006c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001006c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002318a  00000000  00000000  000100ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031df  00000000  00000000  00033279  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008fee  00000000  00000000  00036458  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000780  00000000  00000000  0003f446  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ad0  00000000  00000000  0003fbc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a98f  00000000  00000000  00040696  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cb3c  00000000  00000000  0005b025  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000921a9  00000000  00000000  00067b61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b10  00000000  00000000  000f9d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002268 	.word	0x20002268
       4:	00001e85 	.word	0x00001e85
       8:	00001e81 	.word	0x00001e81
       c:	00001e81 	.word	0x00001e81
	...
      2c:	000005a9 	.word	0x000005a9
	...
      38:	000005d1 	.word	0x000005d1
      3c:	00000615 	.word	0x00000615
      40:	00001e81 	.word	0x00001e81
      44:	00001e81 	.word	0x00001e81
      48:	00001e81 	.word	0x00001e81
      4c:	00001e81 	.word	0x00001e81
      50:	00001e81 	.word	0x00001e81
      54:	00001e81 	.word	0x00001e81
      58:	00001e81 	.word	0x00001e81
      5c:	00001e81 	.word	0x00001e81
      60:	00001e81 	.word	0x00001e81
      64:	0000165d 	.word	0x0000165d
      68:	0000166d 	.word	0x0000166d
      6c:	0000167d 	.word	0x0000167d
      70:	0000168d 	.word	0x0000168d
      74:	0000169d 	.word	0x0000169d
      78:	000016ad 	.word	0x000016ad
      7c:	00001e81 	.word	0x00001e81
      80:	00001e81 	.word	0x00001e81
      84:	00001e81 	.word	0x00001e81
      88:	00001e81 	.word	0x00001e81
      8c:	00001e81 	.word	0x00001e81
      90:	00001e81 	.word	0x00001e81
      94:	00001e81 	.word	0x00001e81
      98:	00001e81 	.word	0x00001e81
      9c:	00001e81 	.word	0x00001e81
      a0:	00001e81 	.word	0x00001e81
      a4:	00001e81 	.word	0x00001e81
      a8:	00001e81 	.word	0x00001e81
      ac:	00001e81 	.word	0x00001e81
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000006c 	.word	0x2000006c
      d4:	00000000 	.word	0x00000000
      d8:	00003e74 	.word	0x00003e74

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00003e74 	.word	0x00003e74
     108:	20000070 	.word	0x20000070
     10c:	00003e74 	.word	0x00003e74
     110:	00000000 	.word	0x00000000

00000114 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     114:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     116:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     118:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     11a:	4281      	cmp	r1, r0
     11c:	d30c      	bcc.n	138 <_sercom_get_sync_baud_val+0x24>
     11e:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     120:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     122:	3301      	adds	r3, #1
     124:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     126:	4288      	cmp	r0, r1
     128:	d9fa      	bls.n	120 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     12a:	3b01      	subs	r3, #1
     12c:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     12e:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     130:	2bff      	cmp	r3, #255	; 0xff
     132:	d801      	bhi.n	138 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     134:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     136:	2400      	movs	r4, #0
	}
}
     138:	1c20      	adds	r0, r4, #0
     13a:	bd10      	pop	{r4, pc}

0000013c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     13c:	b5f0      	push	{r4, r5, r6, r7, lr}
     13e:	465f      	mov	r7, fp
     140:	4656      	mov	r6, sl
     142:	464d      	mov	r5, r9
     144:	4644      	mov	r4, r8
     146:	b4f0      	push	{r4, r5, r6, r7}
     148:	b089      	sub	sp, #36	; 0x24
     14a:	1c1c      	adds	r4, r3, #0
     14c:	ab12      	add	r3, sp, #72	; 0x48
     14e:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     150:	1c06      	adds	r6, r0, #0
     152:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     154:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     156:	428e      	cmp	r6, r1
     158:	d900      	bls.n	15c <_sercom_get_async_baud_val+0x20>
     15a:	e0c7      	b.n	2ec <_sercom_get_async_baud_val+0x1b0>
     15c:	1c25      	adds	r5, r4, #0
     15e:	9207      	str	r2, [sp, #28]
     160:	1c0c      	adds	r4, r1, #0
     162:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     164:	2d00      	cmp	r5, #0
     166:	d151      	bne.n	20c <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     168:	1c18      	adds	r0, r3, #0
     16a:	2100      	movs	r1, #0
     16c:	2300      	movs	r3, #0
     16e:	4d63      	ldr	r5, [pc, #396]	; (2fc <_sercom_get_async_baud_val+0x1c0>)
     170:	47a8      	blx	r5
     172:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     174:	1c26      	adds	r6, r4, #0
     176:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     178:	2300      	movs	r3, #0
     17a:	2400      	movs	r4, #0
     17c:	9302      	str	r3, [sp, #8]
     17e:	9403      	str	r4, [sp, #12]
     180:	2200      	movs	r2, #0
     182:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     184:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     186:	2120      	movs	r1, #32
     188:	468c      	mov	ip, r1
     18a:	391f      	subs	r1, #31
     18c:	9600      	str	r6, [sp, #0]
     18e:	9701      	str	r7, [sp, #4]
     190:	2420      	movs	r4, #32
     192:	4264      	negs	r4, r4
     194:	1904      	adds	r4, r0, r4
     196:	d403      	bmi.n	1a0 <_sercom_get_async_baud_val+0x64>
     198:	1c0d      	adds	r5, r1, #0
     19a:	40a5      	lsls	r5, r4
     19c:	46a8      	mov	r8, r5
     19e:	e004      	b.n	1aa <_sercom_get_async_baud_val+0x6e>
     1a0:	4664      	mov	r4, ip
     1a2:	1a24      	subs	r4, r4, r0
     1a4:	1c0d      	adds	r5, r1, #0
     1a6:	40e5      	lsrs	r5, r4
     1a8:	46a8      	mov	r8, r5
     1aa:	1c0c      	adds	r4, r1, #0
     1ac:	4084      	lsls	r4, r0
     1ae:	46a1      	mov	r9, r4

		r = r << 1;
     1b0:	1c14      	adds	r4, r2, #0
     1b2:	1c1d      	adds	r5, r3, #0
     1b4:	18a4      	adds	r4, r4, r2
     1b6:	415d      	adcs	r5, r3
     1b8:	1c22      	adds	r2, r4, #0
     1ba:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     1bc:	465e      	mov	r6, fp
     1be:	4647      	mov	r7, r8
     1c0:	423e      	tst	r6, r7
     1c2:	d003      	beq.n	1cc <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     1c4:	1c0e      	adds	r6, r1, #0
     1c6:	4326      	orrs	r6, r4
     1c8:	1c32      	adds	r2, r6, #0
     1ca:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     1cc:	9c01      	ldr	r4, [sp, #4]
     1ce:	429c      	cmp	r4, r3
     1d0:	d810      	bhi.n	1f4 <_sercom_get_async_baud_val+0xb8>
     1d2:	d102      	bne.n	1da <_sercom_get_async_baud_val+0x9e>
     1d4:	9c00      	ldr	r4, [sp, #0]
     1d6:	4294      	cmp	r4, r2
     1d8:	d80c      	bhi.n	1f4 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     1da:	9c00      	ldr	r4, [sp, #0]
     1dc:	9d01      	ldr	r5, [sp, #4]
     1de:	1b12      	subs	r2, r2, r4
     1e0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     1e2:	464d      	mov	r5, r9
     1e4:	9e02      	ldr	r6, [sp, #8]
     1e6:	9f03      	ldr	r7, [sp, #12]
     1e8:	4335      	orrs	r5, r6
     1ea:	1c3c      	adds	r4, r7, #0
     1ec:	4646      	mov	r6, r8
     1ee:	4334      	orrs	r4, r6
     1f0:	9502      	str	r5, [sp, #8]
     1f2:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     1f4:	3801      	subs	r0, #1
     1f6:	d2cb      	bcs.n	190 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     1f8:	2200      	movs	r2, #0
     1fa:	2301      	movs	r3, #1
     1fc:	9802      	ldr	r0, [sp, #8]
     1fe:	9903      	ldr	r1, [sp, #12]
     200:	1a12      	subs	r2, r2, r0
     202:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     204:	0c11      	lsrs	r1, r2, #16
     206:	041b      	lsls	r3, r3, #16
     208:	4319      	orrs	r1, r3
     20a:	e06c      	b.n	2e6 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     20c:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     20e:	2d01      	cmp	r5, #1
     210:	d169      	bne.n	2e6 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     212:	0f61      	lsrs	r1, r4, #29
     214:	1c0f      	adds	r7, r1, #0
     216:	00e1      	lsls	r1, r4, #3
     218:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     21a:	1c18      	adds	r0, r3, #0
     21c:	2100      	movs	r1, #0
     21e:	2300      	movs	r3, #0
     220:	4c36      	ldr	r4, [pc, #216]	; (2fc <_sercom_get_async_baud_val+0x1c0>)
     222:	47a0      	blx	r4
     224:	1c04      	adds	r4, r0, #0
     226:	1c0d      	adds	r5, r1, #0
     228:	2300      	movs	r3, #0
     22a:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     22c:	3320      	adds	r3, #32
     22e:	469b      	mov	fp, r3
     230:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     232:	4663      	mov	r3, ip
     234:	9305      	str	r3, [sp, #20]
     236:	46b9      	mov	r9, r7
     238:	466b      	mov	r3, sp
     23a:	7d1b      	ldrb	r3, [r3, #20]
     23c:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     23e:	2300      	movs	r3, #0
     240:	469c      	mov	ip, r3
     242:	2000      	movs	r0, #0
     244:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     246:	223f      	movs	r2, #63	; 0x3f
     248:	9400      	str	r4, [sp, #0]
     24a:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     24c:	2320      	movs	r3, #32
     24e:	425b      	negs	r3, r3
     250:	18d3      	adds	r3, r2, r3
     252:	d403      	bmi.n	25c <_sercom_get_async_baud_val+0x120>
     254:	1c34      	adds	r4, r6, #0
     256:	409c      	lsls	r4, r3
     258:	1c23      	adds	r3, r4, #0
     25a:	e004      	b.n	266 <_sercom_get_async_baud_val+0x12a>
     25c:	465b      	mov	r3, fp
     25e:	1a9b      	subs	r3, r3, r2
     260:	1c34      	adds	r4, r6, #0
     262:	40dc      	lsrs	r4, r3
     264:	1c23      	adds	r3, r4, #0
     266:	1c37      	adds	r7, r6, #0
     268:	4097      	lsls	r7, r2

		r = r << 1;
     26a:	1c04      	adds	r4, r0, #0
     26c:	1c0d      	adds	r5, r1, #0
     26e:	1824      	adds	r4, r4, r0
     270:	414d      	adcs	r5, r1
     272:	1c20      	adds	r0, r4, #0
     274:	1c29      	adds	r1, r5, #0
     276:	9002      	str	r0, [sp, #8]
     278:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     27a:	4644      	mov	r4, r8
     27c:	403c      	ands	r4, r7
     27e:	46a2      	mov	sl, r4
     280:	464c      	mov	r4, r9
     282:	4023      	ands	r3, r4
     284:	4654      	mov	r4, sl
     286:	4323      	orrs	r3, r4
     288:	d005      	beq.n	296 <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     28a:	9b02      	ldr	r3, [sp, #8]
     28c:	9c03      	ldr	r4, [sp, #12]
     28e:	1c1d      	adds	r5, r3, #0
     290:	4335      	orrs	r5, r6
     292:	1c28      	adds	r0, r5, #0
     294:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     296:	9b01      	ldr	r3, [sp, #4]
     298:	428b      	cmp	r3, r1
     29a:	d80a      	bhi.n	2b2 <_sercom_get_async_baud_val+0x176>
     29c:	d102      	bne.n	2a4 <_sercom_get_async_baud_val+0x168>
     29e:	9b00      	ldr	r3, [sp, #0]
     2a0:	4283      	cmp	r3, r0
     2a2:	d806      	bhi.n	2b2 <_sercom_get_async_baud_val+0x176>
			r = r - d;
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	9c01      	ldr	r4, [sp, #4]
     2a8:	1ac0      	subs	r0, r0, r3
     2aa:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     2ac:	4663      	mov	r3, ip
     2ae:	433b      	orrs	r3, r7
     2b0:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     2b2:	3a01      	subs	r2, #1
     2b4:	d2ca      	bcs.n	24c <_sercom_get_async_baud_val+0x110>
     2b6:	9c00      	ldr	r4, [sp, #0]
     2b8:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     2ba:	4662      	mov	r2, ip
     2bc:	9905      	ldr	r1, [sp, #20]
     2be:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     2c0:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     2c2:	4a0f      	ldr	r2, [pc, #60]	; (300 <_sercom_get_async_baud_val+0x1c4>)
     2c4:	4293      	cmp	r3, r2
     2c6:	d908      	bls.n	2da <_sercom_get_async_baud_val+0x19e>
     2c8:	9a06      	ldr	r2, [sp, #24]
     2ca:	3201      	adds	r2, #1
     2cc:	b2d2      	uxtb	r2, r2
     2ce:	9206      	str	r2, [sp, #24]
     2d0:	1c0a      	adds	r2, r1, #0
     2d2:	3201      	adds	r2, #1
     2d4:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     2d6:	2a08      	cmp	r2, #8
     2d8:	d1ae      	bne.n	238 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2da:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     2dc:	9a06      	ldr	r2, [sp, #24]
     2de:	2a08      	cmp	r2, #8
     2e0:	d004      	beq.n	2ec <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     2e2:	0351      	lsls	r1, r2, #13
     2e4:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     2e6:	9b07      	ldr	r3, [sp, #28]
     2e8:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     2ea:	2500      	movs	r5, #0
}
     2ec:	1c28      	adds	r0, r5, #0
     2ee:	b009      	add	sp, #36	; 0x24
     2f0:	bc3c      	pop	{r2, r3, r4, r5}
     2f2:	4690      	mov	r8, r2
     2f4:	4699      	mov	r9, r3
     2f6:	46a2      	mov	sl, r4
     2f8:	46ab      	mov	fp, r5
     2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2fc:	00002699 	.word	0x00002699
     300:	00001fff 	.word	0x00001fff

00000304 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     304:	b510      	push	{r4, lr}
     306:	b082      	sub	sp, #8
     308:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     30a:	4b0e      	ldr	r3, [pc, #56]	; (344 <sercom_set_gclk_generator+0x40>)
     30c:	781b      	ldrb	r3, [r3, #0]
     30e:	2b00      	cmp	r3, #0
     310:	d001      	beq.n	316 <sercom_set_gclk_generator+0x12>
     312:	2900      	cmp	r1, #0
     314:	d00d      	beq.n	332 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     316:	a901      	add	r1, sp, #4
     318:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     31a:	2013      	movs	r0, #19
     31c:	4b0a      	ldr	r3, [pc, #40]	; (348 <sercom_set_gclk_generator+0x44>)
     31e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     320:	2013      	movs	r0, #19
     322:	4b0a      	ldr	r3, [pc, #40]	; (34c <sercom_set_gclk_generator+0x48>)
     324:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     326:	4b07      	ldr	r3, [pc, #28]	; (344 <sercom_set_gclk_generator+0x40>)
     328:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     32a:	2201      	movs	r2, #1
     32c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     32e:	2000      	movs	r0, #0
     330:	e006      	b.n	340 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     332:	4b04      	ldr	r3, [pc, #16]	; (344 <sercom_set_gclk_generator+0x40>)
     334:	785b      	ldrb	r3, [r3, #1]
     336:	4283      	cmp	r3, r0
     338:	d001      	beq.n	33e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     33a:	201d      	movs	r0, #29
     33c:	e000      	b.n	340 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     33e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     340:	b002      	add	sp, #8
     342:	bd10      	pop	{r4, pc}
     344:	20000088 	.word	0x20000088
     348:	00001d29 	.word	0x00001d29
     34c:	00001c9d 	.word	0x00001c9d

00000350 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     350:	4b44      	ldr	r3, [pc, #272]	; (464 <_sercom_get_default_pad+0x114>)
     352:	4298      	cmp	r0, r3
     354:	d033      	beq.n	3be <_sercom_get_default_pad+0x6e>
     356:	d806      	bhi.n	366 <_sercom_get_default_pad+0x16>
     358:	4b43      	ldr	r3, [pc, #268]	; (468 <_sercom_get_default_pad+0x118>)
     35a:	4298      	cmp	r0, r3
     35c:	d00d      	beq.n	37a <_sercom_get_default_pad+0x2a>
     35e:	4b43      	ldr	r3, [pc, #268]	; (46c <_sercom_get_default_pad+0x11c>)
     360:	4298      	cmp	r0, r3
     362:	d01b      	beq.n	39c <_sercom_get_default_pad+0x4c>
     364:	e06f      	b.n	446 <_sercom_get_default_pad+0xf6>
     366:	4b42      	ldr	r3, [pc, #264]	; (470 <_sercom_get_default_pad+0x120>)
     368:	4298      	cmp	r0, r3
     36a:	d04a      	beq.n	402 <_sercom_get_default_pad+0xb2>
     36c:	4b41      	ldr	r3, [pc, #260]	; (474 <_sercom_get_default_pad+0x124>)
     36e:	4298      	cmp	r0, r3
     370:	d058      	beq.n	424 <_sercom_get_default_pad+0xd4>
     372:	4b41      	ldr	r3, [pc, #260]	; (478 <_sercom_get_default_pad+0x128>)
     374:	4298      	cmp	r0, r3
     376:	d166      	bne.n	446 <_sercom_get_default_pad+0xf6>
     378:	e032      	b.n	3e0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     37a:	2901      	cmp	r1, #1
     37c:	d006      	beq.n	38c <_sercom_get_default_pad+0x3c>
     37e:	2900      	cmp	r1, #0
     380:	d063      	beq.n	44a <_sercom_get_default_pad+0xfa>
     382:	2902      	cmp	r1, #2
     384:	d006      	beq.n	394 <_sercom_get_default_pad+0x44>
     386:	2903      	cmp	r1, #3
     388:	d006      	beq.n	398 <_sercom_get_default_pad+0x48>
     38a:	e001      	b.n	390 <_sercom_get_default_pad+0x40>
     38c:	483b      	ldr	r0, [pc, #236]	; (47c <_sercom_get_default_pad+0x12c>)
     38e:	e067      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     390:	2000      	movs	r0, #0
     392:	e065      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     394:	483a      	ldr	r0, [pc, #232]	; (480 <_sercom_get_default_pad+0x130>)
     396:	e063      	b.n	460 <_sercom_get_default_pad+0x110>
     398:	483a      	ldr	r0, [pc, #232]	; (484 <_sercom_get_default_pad+0x134>)
     39a:	e061      	b.n	460 <_sercom_get_default_pad+0x110>
     39c:	2901      	cmp	r1, #1
     39e:	d006      	beq.n	3ae <_sercom_get_default_pad+0x5e>
     3a0:	2900      	cmp	r1, #0
     3a2:	d054      	beq.n	44e <_sercom_get_default_pad+0xfe>
     3a4:	2902      	cmp	r1, #2
     3a6:	d006      	beq.n	3b6 <_sercom_get_default_pad+0x66>
     3a8:	2903      	cmp	r1, #3
     3aa:	d006      	beq.n	3ba <_sercom_get_default_pad+0x6a>
     3ac:	e001      	b.n	3b2 <_sercom_get_default_pad+0x62>
     3ae:	4836      	ldr	r0, [pc, #216]	; (488 <_sercom_get_default_pad+0x138>)
     3b0:	e056      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e054      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	4835      	ldr	r0, [pc, #212]	; (48c <_sercom_get_default_pad+0x13c>)
     3b8:	e052      	b.n	460 <_sercom_get_default_pad+0x110>
     3ba:	4835      	ldr	r0, [pc, #212]	; (490 <_sercom_get_default_pad+0x140>)
     3bc:	e050      	b.n	460 <_sercom_get_default_pad+0x110>
     3be:	2901      	cmp	r1, #1
     3c0:	d006      	beq.n	3d0 <_sercom_get_default_pad+0x80>
     3c2:	2900      	cmp	r1, #0
     3c4:	d045      	beq.n	452 <_sercom_get_default_pad+0x102>
     3c6:	2902      	cmp	r1, #2
     3c8:	d006      	beq.n	3d8 <_sercom_get_default_pad+0x88>
     3ca:	2903      	cmp	r1, #3
     3cc:	d006      	beq.n	3dc <_sercom_get_default_pad+0x8c>
     3ce:	e001      	b.n	3d4 <_sercom_get_default_pad+0x84>
     3d0:	4830      	ldr	r0, [pc, #192]	; (494 <_sercom_get_default_pad+0x144>)
     3d2:	e045      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3d4:	2000      	movs	r0, #0
     3d6:	e043      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3d8:	482f      	ldr	r0, [pc, #188]	; (498 <_sercom_get_default_pad+0x148>)
     3da:	e041      	b.n	460 <_sercom_get_default_pad+0x110>
     3dc:	482f      	ldr	r0, [pc, #188]	; (49c <_sercom_get_default_pad+0x14c>)
     3de:	e03f      	b.n	460 <_sercom_get_default_pad+0x110>
     3e0:	2901      	cmp	r1, #1
     3e2:	d006      	beq.n	3f2 <_sercom_get_default_pad+0xa2>
     3e4:	2900      	cmp	r1, #0
     3e6:	d036      	beq.n	456 <_sercom_get_default_pad+0x106>
     3e8:	2902      	cmp	r1, #2
     3ea:	d006      	beq.n	3fa <_sercom_get_default_pad+0xaa>
     3ec:	2903      	cmp	r1, #3
     3ee:	d006      	beq.n	3fe <_sercom_get_default_pad+0xae>
     3f0:	e001      	b.n	3f6 <_sercom_get_default_pad+0xa6>
     3f2:	482b      	ldr	r0, [pc, #172]	; (4a0 <_sercom_get_default_pad+0x150>)
     3f4:	e034      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3f6:	2000      	movs	r0, #0
     3f8:	e032      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3fa:	482a      	ldr	r0, [pc, #168]	; (4a4 <_sercom_get_default_pad+0x154>)
     3fc:	e030      	b.n	460 <_sercom_get_default_pad+0x110>
     3fe:	482a      	ldr	r0, [pc, #168]	; (4a8 <_sercom_get_default_pad+0x158>)
     400:	e02e      	b.n	460 <_sercom_get_default_pad+0x110>
     402:	2901      	cmp	r1, #1
     404:	d006      	beq.n	414 <_sercom_get_default_pad+0xc4>
     406:	2900      	cmp	r1, #0
     408:	d027      	beq.n	45a <_sercom_get_default_pad+0x10a>
     40a:	2902      	cmp	r1, #2
     40c:	d006      	beq.n	41c <_sercom_get_default_pad+0xcc>
     40e:	2903      	cmp	r1, #3
     410:	d006      	beq.n	420 <_sercom_get_default_pad+0xd0>
     412:	e001      	b.n	418 <_sercom_get_default_pad+0xc8>
     414:	4825      	ldr	r0, [pc, #148]	; (4ac <_sercom_get_default_pad+0x15c>)
     416:	e023      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     418:	2000      	movs	r0, #0
     41a:	e021      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     41c:	4824      	ldr	r0, [pc, #144]	; (4b0 <_sercom_get_default_pad+0x160>)
     41e:	e01f      	b.n	460 <_sercom_get_default_pad+0x110>
     420:	4824      	ldr	r0, [pc, #144]	; (4b4 <_sercom_get_default_pad+0x164>)
     422:	e01d      	b.n	460 <_sercom_get_default_pad+0x110>
     424:	2901      	cmp	r1, #1
     426:	d006      	beq.n	436 <_sercom_get_default_pad+0xe6>
     428:	2900      	cmp	r1, #0
     42a:	d018      	beq.n	45e <_sercom_get_default_pad+0x10e>
     42c:	2902      	cmp	r1, #2
     42e:	d006      	beq.n	43e <_sercom_get_default_pad+0xee>
     430:	2903      	cmp	r1, #3
     432:	d006      	beq.n	442 <_sercom_get_default_pad+0xf2>
     434:	e001      	b.n	43a <_sercom_get_default_pad+0xea>
     436:	4820      	ldr	r0, [pc, #128]	; (4b8 <_sercom_get_default_pad+0x168>)
     438:	e012      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     43a:	2000      	movs	r0, #0
     43c:	e010      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     43e:	481f      	ldr	r0, [pc, #124]	; (4bc <_sercom_get_default_pad+0x16c>)
     440:	e00e      	b.n	460 <_sercom_get_default_pad+0x110>
     442:	481f      	ldr	r0, [pc, #124]	; (4c0 <_sercom_get_default_pad+0x170>)
     444:	e00c      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     446:	2000      	movs	r0, #0
     448:	e00a      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     44a:	481e      	ldr	r0, [pc, #120]	; (4c4 <_sercom_get_default_pad+0x174>)
     44c:	e008      	b.n	460 <_sercom_get_default_pad+0x110>
     44e:	2003      	movs	r0, #3
     450:	e006      	b.n	460 <_sercom_get_default_pad+0x110>
     452:	481d      	ldr	r0, [pc, #116]	; (4c8 <_sercom_get_default_pad+0x178>)
     454:	e004      	b.n	460 <_sercom_get_default_pad+0x110>
     456:	481d      	ldr	r0, [pc, #116]	; (4cc <_sercom_get_default_pad+0x17c>)
     458:	e002      	b.n	460 <_sercom_get_default_pad+0x110>
     45a:	481d      	ldr	r0, [pc, #116]	; (4d0 <_sercom_get_default_pad+0x180>)
     45c:	e000      	b.n	460 <_sercom_get_default_pad+0x110>
     45e:	481d      	ldr	r0, [pc, #116]	; (4d4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     460:	4770      	bx	lr
     462:	46c0      	nop			; (mov r8, r8)
     464:	42001000 	.word	0x42001000
     468:	42000800 	.word	0x42000800
     46c:	42000c00 	.word	0x42000c00
     470:	42001800 	.word	0x42001800
     474:	42001c00 	.word	0x42001c00
     478:	42001400 	.word	0x42001400
     47c:	00050003 	.word	0x00050003
     480:	00060003 	.word	0x00060003
     484:	00070003 	.word	0x00070003
     488:	00010003 	.word	0x00010003
     48c:	001e0003 	.word	0x001e0003
     490:	001f0003 	.word	0x001f0003
     494:	00090003 	.word	0x00090003
     498:	000a0003 	.word	0x000a0003
     49c:	000b0003 	.word	0x000b0003
     4a0:	00110003 	.word	0x00110003
     4a4:	00120003 	.word	0x00120003
     4a8:	00130003 	.word	0x00130003
     4ac:	000d0003 	.word	0x000d0003
     4b0:	000e0003 	.word	0x000e0003
     4b4:	000f0003 	.word	0x000f0003
     4b8:	00170003 	.word	0x00170003
     4bc:	00180003 	.word	0x00180003
     4c0:	00190003 	.word	0x00190003
     4c4:	00040003 	.word	0x00040003
     4c8:	00080003 	.word	0x00080003
     4cc:	00100003 	.word	0x00100003
     4d0:	000c0003 	.word	0x000c0003
     4d4:	00160003 	.word	0x00160003

000004d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     4d8:	b530      	push	{r4, r5, lr}
     4da:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     4dc:	4b0c      	ldr	r3, [pc, #48]	; (510 <_sercom_get_sercom_inst_index+0x38>)
     4de:	466a      	mov	r2, sp
     4e0:	cb32      	ldmia	r3!, {r1, r4, r5}
     4e2:	c232      	stmia	r2!, {r1, r4, r5}
     4e4:	cb32      	ldmia	r3!, {r1, r4, r5}
     4e6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4e8:	9b00      	ldr	r3, [sp, #0]
     4ea:	4283      	cmp	r3, r0
     4ec:	d006      	beq.n	4fc <_sercom_get_sercom_inst_index+0x24>
     4ee:	2301      	movs	r3, #1
     4f0:	009a      	lsls	r2, r3, #2
     4f2:	4669      	mov	r1, sp
     4f4:	5852      	ldr	r2, [r2, r1]
     4f6:	4282      	cmp	r2, r0
     4f8:	d103      	bne.n	502 <_sercom_get_sercom_inst_index+0x2a>
     4fa:	e000      	b.n	4fe <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4fc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     4fe:	b2d8      	uxtb	r0, r3
     500:	e003      	b.n	50a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     502:	3301      	adds	r3, #1
     504:	2b06      	cmp	r3, #6
     506:	d1f3      	bne.n	4f0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     508:	2000      	movs	r0, #0
}
     50a:	b007      	add	sp, #28
     50c:	bd30      	pop	{r4, r5, pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	00003c90 	.word	0x00003c90

00000514 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     514:	b5f0      	push	{r4, r5, r6, r7, lr}
     516:	4647      	mov	r7, r8
     518:	b480      	push	{r7}
     51a:	1c0c      	adds	r4, r1, #0
     51c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     51e:	2800      	cmp	r0, #0
     520:	d110      	bne.n	544 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
     522:	2a00      	cmp	r2, #0
     524:	dd0a      	ble.n	53c <_read+0x28>
     526:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     528:	4e09      	ldr	r6, [pc, #36]	; (550 <_read+0x3c>)
     52a:	4d0a      	ldr	r5, [pc, #40]	; (554 <_read+0x40>)
     52c:	6830      	ldr	r0, [r6, #0]
     52e:	1c21      	adds	r1, r4, #0
     530:	682b      	ldr	r3, [r5, #0]
     532:	4798      	blx	r3
		ptr++;
     534:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     536:	42bc      	cmp	r4, r7
     538:	d1f8      	bne.n	52c <_read+0x18>
     53a:	e001      	b.n	540 <_read+0x2c>
     53c:	2300      	movs	r3, #0
     53e:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
     540:	4640      	mov	r0, r8
     542:	e001      	b.n	548 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     544:	2001      	movs	r0, #1
     546:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     548:	bc04      	pop	{r2}
     54a:	4690      	mov	r8, r2
     54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	200001ac 	.word	0x200001ac
     554:	200001a4 	.word	0x200001a4

00000558 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     558:	b5f0      	push	{r4, r5, r6, r7, lr}
     55a:	4647      	mov	r7, r8
     55c:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     55e:	3801      	subs	r0, #1
     560:	2802      	cmp	r0, #2
     562:	d815      	bhi.n	590 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
     564:	2a00      	cmp	r2, #0
     566:	d010      	beq.n	58a <_write+0x32>
     568:	1c15      	adds	r5, r2, #0
     56a:	1c0e      	adds	r6, r1, #0
     56c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     56e:	4b0c      	ldr	r3, [pc, #48]	; (5a0 <_write+0x48>)
     570:	4698      	mov	r8, r3
     572:	4f0c      	ldr	r7, [pc, #48]	; (5a4 <_write+0x4c>)
     574:	4643      	mov	r3, r8
     576:	6818      	ldr	r0, [r3, #0]
     578:	5d31      	ldrb	r1, [r6, r4]
     57a:	683b      	ldr	r3, [r7, #0]
     57c:	4798      	blx	r3
     57e:	2800      	cmp	r0, #0
     580:	db09      	blt.n	596 <_write+0x3e>
			return -1;
		}
		++nChars;
     582:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     584:	42a5      	cmp	r5, r4
     586:	d1f5      	bne.n	574 <_write+0x1c>
     588:	e000      	b.n	58c <_write+0x34>
     58a:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
     58c:	1c20      	adds	r0, r4, #0
     58e:	e004      	b.n	59a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     590:	2001      	movs	r0, #1
     592:	4240      	negs	r0, r0
     594:	e001      	b.n	59a <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     596:	2001      	movs	r0, #1
     598:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     59a:	bc04      	pop	{r2}
     59c:	4690      	mov	r8, r2
     59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5a0:	200001ac 	.word	0x200001ac
     5a4:	200001a8 	.word	0x200001a8

000005a8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
     5a8:	4b08      	ldr	r3, [pc, #32]	; (5cc <pxCurrentTCBConst2>)
     5aa:	6819      	ldr	r1, [r3, #0]
     5ac:	6808      	ldr	r0, [r1, #0]
     5ae:	3010      	adds	r0, #16
     5b0:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     5b2:	46a0      	mov	r8, r4
     5b4:	46a9      	mov	r9, r5
     5b6:	46b2      	mov	sl, r6
     5b8:	46bb      	mov	fp, r7
     5ba:	f380 8809 	msr	PSP, r0
     5be:	3820      	subs	r0, #32
     5c0:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     5c2:	4671      	mov	r1, lr
     5c4:	200d      	movs	r0, #13
     5c6:	4301      	orrs	r1, r0
     5c8:	4708      	bx	r1
     5ca:	46c0      	nop			; (mov r8, r8)

000005cc <pxCurrentTCBConst2>:
     5cc:	200000fc 	.word	0x200000fc

000005d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     5d0:	f3ef 8009 	mrs	r0, PSP
     5d4:	4b0e      	ldr	r3, [pc, #56]	; (610 <pxCurrentTCBConst>)
     5d6:	681a      	ldr	r2, [r3, #0]
     5d8:	3820      	subs	r0, #32
     5da:	6010      	str	r0, [r2, #0]
     5dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     5de:	4644      	mov	r4, r8
     5e0:	464d      	mov	r5, r9
     5e2:	4656      	mov	r6, sl
     5e4:	465f      	mov	r7, fp
     5e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     5e8:	b508      	push	{r3, lr}
     5ea:	b672      	cpsid	i
     5ec:	f000 f97a 	bl	8e4 <vTaskSwitchContext>
     5f0:	b662      	cpsie	i
     5f2:	bc0c      	pop	{r2, r3}
     5f4:	6811      	ldr	r1, [r2, #0]
     5f6:	6808      	ldr	r0, [r1, #0]
     5f8:	3010      	adds	r0, #16
     5fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     5fc:	46a0      	mov	r8, r4
     5fe:	46a9      	mov	r9, r5
     600:	46b2      	mov	sl, r6
     602:	46bb      	mov	fp, r7
     604:	f380 8809 	msr	PSP, r0
     608:	3820      	subs	r0, #32
     60a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     60c:	4718      	bx	r3
     60e:	46c0      	nop			; (mov r8, r8)

00000610 <pxCurrentTCBConst>:
     610:	200000fc 	.word	0x200000fc

00000614 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     614:	b508      	push	{r3, lr}
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     616:	2280      	movs	r2, #128	; 0x80
     618:	0552      	lsls	r2, r2, #21
     61a:	4b03      	ldr	r3, [pc, #12]	; (628 <SysTick_Handler+0x14>)
     61c:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
     61e:	b672      	cpsid	i
	{
		vTaskIncrementTick();
     620:	4b02      	ldr	r3, [pc, #8]	; (62c <SysTick_Handler+0x18>)
     622:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
     624:	b662      	cpsie	i
}
     626:	bd08      	pop	{r3, pc}
     628:	e000ed04 	.word	0xe000ed04
     62c:	000007c9 	.word	0x000007c9

00000630 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     630:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
     632:	685a      	ldr	r2, [r3, #4]
     634:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
     636:	6842      	ldr	r2, [r0, #4]
     638:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     63a:	685a      	ldr	r2, [r3, #4]
     63c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     63e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     640:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     642:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     644:	6803      	ldr	r3, [r0, #0]
     646:	3301      	adds	r3, #1
     648:	6003      	str	r3, [r0, #0]
}
     64a:	4770      	bx	lr

0000064c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     64c:	6843      	ldr	r3, [r0, #4]
     64e:	6882      	ldr	r2, [r0, #8]
     650:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     652:	6883      	ldr	r3, [r0, #8]
     654:	6842      	ldr	r2, [r0, #4]
     656:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     658:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     65a:	685a      	ldr	r2, [r3, #4]
     65c:	4282      	cmp	r2, r0
     65e:	d101      	bne.n	664 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     660:	6882      	ldr	r2, [r0, #8]
     662:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
     664:	2200      	movs	r2, #0
     666:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     668:	681a      	ldr	r2, [r3, #0]
     66a:	3a01      	subs	r2, #1
     66c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     66e:	6818      	ldr	r0, [r3, #0]
}
     670:	4770      	bx	lr
     672:	46c0      	nop			; (mov r8, r8)

00000674 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
     674:	b510      	push	{r4, lr}
     676:	1c04      	adds	r4, r0, #0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
     678:	6c03      	ldr	r3, [r0, #64]	; 0x40
     67a:	2b00      	cmp	r3, #0
     67c:	d108      	bne.n	690 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     67e:	6803      	ldr	r3, [r0, #0]
     680:	2b00      	cmp	r3, #0
     682:	d126      	bne.n	6d2 <prvCopyDataToQueue+0x5e>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     684:	6840      	ldr	r0, [r0, #4]
     686:	4b15      	ldr	r3, [pc, #84]	; (6dc <prvCopyDataToQueue+0x68>)
     688:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     68a:	2300      	movs	r3, #0
     68c:	6063      	str	r3, [r4, #4]
     68e:	e020      	b.n	6d2 <prvCopyDataToQueue+0x5e>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
     690:	2a00      	cmp	r2, #0
     692:	d10e      	bne.n	6b2 <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     694:	6880      	ldr	r0, [r0, #8]
     696:	1c1a      	adds	r2, r3, #0
     698:	4b11      	ldr	r3, [pc, #68]	; (6e0 <prvCopyDataToQueue+0x6c>)
     69a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     69c:	68a3      	ldr	r3, [r4, #8]
     69e:	6c22      	ldr	r2, [r4, #64]	; 0x40
     6a0:	4694      	mov	ip, r2
     6a2:	4463      	add	r3, ip
     6a4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
     6a6:	6862      	ldr	r2, [r4, #4]
     6a8:	4293      	cmp	r3, r2
     6aa:	d312      	bcc.n	6d2 <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     6ac:	6823      	ldr	r3, [r4, #0]
     6ae:	60a3      	str	r3, [r4, #8]
     6b0:	e00f      	b.n	6d2 <prvCopyDataToQueue+0x5e>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     6b2:	68c0      	ldr	r0, [r0, #12]
     6b4:	1c1a      	adds	r2, r3, #0
     6b6:	4b0a      	ldr	r3, [pc, #40]	; (6e0 <prvCopyDataToQueue+0x6c>)
     6b8:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
     6ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
     6bc:	425b      	negs	r3, r3
     6be:	68e2      	ldr	r2, [r4, #12]
     6c0:	18d2      	adds	r2, r2, r3
     6c2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
     6c4:	6821      	ldr	r1, [r4, #0]
     6c6:	428a      	cmp	r2, r1
     6c8:	d203      	bcs.n	6d2 <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     6ca:	6862      	ldr	r2, [r4, #4]
     6cc:	4694      	mov	ip, r2
     6ce:	4463      	add	r3, ip
     6d0:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
     6d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6d4:	3301      	adds	r3, #1
     6d6:	63a3      	str	r3, [r4, #56]	; 0x38
}
     6d8:	bd10      	pop	{r4, pc}
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	00000a09 	.word	0x00000a09
     6e0:	0000322d 	.word	0x0000322d

000006e4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static portBASE_TYPE prvNotifyQueueSetContainer( xQUEUE *pxQueue, portBASE_TYPE xCopyPosition )
	{
     6e4:	b510      	push	{r4, lr}
     6e6:	b082      	sub	sp, #8
     6e8:	9001      	str	r0, [sp, #4]
	xQUEUE *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
     6ea:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	portBASE_TYPE xReturn = pdFALSE;

		configASSERT( pxQueueSetContainer );
     6ec:	2c00      	cmp	r4, #0
     6ee:	d101      	bne.n	6f4 <prvNotifyQueueSetContainer+0x10>
     6f0:	b672      	cpsid	i
     6f2:	e7fe      	b.n	6f2 <prvNotifyQueueSetContainer+0xe>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     6f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     6f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     6f8:	429a      	cmp	r2, r3
     6fa:	d301      	bcc.n	700 <prvNotifyQueueSetContainer+0x1c>
     6fc:	b672      	cpsid	i
     6fe:	e7fe      	b.n	6fe <prvNotifyQueueSetContainer+0x1a>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     700:	6ba2      	ldr	r2, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static portBASE_TYPE prvNotifyQueueSetContainer( xQUEUE *pxQueue, portBASE_TYPE xCopyPosition )
	{
	xQUEUE *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	portBASE_TYPE xReturn = pdFALSE;
     702:	2000      	movs	r0, #0

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     704:	4293      	cmp	r3, r2
     706:	d90e      	bls.n	726 <prvNotifyQueueSetContainer+0x42>
     708:	1c0a      	adds	r2, r1, #0
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
     70a:	1c20      	adds	r0, r4, #0
     70c:	a901      	add	r1, sp, #4
     70e:	4b07      	ldr	r3, [pc, #28]	; (72c <prvNotifyQueueSetContainer+0x48>)
     710:	4798      	blx	r3
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     712:	6a63      	ldr	r3, [r4, #36]	; 0x24
#if ( configUSE_QUEUE_SETS == 1 )

	static portBASE_TYPE prvNotifyQueueSetContainer( xQUEUE *pxQueue, portBASE_TYPE xCopyPosition )
	{
	xQUEUE *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	portBASE_TYPE xReturn = pdFALSE;
     714:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     716:	2b00      	cmp	r3, #0
     718:	d005      	beq.n	726 <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     71a:	1c20      	adds	r0, r4, #0
     71c:	3024      	adds	r0, #36	; 0x24
     71e:	4b04      	ldr	r3, [pc, #16]	; (730 <prvNotifyQueueSetContainer+0x4c>)
     720:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static portBASE_TYPE prvNotifyQueueSetContainer( xQUEUE *pxQueue, portBASE_TYPE xCopyPosition )
	{
	xQUEUE *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	portBASE_TYPE xReturn = pdFALSE;
     722:	1e43      	subs	r3, r0, #1
     724:	4198      	sbcs	r0, r3
				}
			}
		}

		return xReturn;
	}
     726:	b002      	add	sp, #8
     728:	bd10      	pop	{r4, pc}
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	00000675 	.word	0x00000675
     730:	0000098d 	.word	0x0000098d

00000734 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
     734:	b570      	push	{r4, r5, r6, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     736:	2800      	cmp	r0, #0
     738:	d101      	bne.n	73e <xQueueGenericSendFromISR+0xa>
     73a:	b672      	cpsid	i
     73c:	e7fe      	b.n	73c <xQueueGenericSendFromISR+0x8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     73e:	2900      	cmp	r1, #0
     740:	d104      	bne.n	74c <xQueueGenericSendFromISR+0x18>
     742:	6c04      	ldr	r4, [r0, #64]	; 0x40
     744:	2c00      	cmp	r4, #0
     746:	d001      	beq.n	74c <xQueueGenericSendFromISR+0x18>
     748:	b672      	cpsid	i
     74a:	e7fe      	b.n	74a <xQueueGenericSendFromISR+0x16>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     74c:	b672      	cpsid	i
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     74e:	6b84      	ldr	r4, [r0, #56]	; 0x38
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     750:	2500      	movs	r5, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     752:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
     754:	42b4      	cmp	r4, r6
     756:	d22e      	bcs.n	7b6 <xQueueGenericSendFromISR+0x82>
     758:	1c1d      	adds	r5, r3, #0
     75a:	1c16      	adds	r6, r2, #0
     75c:	1c04      	adds	r4, r0, #0
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     75e:	1c1a      	adds	r2, r3, #0
     760:	4b16      	ldr	r3, [pc, #88]	; (7bc <xQueueGenericSendFromISR+0x88>)
     762:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
     764:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     766:	3301      	adds	r3, #1
     768:	d11d      	bne.n	7a6 <xQueueGenericSendFromISR+0x72>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
     76a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     76c:	2b00      	cmp	r3, #0
     76e:	d00b      	beq.n	788 <xQueueGenericSendFromISR+0x54>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     770:	1c20      	adds	r0, r4, #0
     772:	1c29      	adds	r1, r5, #0
     774:	4b12      	ldr	r3, [pc, #72]	; (7c0 <xQueueGenericSendFromISR+0x8c>)
     776:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
     778:	2501      	movs	r5, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     77a:	2801      	cmp	r0, #1
     77c:	d11b      	bne.n	7b6 <xQueueGenericSendFromISR+0x82>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     77e:	2e00      	cmp	r6, #0
     780:	d016      	beq.n	7b0 <xQueueGenericSendFromISR+0x7c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     782:	2301      	movs	r3, #1
     784:	6033      	str	r3, [r6, #0]
     786:	e016      	b.n	7b6 <xQueueGenericSendFromISR+0x82>
							}
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     788:	6a63      	ldr	r3, [r4, #36]	; 0x24
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
     78a:	2501      	movs	r5, #1
							}
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     78c:	2b00      	cmp	r3, #0
     78e:	d012      	beq.n	7b6 <xQueueGenericSendFromISR+0x82>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     790:	1c20      	adds	r0, r4, #0
     792:	3024      	adds	r0, #36	; 0x24
     794:	4b0b      	ldr	r3, [pc, #44]	; (7c4 <xQueueGenericSendFromISR+0x90>)
     796:	4798      	blx	r3
     798:	2800      	cmp	r0, #0
     79a:	d00c      	beq.n	7b6 <xQueueGenericSendFromISR+0x82>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
     79c:	2e00      	cmp	r6, #0
     79e:	d009      	beq.n	7b4 <xQueueGenericSendFromISR+0x80>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
     7a0:	2301      	movs	r3, #1
     7a2:	6033      	str	r3, [r6, #0]
     7a4:	e007      	b.n	7b6 <xQueueGenericSendFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
     7a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     7a8:	3301      	adds	r3, #1
     7aa:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
     7ac:	2501      	movs	r5, #1
     7ae:	e002      	b.n	7b6 <xQueueGenericSendFromISR+0x82>
     7b0:	2501      	movs	r5, #1
     7b2:	e000      	b.n	7b6 <xQueueGenericSendFromISR+0x82>
     7b4:	2501      	movs	r5, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     7b6:	b662      	cpsie	i

	return xReturn;
}
     7b8:	1c28      	adds	r0, r5, #0
     7ba:	bd70      	pop	{r4, r5, r6, pc}
     7bc:	00000675 	.word	0x00000675
     7c0:	000006e5 	.word	0x000006e5
     7c4:	0000098d 	.word	0x0000098d

000007c8 <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
     7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     7ca:	4b3b      	ldr	r3, [pc, #236]	; (8b8 <vTaskIncrementTick+0xf0>)
     7cc:	681b      	ldr	r3, [r3, #0]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d16d      	bne.n	8ae <vTaskIncrementTick+0xe6>
	{
		++xTickCount;
     7d2:	4b3a      	ldr	r3, [pc, #232]	; (8bc <vTaskIncrementTick+0xf4>)
     7d4:	681a      	ldr	r2, [r3, #0]
     7d6:	3201      	adds	r2, #1
     7d8:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
     7da:	681b      	ldr	r3, [r3, #0]
     7dc:	2b00      	cmp	r3, #0
     7de:	d120      	bne.n	822 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
     7e0:	4b37      	ldr	r3, [pc, #220]	; (8c0 <vTaskIncrementTick+0xf8>)
     7e2:	681b      	ldr	r3, [r3, #0]
     7e4:	681b      	ldr	r3, [r3, #0]
     7e6:	2b00      	cmp	r3, #0
     7e8:	d001      	beq.n	7ee <vTaskIncrementTick+0x26>
     7ea:	b672      	cpsid	i
     7ec:	e7fe      	b.n	7ec <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
     7ee:	4b34      	ldr	r3, [pc, #208]	; (8c0 <vTaskIncrementTick+0xf8>)
     7f0:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
     7f2:	4a34      	ldr	r2, [pc, #208]	; (8c4 <vTaskIncrementTick+0xfc>)
     7f4:	6810      	ldr	r0, [r2, #0]
     7f6:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
     7f8:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
     7fa:	4933      	ldr	r1, [pc, #204]	; (8c8 <vTaskIncrementTick+0x100>)
     7fc:	680a      	ldr	r2, [r1, #0]
     7fe:	3201      	adds	r2, #1
     800:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     802:	681b      	ldr	r3, [r3, #0]
     804:	681b      	ldr	r3, [r3, #0]
     806:	2b00      	cmp	r3, #0
     808:	d104      	bne.n	814 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
     80a:	2201      	movs	r2, #1
     80c:	4252      	negs	r2, r2
     80e:	4b2f      	ldr	r3, [pc, #188]	; (8cc <vTaskIncrementTick+0x104>)
     810:	601a      	str	r2, [r3, #0]
     812:	e006      	b.n	822 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     814:	4b2a      	ldr	r3, [pc, #168]	; (8c0 <vTaskIncrementTick+0xf8>)
     816:	681b      	ldr	r3, [r3, #0]
     818:	68db      	ldr	r3, [r3, #12]
     81a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     81c:	685a      	ldr	r2, [r3, #4]
     81e:	4b2b      	ldr	r3, [pc, #172]	; (8cc <vTaskIncrementTick+0x104>)
     820:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
     822:	4b26      	ldr	r3, [pc, #152]	; (8bc <vTaskIncrementTick+0xf4>)
     824:	681a      	ldr	r2, [r3, #0]
     826:	4b29      	ldr	r3, [pc, #164]	; (8cc <vTaskIncrementTick+0x104>)
     828:	681b      	ldr	r3, [r3, #0]
     82a:	429a      	cmp	r2, r3
     82c:	d343      	bcc.n	8b6 <vTaskIncrementTick+0xee>
     82e:	4b24      	ldr	r3, [pc, #144]	; (8c0 <vTaskIncrementTick+0xf8>)
     830:	681b      	ldr	r3, [r3, #0]
     832:	681b      	ldr	r3, [r3, #0]
     834:	2b00      	cmp	r3, #0
     836:	d00b      	beq.n	850 <vTaskIncrementTick+0x88>
     838:	4b21      	ldr	r3, [pc, #132]	; (8c0 <vTaskIncrementTick+0xf8>)
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	68db      	ldr	r3, [r3, #12]
     83e:	68dd      	ldr	r5, [r3, #12]
     840:	686b      	ldr	r3, [r5, #4]
     842:	4a1e      	ldr	r2, [pc, #120]	; (8bc <vTaskIncrementTick+0xf4>)
     844:	6812      	ldr	r2, [r2, #0]
     846:	4293      	cmp	r3, r2
     848:	d810      	bhi.n	86c <vTaskIncrementTick+0xa4>
     84a:	4f21      	ldr	r7, [pc, #132]	; (8d0 <vTaskIncrementTick+0x108>)
     84c:	4e21      	ldr	r6, [pc, #132]	; (8d4 <vTaskIncrementTick+0x10c>)
     84e:	e010      	b.n	872 <vTaskIncrementTick+0xaa>
     850:	2201      	movs	r2, #1
     852:	4252      	negs	r2, r2
     854:	4b1d      	ldr	r3, [pc, #116]	; (8cc <vTaskIncrementTick+0x104>)
     856:	601a      	str	r2, [r3, #0]
     858:	e02d      	b.n	8b6 <vTaskIncrementTick+0xee>
     85a:	4b19      	ldr	r3, [pc, #100]	; (8c0 <vTaskIncrementTick+0xf8>)
     85c:	681b      	ldr	r3, [r3, #0]
     85e:	68db      	ldr	r3, [r3, #12]
     860:	68dd      	ldr	r5, [r3, #12]
     862:	686b      	ldr	r3, [r5, #4]
     864:	4a15      	ldr	r2, [pc, #84]	; (8bc <vTaskIncrementTick+0xf4>)
     866:	6812      	ldr	r2, [r2, #0]
     868:	4293      	cmp	r3, r2
     86a:	d902      	bls.n	872 <vTaskIncrementTick+0xaa>
     86c:	4a17      	ldr	r2, [pc, #92]	; (8cc <vTaskIncrementTick+0x104>)
     86e:	6013      	str	r3, [r2, #0]
     870:	e021      	b.n	8b6 <vTaskIncrementTick+0xee>
     872:	1d2c      	adds	r4, r5, #4
     874:	1c20      	adds	r0, r4, #0
     876:	47b8      	blx	r7
     878:	6aab      	ldr	r3, [r5, #40]	; 0x28
     87a:	2b00      	cmp	r3, #0
     87c:	d003      	beq.n	886 <vTaskIncrementTick+0xbe>
     87e:	1c28      	adds	r0, r5, #0
     880:	3018      	adds	r0, #24
     882:	4b13      	ldr	r3, [pc, #76]	; (8d0 <vTaskIncrementTick+0x108>)
     884:	4798      	blx	r3
     886:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     888:	6832      	ldr	r2, [r6, #0]
     88a:	4293      	cmp	r3, r2
     88c:	d901      	bls.n	892 <vTaskIncrementTick+0xca>
     88e:	4a11      	ldr	r2, [pc, #68]	; (8d4 <vTaskIncrementTick+0x10c>)
     890:	6013      	str	r3, [r2, #0]
     892:	0098      	lsls	r0, r3, #2
     894:	18c3      	adds	r3, r0, r3
     896:	009b      	lsls	r3, r3, #2
     898:	480f      	ldr	r0, [pc, #60]	; (8d8 <vTaskIncrementTick+0x110>)
     89a:	18c0      	adds	r0, r0, r3
     89c:	1c21      	adds	r1, r4, #0
     89e:	4b0f      	ldr	r3, [pc, #60]	; (8dc <vTaskIncrementTick+0x114>)
     8a0:	4798      	blx	r3
     8a2:	4b07      	ldr	r3, [pc, #28]	; (8c0 <vTaskIncrementTick+0xf8>)
     8a4:	681b      	ldr	r3, [r3, #0]
     8a6:	681b      	ldr	r3, [r3, #0]
     8a8:	2b00      	cmp	r3, #0
     8aa:	d1d6      	bne.n	85a <vTaskIncrementTick+0x92>
     8ac:	e7d0      	b.n	850 <vTaskIncrementTick+0x88>
	}
	else
	{
		++uxMissedTicks;
     8ae:	4a0c      	ldr	r2, [pc, #48]	; (8e0 <vTaskIncrementTick+0x118>)
     8b0:	6813      	ldr	r3, [r2, #0]
     8b2:	3301      	adds	r3, #1
     8b4:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
     8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8b8:	200000f8 	.word	0x200000f8
     8bc:	20000118 	.word	0x20000118
     8c0:	20000090 	.word	0x20000090
     8c4:	2000011c 	.word	0x2000011c
     8c8:	20000114 	.word	0x20000114
     8cc:	20000000 	.word	0x20000000
     8d0:	0000064d 	.word	0x0000064d
     8d4:	20000120 	.word	0x20000120
     8d8:	20000094 	.word	0x20000094
     8dc:	00000631 	.word	0x00000631
     8e0:	2000008c 	.word	0x2000008c

000008e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     8e4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     8e6:	4b24      	ldr	r3, [pc, #144]	; (978 <vTaskSwitchContext+0x94>)
     8e8:	681b      	ldr	r3, [r3, #0]
     8ea:	2b00      	cmp	r3, #0
     8ec:	d110      	bne.n	910 <vTaskSwitchContext+0x2c>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     8ee:	4b23      	ldr	r3, [pc, #140]	; (97c <vTaskSwitchContext+0x98>)
     8f0:	681b      	ldr	r3, [r3, #0]
     8f2:	009a      	lsls	r2, r3, #2
     8f4:	18d3      	adds	r3, r2, r3
     8f6:	009b      	lsls	r3, r3, #2
     8f8:	4a21      	ldr	r2, [pc, #132]	; (980 <vTaskSwitchContext+0x9c>)
     8fa:	589b      	ldr	r3, [r3, r2]
     8fc:	2b00      	cmp	r3, #0
     8fe:	d11a      	bne.n	936 <vTaskSwitchContext+0x52>
     900:	4b1e      	ldr	r3, [pc, #120]	; (97c <vTaskSwitchContext+0x98>)
     902:	681b      	ldr	r3, [r3, #0]
     904:	2b00      	cmp	r3, #0
     906:	d00a      	beq.n	91e <vTaskSwitchContext+0x3a>
     908:	4a1c      	ldr	r2, [pc, #112]	; (97c <vTaskSwitchContext+0x98>)
     90a:	4c1d      	ldr	r4, [pc, #116]	; (980 <vTaskSwitchContext+0x9c>)
     90c:	1c10      	adds	r0, r2, #0
     90e:	e008      	b.n	922 <vTaskSwitchContext+0x3e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     910:	2201      	movs	r2, #1
     912:	4b1c      	ldr	r3, [pc, #112]	; (984 <vTaskSwitchContext+0xa0>)
     914:	601a      	str	r2, [r3, #0]
     916:	e02d      	b.n	974 <vTaskSwitchContext+0x90>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     918:	6803      	ldr	r3, [r0, #0]
     91a:	2b00      	cmp	r3, #0
     91c:	d101      	bne.n	922 <vTaskSwitchContext+0x3e>
     91e:	b672      	cpsid	i
     920:	e7fe      	b.n	920 <vTaskSwitchContext+0x3c>
     922:	6813      	ldr	r3, [r2, #0]
     924:	3b01      	subs	r3, #1
     926:	6013      	str	r3, [r2, #0]
     928:	6813      	ldr	r3, [r2, #0]
     92a:	0099      	lsls	r1, r3, #2
     92c:	18cb      	adds	r3, r1, r3
     92e:	009b      	lsls	r3, r3, #2
     930:	591b      	ldr	r3, [r3, r4]
     932:	2b00      	cmp	r3, #0
     934:	d0f0      	beq.n	918 <vTaskSwitchContext+0x34>
     936:	4b11      	ldr	r3, [pc, #68]	; (97c <vTaskSwitchContext+0x98>)
     938:	681b      	ldr	r3, [r3, #0]
     93a:	4c11      	ldr	r4, [pc, #68]	; (980 <vTaskSwitchContext+0x9c>)
     93c:	009a      	lsls	r2, r3, #2
     93e:	18d1      	adds	r1, r2, r3
     940:	0089      	lsls	r1, r1, #2
     942:	1861      	adds	r1, r4, r1
     944:	6848      	ldr	r0, [r1, #4]
     946:	6840      	ldr	r0, [r0, #4]
     948:	6048      	str	r0, [r1, #4]
     94a:	18d2      	adds	r2, r2, r3
     94c:	0092      	lsls	r2, r2, #2
     94e:	3208      	adds	r2, #8
     950:	18a2      	adds	r2, r4, r2
     952:	4290      	cmp	r0, r2
     954:	d105      	bne.n	962 <vTaskSwitchContext+0x7e>
     956:	6841      	ldr	r1, [r0, #4]
     958:	009a      	lsls	r2, r3, #2
     95a:	18d2      	adds	r2, r2, r3
     95c:	0092      	lsls	r2, r2, #2
     95e:	18a2      	adds	r2, r4, r2
     960:	6051      	str	r1, [r2, #4]
     962:	009a      	lsls	r2, r3, #2
     964:	18d3      	adds	r3, r2, r3
     966:	009b      	lsls	r3, r3, #2
     968:	4a05      	ldr	r2, [pc, #20]	; (980 <vTaskSwitchContext+0x9c>)
     96a:	18d3      	adds	r3, r2, r3
     96c:	685b      	ldr	r3, [r3, #4]
     96e:	68da      	ldr	r2, [r3, #12]
     970:	4b05      	ldr	r3, [pc, #20]	; (988 <vTaskSwitchContext+0xa4>)
     972:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
     974:	bd10      	pop	{r4, pc}
     976:	46c0      	nop			; (mov r8, r8)
     978:	200000f8 	.word	0x200000f8
     97c:	20000120 	.word	0x20000120
     980:	20000094 	.word	0x20000094
     984:	20000124 	.word	0x20000124
     988:	200000fc 	.word	0x200000fc

0000098c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
     98c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     98e:	68c3      	ldr	r3, [r0, #12]
     990:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
     992:	2d00      	cmp	r5, #0
     994:	d101      	bne.n	99a <xTaskRemoveFromEventList+0xe>
     996:	b672      	cpsid	i
     998:	e7fe      	b.n	998 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
     99a:	1c2c      	adds	r4, r5, #0
     99c:	3418      	adds	r4, #24
     99e:	1c20      	adds	r0, r4, #0
     9a0:	4b12      	ldr	r3, [pc, #72]	; (9ec <xTaskRemoveFromEventList+0x60>)
     9a2:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     9a4:	4b12      	ldr	r3, [pc, #72]	; (9f0 <xTaskRemoveFromEventList+0x64>)
     9a6:	681b      	ldr	r3, [r3, #0]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d113      	bne.n	9d4 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
     9ac:	1d2c      	adds	r4, r5, #4
     9ae:	1c20      	adds	r0, r4, #0
     9b0:	4b0e      	ldr	r3, [pc, #56]	; (9ec <xTaskRemoveFromEventList+0x60>)
     9b2:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
     9b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     9b6:	4a0f      	ldr	r2, [pc, #60]	; (9f4 <xTaskRemoveFromEventList+0x68>)
     9b8:	6812      	ldr	r2, [r2, #0]
     9ba:	4293      	cmp	r3, r2
     9bc:	d901      	bls.n	9c2 <xTaskRemoveFromEventList+0x36>
     9be:	4a0d      	ldr	r2, [pc, #52]	; (9f4 <xTaskRemoveFromEventList+0x68>)
     9c0:	6013      	str	r3, [r2, #0]
     9c2:	0098      	lsls	r0, r3, #2
     9c4:	18c3      	adds	r3, r0, r3
     9c6:	009b      	lsls	r3, r3, #2
     9c8:	480b      	ldr	r0, [pc, #44]	; (9f8 <xTaskRemoveFromEventList+0x6c>)
     9ca:	18c0      	adds	r0, r0, r3
     9cc:	1c21      	adds	r1, r4, #0
     9ce:	4b0b      	ldr	r3, [pc, #44]	; (9fc <xTaskRemoveFromEventList+0x70>)
     9d0:	4798      	blx	r3
     9d2:	e003      	b.n	9dc <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
     9d4:	480a      	ldr	r0, [pc, #40]	; (a00 <xTaskRemoveFromEventList+0x74>)
     9d6:	1c21      	adds	r1, r4, #0
     9d8:	4b08      	ldr	r3, [pc, #32]	; (9fc <xTaskRemoveFromEventList+0x70>)
     9da:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
     9dc:	4b09      	ldr	r3, [pc, #36]	; (a04 <xTaskRemoveFromEventList+0x78>)
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     9e4:	2000      	movs	r0, #0
     9e6:	429a      	cmp	r2, r3
     9e8:	4140      	adcs	r0, r0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     9ea:	bd38      	pop	{r3, r4, r5, pc}
     9ec:	0000064d 	.word	0x0000064d
     9f0:	200000f8 	.word	0x200000f8
     9f4:	20000120 	.word	0x20000120
     9f8:	20000094 	.word	0x20000094
     9fc:	00000631 	.word	0x00000631
     a00:	20000100 	.word	0x20000100
     a04:	200000fc 	.word	0x200000fc

00000a08 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
     a08:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
     a0a:	2800      	cmp	r0, #0
     a0c:	d01b      	beq.n	a46 <vTaskPriorityDisinherit+0x3e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
     a0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     a10:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
     a12:	4293      	cmp	r3, r2
     a14:	d017      	beq.n	a46 <vTaskPriorityDisinherit+0x3e>
     a16:	1c04      	adds	r4, r0, #0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
     a18:	1d05      	adds	r5, r0, #4
     a1a:	1c28      	adds	r0, r5, #0
     a1c:	4b0a      	ldr	r3, [pc, #40]	; (a48 <vTaskPriorityDisinherit+0x40>)
     a1e:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
     a20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     a22:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
     a24:	2205      	movs	r2, #5
     a26:	1ad2      	subs	r2, r2, r3
     a28:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
     a2a:	4a08      	ldr	r2, [pc, #32]	; (a4c <vTaskPriorityDisinherit+0x44>)
     a2c:	6812      	ldr	r2, [r2, #0]
     a2e:	4293      	cmp	r3, r2
     a30:	d901      	bls.n	a36 <vTaskPriorityDisinherit+0x2e>
     a32:	4a06      	ldr	r2, [pc, #24]	; (a4c <vTaskPriorityDisinherit+0x44>)
     a34:	6013      	str	r3, [r2, #0]
     a36:	0098      	lsls	r0, r3, #2
     a38:	18c0      	adds	r0, r0, r3
     a3a:	0083      	lsls	r3, r0, #2
     a3c:	4804      	ldr	r0, [pc, #16]	; (a50 <vTaskPriorityDisinherit+0x48>)
     a3e:	18c0      	adds	r0, r0, r3
     a40:	1c29      	adds	r1, r5, #0
     a42:	4b04      	ldr	r3, [pc, #16]	; (a54 <vTaskPriorityDisinherit+0x4c>)
     a44:	4798      	blx	r3
			}
		}
	}
     a46:	bd38      	pop	{r3, r4, r5, pc}
     a48:	0000064d 	.word	0x0000064d
     a4c:	20000120 	.word	0x20000120
     a50:	20000094 	.word	0x20000094
     a54:	00000631 	.word	0x00000631

00000a58 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a58:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5a:	465f      	mov	r7, fp
     a5c:	4656      	mov	r6, sl
     a5e:	464d      	mov	r5, r9
     a60:	4644      	mov	r4, r8
     a62:	b4f0      	push	{r4, r5, r6, r7}
     a64:	b091      	sub	sp, #68	; 0x44
     a66:	1c05      	adds	r5, r0, #0
     a68:	1c0c      	adds	r4, r1, #0
     a6a:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     a6c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a6e:	1c08      	adds	r0, r1, #0
     a70:	4bb9      	ldr	r3, [pc, #740]	; (d58 <usart_init+0x300>)
     a72:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a74:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     a76:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a78:	07d2      	lsls	r2, r2, #31
     a7a:	d500      	bpl.n	a7e <usart_init+0x26>
     a7c:	e163      	b.n	d46 <usart_init+0x2ee>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a7e:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     a80:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a82:	0792      	lsls	r2, r2, #30
     a84:	d500      	bpl.n	a88 <usart_init+0x30>
     a86:	e15e      	b.n	d46 <usart_init+0x2ee>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a88:	49b4      	ldr	r1, [pc, #720]	; (d5c <usart_init+0x304>)
     a8a:	6a0a      	ldr	r2, [r1, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a8c:	1c87      	adds	r7, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a8e:	3b1b      	subs	r3, #27
     a90:	40bb      	lsls	r3, r7
     a92:	4313      	orrs	r3, r2
     a94:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     a96:	a90f      	add	r1, sp, #60	; 0x3c
     a98:	272d      	movs	r7, #45	; 0x2d
     a9a:	5df3      	ldrb	r3, [r6, r7]
     a9c:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a9e:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     aa0:	b2c3      	uxtb	r3, r0
     aa2:	9302      	str	r3, [sp, #8]
     aa4:	1c18      	adds	r0, r3, #0
     aa6:	4bae      	ldr	r3, [pc, #696]	; (d60 <usart_init+0x308>)
     aa8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     aaa:	9802      	ldr	r0, [sp, #8]
     aac:	4bad      	ldr	r3, [pc, #692]	; (d64 <usart_init+0x30c>)
     aae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ab0:	5df0      	ldrb	r0, [r6, r7]
     ab2:	2100      	movs	r1, #0
     ab4:	4bac      	ldr	r3, [pc, #688]	; (d68 <usart_init+0x310>)
     ab6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     ab8:	7af3      	ldrb	r3, [r6, #11]
     aba:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     abc:	2324      	movs	r3, #36	; 0x24
     abe:	5cf3      	ldrb	r3, [r6, r3]
     ac0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     ac2:	2325      	movs	r3, #37	; 0x25
     ac4:	5cf3      	ldrb	r3, [r6, r3]
     ac6:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     ac8:	7ef3      	ldrb	r3, [r6, #27]
     aca:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     acc:	7f33      	ldrb	r3, [r6, #28]
     ace:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ad0:	682b      	ldr	r3, [r5, #0]
     ad2:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ad4:	1c18      	adds	r0, r3, #0
     ad6:	4ba0      	ldr	r3, [pc, #640]	; (d58 <usart_init+0x300>)
     ad8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ada:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     adc:	2200      	movs	r2, #0
     ade:	230e      	movs	r3, #14
     ae0:	a906      	add	r1, sp, #24
     ae2:	468c      	mov	ip, r1
     ae4:	4463      	add	r3, ip
     ae6:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     ae8:	8a33      	ldrh	r3, [r6, #16]
     aea:	4699      	mov	r9, r3
     aec:	2380      	movs	r3, #128	; 0x80
     aee:	01db      	lsls	r3, r3, #7
     af0:	4599      	cmp	r9, r3
     af2:	d019      	beq.n	b28 <usart_init+0xd0>
     af4:	d804      	bhi.n	b00 <usart_init+0xa8>
     af6:	2380      	movs	r3, #128	; 0x80
     af8:	019b      	lsls	r3, r3, #6
     afa:	4599      	cmp	r9, r3
     afc:	d00a      	beq.n	b14 <usart_init+0xbc>
     afe:	e103      	b.n	d08 <usart_init+0x2b0>
     b00:	23c0      	movs	r3, #192	; 0xc0
     b02:	01db      	lsls	r3, r3, #7
     b04:	4599      	cmp	r9, r3
     b06:	d00a      	beq.n	b1e <usart_init+0xc6>
     b08:	2380      	movs	r3, #128	; 0x80
     b0a:	021b      	lsls	r3, r3, #8
     b0c:	4599      	cmp	r9, r3
     b0e:	d100      	bne.n	b12 <usart_init+0xba>
     b10:	e0ff      	b.n	d12 <usart_init+0x2ba>
     b12:	e0f9      	b.n	d08 <usart_init+0x2b0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b14:	2310      	movs	r3, #16
     b16:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b18:	3b0f      	subs	r3, #15
     b1a:	9307      	str	r3, [sp, #28]
     b1c:	e0fd      	b.n	d1a <usart_init+0x2c2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b1e:	2308      	movs	r3, #8
     b20:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b22:	3b07      	subs	r3, #7
     b24:	9307      	str	r3, [sp, #28]
     b26:	e0f8      	b.n	d1a <usart_init+0x2c2>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     b28:	6833      	ldr	r3, [r6, #0]
     b2a:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     b2c:	68f3      	ldr	r3, [r6, #12]
     b2e:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     b30:	6973      	ldr	r3, [r6, #20]
     b32:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b34:	7e33      	ldrb	r3, [r6, #24]
     b36:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b38:	2326      	movs	r3, #38	; 0x26
     b3a:	5cf3      	ldrb	r3, [r6, r3]
     b3c:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     b3e:	6872      	ldr	r2, [r6, #4]
     b40:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     b42:	2a00      	cmp	r2, #0
     b44:	d015      	beq.n	b72 <usart_init+0x11a>
     b46:	2380      	movs	r3, #128	; 0x80
     b48:	055b      	lsls	r3, r3, #21
     b4a:	429a      	cmp	r2, r3
     b4c:	d136      	bne.n	bbc <usart_init+0x164>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     b4e:	2327      	movs	r3, #39	; 0x27
     b50:	5cf3      	ldrb	r3, [r6, r3]
     b52:	2b00      	cmp	r3, #0
     b54:	d136      	bne.n	bc4 <usart_init+0x16c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     b56:	6a33      	ldr	r3, [r6, #32]
     b58:	4698      	mov	r8, r3
     b5a:	b2c0      	uxtb	r0, r0
     b5c:	4b83      	ldr	r3, [pc, #524]	; (d6c <usart_init+0x314>)
     b5e:	4798      	blx	r3
     b60:	1c01      	adds	r1, r0, #0
     b62:	4640      	mov	r0, r8
     b64:	220e      	movs	r2, #14
     b66:	ab06      	add	r3, sp, #24
     b68:	469c      	mov	ip, r3
     b6a:	4462      	add	r2, ip
     b6c:	4b80      	ldr	r3, [pc, #512]	; (d70 <usart_init+0x318>)
     b6e:	4798      	blx	r3
     b70:	e025      	b.n	bbe <usart_init+0x166>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b72:	2308      	movs	r3, #8
     b74:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b76:	2300      	movs	r3, #0
     b78:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     b7a:	2327      	movs	r3, #39	; 0x27
     b7c:	5cf3      	ldrb	r3, [r6, r3]
     b7e:	2b00      	cmp	r3, #0
     b80:	d00b      	beq.n	b9a <usart_init+0x142>
				status_code =
     b82:	4643      	mov	r3, r8
     b84:	9300      	str	r3, [sp, #0]
     b86:	6a30      	ldr	r0, [r6, #32]
     b88:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     b8a:	220e      	movs	r2, #14
     b8c:	ab06      	add	r3, sp, #24
     b8e:	469c      	mov	ip, r3
     b90:	4462      	add	r2, ip
     b92:	9b07      	ldr	r3, [sp, #28]
     b94:	4f77      	ldr	r7, [pc, #476]	; (d74 <usart_init+0x31c>)
     b96:	47b8      	blx	r7
     b98:	e011      	b.n	bbe <usart_init+0x166>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     b9a:	6a33      	ldr	r3, [r6, #32]
     b9c:	1c1f      	adds	r7, r3, #0
     b9e:	b2c0      	uxtb	r0, r0
     ba0:	4b72      	ldr	r3, [pc, #456]	; (d6c <usart_init+0x314>)
     ba2:	4798      	blx	r3
     ba4:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     ba6:	4643      	mov	r3, r8
     ba8:	9300      	str	r3, [sp, #0]
     baa:	1c38      	adds	r0, r7, #0
     bac:	220e      	movs	r2, #14
     bae:	ab06      	add	r3, sp, #24
     bb0:	469c      	mov	ip, r3
     bb2:	4462      	add	r2, ip
     bb4:	9b07      	ldr	r3, [sp, #28]
     bb6:	4f6f      	ldr	r7, [pc, #444]	; (d74 <usart_init+0x31c>)
     bb8:	47b8      	blx	r7
     bba:	e000      	b.n	bbe <usart_init+0x166>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     bbc:	2000      	movs	r0, #0
     bbe:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     bc0:	d000      	beq.n	bc4 <usart_init+0x16c>
     bc2:	e0c0      	b.n	d46 <usart_init+0x2ee>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     bc4:	7e73      	ldrb	r3, [r6, #25]
     bc6:	2b00      	cmp	r3, #0
     bc8:	d002      	beq.n	bd0 <usart_init+0x178>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     bca:	7eb3      	ldrb	r3, [r6, #26]
     bcc:	4652      	mov	r2, sl
     bce:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     bd0:	682a      	ldr	r2, [r5, #0]
     bd2:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bd4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     bd6:	2b00      	cmp	r3, #0
     bd8:	d1fc      	bne.n	bd4 <usart_init+0x17c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     bda:	330e      	adds	r3, #14
     bdc:	aa06      	add	r2, sp, #24
     bde:	4694      	mov	ip, r2
     be0:	4463      	add	r3, ip
     be2:	881b      	ldrh	r3, [r3, #0]
     be4:	4652      	mov	r2, sl
     be6:	8193      	strh	r3, [r2, #12]
     be8:	9b02      	ldr	r3, [sp, #8]
     bea:	465a      	mov	r2, fp
     bec:	4313      	orrs	r3, r2
     bee:	9a03      	ldr	r2, [sp, #12]
     bf0:	4313      	orrs	r3, r2
     bf2:	433b      	orrs	r3, r7
     bf4:	464a      	mov	r2, r9
     bf6:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bf8:	9a04      	ldr	r2, [sp, #16]
     bfa:	0212      	lsls	r2, r2, #8
     bfc:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bfe:	9a05      	ldr	r2, [sp, #20]
     c00:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     c02:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     c04:	2327      	movs	r3, #39	; 0x27
     c06:	5cf3      	ldrb	r3, [r6, r3]
     c08:	2b00      	cmp	r3, #0
     c0a:	d101      	bne.n	c10 <usart_init+0x1b8>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     c0c:	3304      	adds	r3, #4
     c0e:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c10:	7f33      	ldrb	r3, [r6, #28]
     c12:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c14:	7e72      	ldrb	r2, [r6, #25]
     c16:	0293      	lsls	r3, r2, #10
     c18:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c1a:	7f72      	ldrb	r2, [r6, #29]
     c1c:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c1e:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c20:	2224      	movs	r2, #36	; 0x24
     c22:	5cb2      	ldrb	r2, [r6, r2]
     c24:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c26:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c28:	2225      	movs	r2, #37	; 0x25
     c2a:	5cb2      	ldrb	r2, [r6, r2]
     c2c:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c2e:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     c30:	7af1      	ldrb	r1, [r6, #11]
     c32:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     c34:	8933      	ldrh	r3, [r6, #8]
     c36:	2bff      	cmp	r3, #255	; 0xff
     c38:	d004      	beq.n	c44 <usart_init+0x1ec>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c3a:	2280      	movs	r2, #128	; 0x80
     c3c:	0452      	lsls	r2, r2, #17
     c3e:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     c40:	4319      	orrs	r1, r3
     c42:	e005      	b.n	c50 <usart_init+0x1f8>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     c44:	7ef3      	ldrb	r3, [r6, #27]
     c46:	2b00      	cmp	r3, #0
     c48:	d002      	beq.n	c50 <usart_init+0x1f8>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     c4a:	2380      	movs	r3, #128	; 0x80
     c4c:	04db      	lsls	r3, r3, #19
     c4e:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     c50:	232c      	movs	r3, #44	; 0x2c
     c52:	5cf3      	ldrb	r3, [r6, r3]
     c54:	2b00      	cmp	r3, #0
     c56:	d103      	bne.n	c60 <usart_init+0x208>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c58:	4b47      	ldr	r3, [pc, #284]	; (d78 <usart_init+0x320>)
     c5a:	789b      	ldrb	r3, [r3, #2]
     c5c:	079b      	lsls	r3, r3, #30
     c5e:	d501      	bpl.n	c64 <usart_init+0x20c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c60:	2380      	movs	r3, #128	; 0x80
     c62:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c64:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c66:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c68:	2b00      	cmp	r3, #0
     c6a:	d1fc      	bne.n	c66 <usart_init+0x20e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     c6c:	4653      	mov	r3, sl
     c6e:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c70:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c72:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c74:	2b00      	cmp	r3, #0
     c76:	d1fc      	bne.n	c72 <usart_init+0x21a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     c78:	4653      	mov	r3, sl
     c7a:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c7c:	ab0e      	add	r3, sp, #56	; 0x38
     c7e:	2280      	movs	r2, #128	; 0x80
     c80:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c82:	2200      	movs	r2, #0
     c84:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     c86:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c88:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     c8a:	6b33      	ldr	r3, [r6, #48]	; 0x30
     c8c:	930a      	str	r3, [sp, #40]	; 0x28
     c8e:	6b73      	ldr	r3, [r6, #52]	; 0x34
     c90:	930b      	str	r3, [sp, #44]	; 0x2c
     c92:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     c94:	930c      	str	r3, [sp, #48]	; 0x30
     c96:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     c98:	9302      	str	r3, [sp, #8]
     c9a:	930d      	str	r3, [sp, #52]	; 0x34
     c9c:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c9e:	ae0e      	add	r6, sp, #56	; 0x38
     ca0:	b2f9      	uxtb	r1, r7
     ca2:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ca4:	aa0a      	add	r2, sp, #40	; 0x28
     ca6:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     ca8:	2800      	cmp	r0, #0
     caa:	d102      	bne.n	cb2 <usart_init+0x25a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     cac:	1c20      	adds	r0, r4, #0
     cae:	4b33      	ldr	r3, [pc, #204]	; (d7c <usart_init+0x324>)
     cb0:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     cb2:	1c43      	adds	r3, r0, #1
     cb4:	d005      	beq.n	cc2 <usart_init+0x26a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cb6:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     cb8:	0c00      	lsrs	r0, r0, #16
     cba:	b2c0      	uxtb	r0, r0
     cbc:	1c31      	adds	r1, r6, #0
     cbe:	4b30      	ldr	r3, [pc, #192]	; (d80 <usart_init+0x328>)
     cc0:	4798      	blx	r3
     cc2:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     cc4:	2f04      	cmp	r7, #4
     cc6:	d1eb      	bne.n	ca0 <usart_init+0x248>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     cc8:	2300      	movs	r3, #0
     cca:	60eb      	str	r3, [r5, #12]
     ccc:	612b      	str	r3, [r5, #16]
     cce:	616b      	str	r3, [r5, #20]
     cd0:	61ab      	str	r3, [r5, #24]
     cd2:	61eb      	str	r3, [r5, #28]
     cd4:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     cd6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     cd8:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     cda:	2200      	movs	r2, #0
     cdc:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     cde:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     ce0:	3330      	adds	r3, #48	; 0x30
     ce2:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     ce4:	3301      	adds	r3, #1
     ce6:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     ce8:	3301      	adds	r3, #1
     cea:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     cec:	3301      	adds	r3, #1
     cee:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     cf0:	6828      	ldr	r0, [r5, #0]
     cf2:	4b19      	ldr	r3, [pc, #100]	; (d58 <usart_init+0x300>)
     cf4:	4798      	blx	r3
     cf6:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     cf8:	4922      	ldr	r1, [pc, #136]	; (d84 <usart_init+0x32c>)
     cfa:	4b23      	ldr	r3, [pc, #140]	; (d88 <usart_init+0x330>)
     cfc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     cfe:	00a4      	lsls	r4, r4, #2
     d00:	4b22      	ldr	r3, [pc, #136]	; (d8c <usart_init+0x334>)
     d02:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     d04:	2300      	movs	r3, #0
     d06:	e01e      	b.n	d46 <usart_init+0x2ee>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     d08:	2310      	movs	r3, #16
     d0a:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d0c:	2300      	movs	r3, #0
     d0e:	9307      	str	r3, [sp, #28]
     d10:	e003      	b.n	d1a <usart_init+0x2c2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     d12:	2303      	movs	r3, #3
     d14:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d16:	2300      	movs	r3, #0
     d18:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     d1a:	6833      	ldr	r3, [r6, #0]
     d1c:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     d1e:	68f3      	ldr	r3, [r6, #12]
     d20:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     d22:	6973      	ldr	r3, [r6, #20]
     d24:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     d26:	7e33      	ldrb	r3, [r6, #24]
     d28:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d2a:	2326      	movs	r3, #38	; 0x26
     d2c:	5cf3      	ldrb	r3, [r6, r3]
     d2e:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     d30:	6872      	ldr	r2, [r6, #4]
     d32:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     d34:	2a00      	cmp	r2, #0
     d36:	d100      	bne.n	d3a <usart_init+0x2e2>
     d38:	e71f      	b.n	b7a <usart_init+0x122>
     d3a:	2380      	movs	r3, #128	; 0x80
     d3c:	055b      	lsls	r3, r3, #21
     d3e:	429a      	cmp	r2, r3
     d40:	d100      	bne.n	d44 <usart_init+0x2ec>
     d42:	e704      	b.n	b4e <usart_init+0xf6>
     d44:	e73e      	b.n	bc4 <usart_init+0x16c>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     d46:	1c18      	adds	r0, r3, #0
     d48:	b011      	add	sp, #68	; 0x44
     d4a:	bc3c      	pop	{r2, r3, r4, r5}
     d4c:	4690      	mov	r8, r2
     d4e:	4699      	mov	r9, r3
     d50:	46a2      	mov	sl, r4
     d52:	46ab      	mov	fp, r5
     d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	000004d9 	.word	0x000004d9
     d5c:	40000400 	.word	0x40000400
     d60:	00001d29 	.word	0x00001d29
     d64:	00001c9d 	.word	0x00001c9d
     d68:	00000305 	.word	0x00000305
     d6c:	00001d45 	.word	0x00001d45
     d70:	00000115 	.word	0x00000115
     d74:	0000013d 	.word	0x0000013d
     d78:	41002000 	.word	0x41002000
     d7c:	00000351 	.word	0x00000351
     d80:	00001e21 	.word	0x00001e21
     d84:	00000e45 	.word	0x00000e45
     d88:	000015f5 	.word	0x000015f5
     d8c:	200001b0 	.word	0x200001b0

00000d90 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     d90:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d92:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d94:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     d96:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d98:	2c00      	cmp	r4, #0
     d9a:	d00d      	beq.n	db8 <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     d9c:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
     d9e:	b280      	uxth	r0, r0
		return STATUS_BUSY;
     da0:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     da2:	2800      	cmp	r0, #0
     da4:	d108      	bne.n	db8 <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     da6:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     da8:	2a00      	cmp	r2, #0
     daa:	d1fc      	bne.n	da6 <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     dac:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     dae:	2102      	movs	r1, #2
     db0:	7e1a      	ldrb	r2, [r3, #24]
     db2:	420a      	tst	r2, r1
     db4:	d0fc      	beq.n	db0 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     db6:	2200      	movs	r2, #0
}
     db8:	1c10      	adds	r0, r2, #0
     dba:	bd10      	pop	{r4, pc}

00000dbc <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     dbc:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     dbe:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     dc0:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     dc2:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     dc4:	2a00      	cmp	r2, #0
     dc6:	d02f      	beq.n	e28 <usart_read_wait+0x6c>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     dc8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     dca:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     dcc:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     dce:	2a00      	cmp	r2, #0
     dd0:	d12a      	bne.n	e28 <usart_read_wait+0x6c>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     dd2:	7e22      	ldrb	r2, [r4, #24]
     dd4:	0752      	lsls	r2, r2, #29
     dd6:	d527      	bpl.n	e28 <usart_read_wait+0x6c>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     dd8:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     dda:	2b00      	cmp	r3, #0
     ddc:	d1fc      	bne.n	dd8 <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     dde:	8b63      	ldrh	r3, [r4, #26]
     de0:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     de2:	069a      	lsls	r2, r3, #26
     de4:	d01d      	beq.n	e22 <usart_read_wait+0x66>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     de6:	079a      	lsls	r2, r3, #30
     de8:	d503      	bpl.n	df2 <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     dea:	2302      	movs	r3, #2
     dec:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     dee:	3318      	adds	r3, #24
     df0:	e01a      	b.n	e28 <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     df2:	075a      	lsls	r2, r3, #29
     df4:	d503      	bpl.n	dfe <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     df6:	2304      	movs	r3, #4
     df8:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     dfa:	331a      	adds	r3, #26
     dfc:	e014      	b.n	e28 <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     dfe:	07da      	lsls	r2, r3, #31
     e00:	d503      	bpl.n	e0a <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     e02:	2301      	movs	r3, #1
     e04:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     e06:	3312      	adds	r3, #18
     e08:	e00e      	b.n	e28 <usart_read_wait+0x6c>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     e0a:	06da      	lsls	r2, r3, #27
     e0c:	d503      	bpl.n	e16 <usart_read_wait+0x5a>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     e0e:	2310      	movs	r3, #16
     e10:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     e12:	3332      	adds	r3, #50	; 0x32
     e14:	e008      	b.n	e28 <usart_read_wait+0x6c>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     e16:	069b      	lsls	r3, r3, #26
     e18:	d503      	bpl.n	e22 <usart_read_wait+0x66>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     e1a:	2320      	movs	r3, #32
     e1c:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     e1e:	3321      	adds	r3, #33	; 0x21
     e20:	e002      	b.n	e28 <usart_read_wait+0x6c>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     e22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     e24:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     e26:	2300      	movs	r3, #0
}
     e28:	1c18      	adds	r0, r3, #0
     e2a:	bd10      	pop	{r4, pc}

00000e2c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     e2c:	1c93      	adds	r3, r2, #2
     e2e:	009b      	lsls	r3, r3, #2
     e30:	18c3      	adds	r3, r0, r3
     e32:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     e34:	2301      	movs	r3, #1
     e36:	4093      	lsls	r3, r2
     e38:	1c1a      	adds	r2, r3, #0
     e3a:	2130      	movs	r1, #48	; 0x30
     e3c:	5c43      	ldrb	r3, [r0, r1]
     e3e:	431a      	orrs	r2, r3
     e40:	5442      	strb	r2, [r0, r1]
}
     e42:	4770      	bx	lr

00000e44 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     e46:	0080      	lsls	r0, r0, #2
     e48:	4b60      	ldr	r3, [pc, #384]	; (fcc <_usart_interrupt_handler+0x188>)
     e4a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     e4c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     e4e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     e50:	2b00      	cmp	r3, #0
     e52:	d1fc      	bne.n	e4e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     e54:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     e56:	7da6      	ldrb	r6, [r4, #22]
     e58:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     e5a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     e5c:	5ceb      	ldrb	r3, [r5, r3]
     e5e:	2230      	movs	r2, #48	; 0x30
     e60:	5caf      	ldrb	r7, [r5, r2]
     e62:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     e64:	07f3      	lsls	r3, r6, #31
     e66:	d522      	bpl.n	eae <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     e68:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     e6a:	b29b      	uxth	r3, r3
     e6c:	2b00      	cmp	r3, #0
     e6e:	d01c      	beq.n	eaa <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     e72:	7813      	ldrb	r3, [r2, #0]
     e74:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     e76:	1c51      	adds	r1, r2, #1
     e78:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e7a:	7969      	ldrb	r1, [r5, #5]
     e7c:	2901      	cmp	r1, #1
     e7e:	d001      	beq.n	e84 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e80:	b29b      	uxth	r3, r3
     e82:	e004      	b.n	e8e <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     e84:	7851      	ldrb	r1, [r2, #1]
     e86:	0209      	lsls	r1, r1, #8
     e88:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     e8a:	3202      	adds	r2, #2
     e8c:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     e8e:	05db      	lsls	r3, r3, #23
     e90:	0ddb      	lsrs	r3, r3, #23
     e92:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     e94:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     e96:	3b01      	subs	r3, #1
     e98:	b29b      	uxth	r3, r3
     e9a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     e9c:	2b00      	cmp	r3, #0
     e9e:	d106      	bne.n	eae <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ea0:	3301      	adds	r3, #1
     ea2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     ea4:	3301      	adds	r3, #1
     ea6:	75a3      	strb	r3, [r4, #22]
     ea8:	e001      	b.n	eae <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     eaa:	2301      	movs	r3, #1
     eac:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     eae:	07b3      	lsls	r3, r6, #30
     eb0:	d509      	bpl.n	ec6 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     eb2:	2302      	movs	r3, #2
     eb4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     eb6:	2200      	movs	r2, #0
     eb8:	3331      	adds	r3, #49	; 0x31
     eba:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     ebc:	07fb      	lsls	r3, r7, #31
     ebe:	d502      	bpl.n	ec6 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     ec0:	1c28      	adds	r0, r5, #0
     ec2:	68eb      	ldr	r3, [r5, #12]
     ec4:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     ec6:	0773      	lsls	r3, r6, #29
     ec8:	d560      	bpl.n	f8c <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
     eca:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ecc:	b29b      	uxth	r3, r3
     ece:	2b00      	cmp	r3, #0
     ed0:	d05a      	beq.n	f88 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ed2:	8b63      	ldrh	r3, [r4, #26]
     ed4:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     ed6:	071a      	lsls	r2, r3, #28
     ed8:	d402      	bmi.n	ee0 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     eda:	223f      	movs	r2, #63	; 0x3f
     edc:	4013      	ands	r3, r2
     ede:	e001      	b.n	ee4 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     ee0:	2237      	movs	r2, #55	; 0x37
     ee2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     ee4:	2b00      	cmp	r3, #0
     ee6:	d02d      	beq.n	f44 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     ee8:	079a      	lsls	r2, r3, #30
     eea:	d505      	bpl.n	ef8 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     eec:	221a      	movs	r2, #26
     eee:	2332      	movs	r3, #50	; 0x32
     ef0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     ef2:	3b30      	subs	r3, #48	; 0x30
     ef4:	8363      	strh	r3, [r4, #26]
     ef6:	e01f      	b.n	f38 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ef8:	075a      	lsls	r2, r3, #29
     efa:	d505      	bpl.n	f08 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     efc:	221e      	movs	r2, #30
     efe:	2332      	movs	r3, #50	; 0x32
     f00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     f02:	3b2e      	subs	r3, #46	; 0x2e
     f04:	8363      	strh	r3, [r4, #26]
     f06:	e017      	b.n	f38 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f08:	07da      	lsls	r2, r3, #31
     f0a:	d505      	bpl.n	f18 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     f0c:	2213      	movs	r2, #19
     f0e:	2332      	movs	r3, #50	; 0x32
     f10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     f12:	3b31      	subs	r3, #49	; 0x31
     f14:	8363      	strh	r3, [r4, #26]
     f16:	e00f      	b.n	f38 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     f18:	06da      	lsls	r2, r3, #27
     f1a:	d505      	bpl.n	f28 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     f1c:	2242      	movs	r2, #66	; 0x42
     f1e:	2332      	movs	r3, #50	; 0x32
     f20:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     f22:	3b22      	subs	r3, #34	; 0x22
     f24:	8363      	strh	r3, [r4, #26]
     f26:	e007      	b.n	f38 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     f28:	2220      	movs	r2, #32
     f2a:	421a      	tst	r2, r3
     f2c:	d004      	beq.n	f38 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     f2e:	3221      	adds	r2, #33	; 0x21
     f30:	2332      	movs	r3, #50	; 0x32
     f32:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     f34:	3b12      	subs	r3, #18
     f36:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     f38:	077b      	lsls	r3, r7, #29
     f3a:	d527      	bpl.n	f8c <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     f3c:	1c28      	adds	r0, r5, #0
     f3e:	696b      	ldr	r3, [r5, #20]
     f40:	4798      	blx	r3
     f42:	e023      	b.n	f8c <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     f44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     f46:	05db      	lsls	r3, r3, #23
     f48:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     f4a:	b2da      	uxtb	r2, r3
     f4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
     f4e:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     f50:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     f52:	1c51      	adds	r1, r2, #1
     f54:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f56:	7969      	ldrb	r1, [r5, #5]
     f58:	2901      	cmp	r1, #1
     f5a:	d104      	bne.n	f66 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     f5c:	0a1b      	lsrs	r3, r3, #8
     f5e:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     f60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f62:	3301      	adds	r3, #1
     f64:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     f66:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f68:	3b01      	subs	r3, #1
     f6a:	b29b      	uxth	r3, r3
     f6c:	85ab      	strh	r3, [r5, #44]	; 0x2c
     f6e:	2b00      	cmp	r3, #0
     f70:	d10c      	bne.n	f8c <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f72:	3304      	adds	r3, #4
     f74:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     f76:	2200      	movs	r2, #0
     f78:	332e      	adds	r3, #46	; 0x2e
     f7a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     f7c:	07bb      	lsls	r3, r7, #30
     f7e:	d505      	bpl.n	f8c <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     f80:	1c28      	adds	r0, r5, #0
     f82:	692b      	ldr	r3, [r5, #16]
     f84:	4798      	blx	r3
     f86:	e001      	b.n	f8c <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f88:	2304      	movs	r3, #4
     f8a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     f8c:	06f3      	lsls	r3, r6, #27
     f8e:	d507      	bpl.n	fa0 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     f90:	2310      	movs	r3, #16
     f92:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     f94:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     f96:	06fb      	lsls	r3, r7, #27
     f98:	d502      	bpl.n	fa0 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     f9a:	1c28      	adds	r0, r5, #0
     f9c:	69eb      	ldr	r3, [r5, #28]
     f9e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     fa0:	06b3      	lsls	r3, r6, #26
     fa2:	d507      	bpl.n	fb4 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     fa4:	2320      	movs	r3, #32
     fa6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     fa8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     faa:	073b      	lsls	r3, r7, #28
     fac:	d502      	bpl.n	fb4 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     fae:	1c28      	adds	r0, r5, #0
     fb0:	69ab      	ldr	r3, [r5, #24]
     fb2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     fb4:	0733      	lsls	r3, r6, #28
     fb6:	d507      	bpl.n	fc8 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     fb8:	2308      	movs	r3, #8
     fba:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     fbc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     fbe:	06bb      	lsls	r3, r7, #26
     fc0:	d502      	bpl.n	fc8 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     fc2:	6a2b      	ldr	r3, [r5, #32]
     fc4:	1c28      	adds	r0, r5, #0
     fc6:	4798      	blx	r3
		}
	}
#endif
}
     fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	200001b0 	.word	0x200001b0

00000fd0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fd2:	465f      	mov	r7, fp
     fd4:	4656      	mov	r6, sl
     fd6:	464d      	mov	r5, r9
     fd8:	4644      	mov	r4, r8
     fda:	b4f0      	push	{r4, r5, r6, r7}
     fdc:	b089      	sub	sp, #36	; 0x24
     fde:	4680      	mov	r8, r0
     fe0:	1c0d      	adds	r5, r1, #0
     fe2:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     fe4:	1c03      	adds	r3, r0, #0
     fe6:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     fe8:	680b      	ldr	r3, [r1, #0]
     fea:	079b      	lsls	r3, r3, #30
     fec:	d400      	bmi.n	ff0 <spi_init+0x20>
     fee:	e0a9      	b.n	1144 <spi_init+0x174>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     ff0:	6a93      	ldr	r3, [r2, #40]	; 0x28
     ff2:	9303      	str	r3, [sp, #12]
     ff4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     ff6:	9304      	str	r3, [sp, #16]
     ff8:	6b13      	ldr	r3, [r2, #48]	; 0x30
     ffa:	9305      	str	r3, [sp, #20]
     ffc:	6b53      	ldr	r3, [r2, #52]	; 0x34
     ffe:	9306      	str	r3, [sp, #24]
    1000:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    1002:	231f      	movs	r3, #31
    1004:	4699      	mov	r9, r3
    1006:	b2f9      	uxtb	r1, r7
    1008:	00bb      	lsls	r3, r7, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    100a:	aa03      	add	r2, sp, #12
    100c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    100e:	2800      	cmp	r0, #0
    1010:	d102      	bne.n	1018 <spi_init+0x48>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1012:	1c28      	adds	r0, r5, #0
    1014:	4bae      	ldr	r3, [pc, #696]	; (12d0 <spi_init+0x300>)
    1016:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    1018:	1c43      	adds	r3, r0, #1
    101a:	d028      	beq.n	106e <spi_init+0x9e>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    101c:	0401      	lsls	r1, r0, #16
    101e:	0c0b      	lsrs	r3, r1, #16
    1020:	469b      	mov	fp, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1022:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1024:	b2c6      	uxtb	r6, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1026:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1028:	0602      	lsls	r2, r0, #24
    102a:	d404      	bmi.n	1036 <spi_init+0x66>
		return &(ports[port_index]->Group[group_index]);
    102c:	0973      	lsrs	r3, r6, #5
    102e:	01db      	lsls	r3, r3, #7
    1030:	4aa8      	ldr	r2, [pc, #672]	; (12d4 <spi_init+0x304>)
    1032:	4694      	mov	ip, r2
    1034:	4463      	add	r3, ip
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    1036:	464a      	mov	r2, r9
    1038:	4032      	ands	r2, r6

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    103a:	1898      	adds	r0, r3, r2
    103c:	3040      	adds	r0, #64	; 0x40
    103e:	7800      	ldrb	r0, [r0, #0]
    1040:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1042:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1044:	4651      	mov	r1, sl
    1046:	07c9      	lsls	r1, r1, #31
    1048:	d50a      	bpl.n	1060 <spi_init+0x90>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    104a:	0852      	lsrs	r2, r2, #1
    104c:	189b      	adds	r3, r3, r2
    104e:	3330      	adds	r3, #48	; 0x30
    1050:	7818      	ldrb	r0, [r3, #0]
    1052:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    1054:	07f3      	lsls	r3, r6, #31
    1056:	d501      	bpl.n	105c <spi_init+0x8c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1058:	0900      	lsrs	r0, r0, #4
    105a:	e001      	b.n	1060 <spi_init+0x90>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    105c:	230f      	movs	r3, #15
    105e:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    1060:	4583      	cmp	fp, r0
    1062:	d004      	beq.n	106e <spi_init+0x9e>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    1064:	2300      	movs	r3, #0
    1066:	4642      	mov	r2, r8
    1068:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    106a:	201c      	movs	r0, #28
    106c:	e128      	b.n	12c0 <spi_init+0x2f0>
    106e:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1070:	2f04      	cmp	r7, #4
    1072:	d1c8      	bne.n	1006 <spi_init+0x36>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1074:	2013      	movs	r0, #19
    1076:	4b98      	ldr	r3, [pc, #608]	; (12d8 <spi_init+0x308>)
    1078:	4798      	blx	r3
    107a:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    107c:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    107e:	2700      	movs	r7, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1080:	2b01      	cmp	r3, #1
    1082:	d111      	bne.n	10a8 <spi_init+0xd8>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1084:	69a0      	ldr	r0, [r4, #24]
    1086:	aa02      	add	r2, sp, #8
    1088:	4b94      	ldr	r3, [pc, #592]	; (12dc <spi_init+0x30c>)
    108a:	4798      	blx	r3
    108c:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    108e:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    1090:	2b00      	cmp	r3, #0
    1092:	d000      	beq.n	1096 <spi_init+0xc6>
    1094:	e114      	b.n	12c0 <spi_init+0x2f0>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1096:	7b2b      	ldrb	r3, [r5, #12]
    1098:	b2db      	uxtb	r3, r3
    109a:	aa02      	add	r2, sp, #8
    109c:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    109e:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    10a0:	429a      	cmp	r2, r3
    10a2:	d000      	beq.n	10a6 <spi_init+0xd6>
    10a4:	e10c      	b.n	12c0 <spi_init+0x2f0>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    10a6:	370c      	adds	r7, #12
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    10a8:	7826      	ldrb	r6, [r4, #0]
    10aa:	2e00      	cmp	r6, #0
    10ac:	d116      	bne.n	10dc <spi_init+0x10c>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    10ae:	69a3      	ldr	r3, [r4, #24]
    10b0:	469c      	mov	ip, r3

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    10b2:	8ba3      	ldrh	r3, [r4, #28]

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    10b4:	682a      	ldr	r2, [r5, #0]
		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    10b6:	7fe1      	ldrb	r1, [r4, #31]
    10b8:	0409      	lsls	r1, r1, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    10ba:	7fa0      	ldrb	r0, [r4, #30]
    10bc:	4301      	orrs	r1, r0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
			return STATUS_ERR_DENIED;
    10be:	201c      	movs	r0, #28
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    10c0:	4291      	cmp	r1, r2
    10c2:	d000      	beq.n	10c6 <spi_init+0xf6>
    10c4:	e0fc      	b.n	12c0 <spi_init+0x2f0>
			return STATUS_ERR_DENIED;
		}

		if (config->mode_specific.slave.preload_enable) {
    10c6:	2220      	movs	r2, #32
    10c8:	5ca2      	ldrb	r2, [r4, r2]
    10ca:	2a00      	cmp	r2, #0
    10cc:	d001      	beq.n	10d2 <spi_init+0x102>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    10ce:	2240      	movs	r2, #64	; 0x40
    10d0:	4313      	orrs	r3, r2
    10d2:	2208      	movs	r2, #8
    10d4:	4661      	mov	r1, ip
    10d6:	4311      	orrs	r1, r2
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    10d8:	430f      	orrs	r7, r1
    10da:	e000      	b.n	10de <spi_init+0x10e>
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
    10dc:	2300      	movs	r3, #0
    10de:	68a2      	ldr	r2, [r4, #8]
    10e0:	6861      	ldr	r1, [r4, #4]
    10e2:	430a      	orrs	r2, r1
    10e4:	68e1      	ldr	r1, [r4, #12]
    10e6:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    10e8:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
    10ea:	7c21      	ldrb	r1, [r4, #16]
    10ec:	430b      	orrs	r3, r1

	if (config->run_in_standby) {
    10ee:	7c61      	ldrb	r1, [r4, #17]
    10f0:	2900      	cmp	r1, #0
    10f2:	d001      	beq.n	10f8 <spi_init+0x128>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    10f4:	2180      	movs	r1, #128	; 0x80
    10f6:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    10f8:	7ca1      	ldrb	r1, [r4, #18]
    10fa:	2900      	cmp	r1, #0
    10fc:	d002      	beq.n	1104 <spi_init+0x134>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    10fe:	2180      	movs	r1, #128	; 0x80
    1100:	0289      	lsls	r1, r1, #10
    1102:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1104:	7ce1      	ldrb	r1, [r4, #19]
    1106:	2900      	cmp	r1, #0
    1108:	d002      	beq.n	1110 <spi_init+0x140>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    110a:	2180      	movs	r1, #128	; 0x80
    110c:	0089      	lsls	r1, r1, #2
    110e:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1110:	7d21      	ldrb	r1, [r4, #20]
    1112:	2900      	cmp	r1, #0
    1114:	d002      	beq.n	111c <spi_init+0x14c>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1116:	2180      	movs	r1, #128	; 0x80
    1118:	0189      	lsls	r1, r1, #6
    111a:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    111c:	6828      	ldr	r0, [r5, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    111e:	2102      	movs	r1, #2
    1120:	430a      	orrs	r2, r1

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1122:	4282      	cmp	r2, r0
    1124:	d109      	bne.n	113a <spi_init+0x16a>
			spi_module->CTRLB.reg == ctrlb) {
    1126:	686a      	ldr	r2, [r5, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1128:	429a      	cmp	r2, r3
    112a:	d106      	bne.n	113a <spi_init+0x16a>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    112c:	4643      	mov	r3, r8
    112e:	715e      	strb	r6, [r3, #5]
		module->character_size = config->character_size;
    1130:	7c23      	ldrb	r3, [r4, #16]
    1132:	4642      	mov	r2, r8
    1134:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    1136:	2000      	movs	r0, #0
    1138:	e0c2      	b.n	12c0 <spi_init+0x2f0>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    113a:	2300      	movs	r3, #0
    113c:	4642      	mov	r2, r8
    113e:	6013      	str	r3, [r2, #0]

	return STATUS_ERR_DENIED;
    1140:	201c      	movs	r0, #28
    1142:	e0bd      	b.n	12c0 <spi_init+0x2f0>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1144:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1146:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1148:	07db      	lsls	r3, r3, #31
    114a:	d500      	bpl.n	114e <spi_init+0x17e>
    114c:	e0b8      	b.n	12c0 <spi_init+0x2f0>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    114e:	1c08      	adds	r0, r1, #0
    1150:	4b63      	ldr	r3, [pc, #396]	; (12e0 <spi_init+0x310>)
    1152:	4798      	blx	r3
    1154:	4963      	ldr	r1, [pc, #396]	; (12e4 <spi_init+0x314>)
    1156:	6a0a      	ldr	r2, [r1, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1158:	1c86      	adds	r6, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    115a:	2301      	movs	r3, #1
    115c:	40b3      	lsls	r3, r6
    115e:	4313      	orrs	r3, r2
    1160:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1162:	a907      	add	r1, sp, #28
    1164:	2724      	movs	r7, #36	; 0x24
    1166:	5de3      	ldrb	r3, [r4, r7]
    1168:	700b      	strb	r3, [r1, #0]
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    116a:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    116c:	b2c6      	uxtb	r6, r0
    116e:	1c30      	adds	r0, r6, #0
    1170:	4b5d      	ldr	r3, [pc, #372]	; (12e8 <spi_init+0x318>)
    1172:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1174:	1c30      	adds	r0, r6, #0
    1176:	4b5d      	ldr	r3, [pc, #372]	; (12ec <spi_init+0x31c>)
    1178:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    117a:	5de0      	ldrb	r0, [r4, r7]
    117c:	2100      	movs	r1, #0
    117e:	4b5c      	ldr	r3, [pc, #368]	; (12f0 <spi_init+0x320>)
    1180:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1182:	7823      	ldrb	r3, [r4, #0]
    1184:	2b01      	cmp	r3, #1
    1186:	d103      	bne.n	1190 <spi_init+0x1c0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1188:	682a      	ldr	r2, [r5, #0]
    118a:	330b      	adds	r3, #11
    118c:	4313      	orrs	r3, r2
    118e:	602b      	str	r3, [r5, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1190:	7823      	ldrb	r3, [r4, #0]
    1192:	2b00      	cmp	r3, #0
    1194:	d103      	bne.n	119e <spi_init+0x1ce>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1196:	682a      	ldr	r2, [r5, #0]
    1198:	3308      	adds	r3, #8
    119a:	4313      	orrs	r3, r2
    119c:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    119e:	4643      	mov	r3, r8
    11a0:	681e      	ldr	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    11a2:	ab02      	add	r3, sp, #8
    11a4:	2280      	movs	r2, #128	; 0x80
    11a6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11a8:	2200      	movs	r2, #0
    11aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    11ac:	2101      	movs	r1, #1
    11ae:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    11b0:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    11b2:	7823      	ldrb	r3, [r4, #0]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d101      	bne.n	11bc <spi_init+0x1ec>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    11b8:	ab02      	add	r3, sp, #8
    11ba:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    11bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11be:	9303      	str	r3, [sp, #12]
    11c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    11c2:	9304      	str	r3, [sp, #16]
    11c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    11c6:	9305      	str	r3, [sp, #20]
    11c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    11ca:	9306      	str	r3, [sp, #24]
    11cc:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    11ce:	ad02      	add	r5, sp, #8
    11d0:	b2f9      	uxtb	r1, r7
    11d2:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    11d4:	aa03      	add	r2, sp, #12
    11d6:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    11d8:	2800      	cmp	r0, #0
    11da:	d102      	bne.n	11e2 <spi_init+0x212>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    11dc:	1c30      	adds	r0, r6, #0
    11de:	4b3c      	ldr	r3, [pc, #240]	; (12d0 <spi_init+0x300>)
    11e0:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    11e2:	1c43      	adds	r3, r0, #1
    11e4:	d005      	beq.n	11f2 <spi_init+0x222>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    11e6:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    11e8:	0c00      	lsrs	r0, r0, #16
    11ea:	b2c0      	uxtb	r0, r0
    11ec:	1c29      	adds	r1, r5, #0
    11ee:	4b41      	ldr	r3, [pc, #260]	; (12f4 <spi_init+0x324>)
    11f0:	4798      	blx	r3
    11f2:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    11f4:	2f04      	cmp	r7, #4
    11f6:	d1eb      	bne.n	11d0 <spi_init+0x200>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    11f8:	7823      	ldrb	r3, [r4, #0]
    11fa:	4642      	mov	r2, r8
    11fc:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    11fe:	7c23      	ldrb	r3, [r4, #16]
    1200:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    1202:	7ca3      	ldrb	r3, [r4, #18]
    1204:	71d3      	strb	r3, [r2, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    1206:	7d23      	ldrb	r3, [r4, #20]
    1208:	7213      	strb	r3, [r2, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    120a:	2200      	movs	r2, #0
    120c:	466b      	mov	r3, sp
    120e:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    1210:	7823      	ldrb	r3, [r4, #0]
    1212:	2b01      	cmp	r3, #1
    1214:	d115      	bne.n	1242 <spi_init+0x272>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1216:	4643      	mov	r3, r8
    1218:	6818      	ldr	r0, [r3, #0]
    121a:	4b31      	ldr	r3, [pc, #196]	; (12e0 <spi_init+0x310>)
    121c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    121e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1220:	b2c0      	uxtb	r0, r0
    1222:	4b2d      	ldr	r3, [pc, #180]	; (12d8 <spi_init+0x308>)
    1224:	4798      	blx	r3
    1226:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    1228:	69a0      	ldr	r0, [r4, #24]
    122a:	466b      	mov	r3, sp
    122c:	1d9a      	adds	r2, r3, #6
    122e:	4b2b      	ldr	r3, [pc, #172]	; (12dc <spi_init+0x30c>)
    1230:	4798      	blx	r3
    1232:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1234:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    1236:	2b00      	cmp	r3, #0
    1238:	d142      	bne.n	12c0 <spi_init+0x2f0>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    123a:	466b      	mov	r3, sp
    123c:	3306      	adds	r3, #6
    123e:	781b      	ldrb	r3, [r3, #0]
    1240:	7333      	strb	r3, [r6, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1242:	7823      	ldrb	r3, [r4, #0]
    1244:	2b00      	cmp	r3, #0
    1246:	d10f      	bne.n	1268 <spi_init+0x298>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    1248:	69a7      	ldr	r7, [r4, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    124a:	8ba3      	ldrh	r3, [r4, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    124c:	6a70      	ldr	r0, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    124e:	7fe1      	ldrb	r1, [r4, #31]
    1250:	0409      	lsls	r1, r1, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1252:	7fa5      	ldrb	r5, [r4, #30]
    1254:	4329      	orrs	r1, r5

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1256:	4301      	orrs	r1, r0
    1258:	6271      	str	r1, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    125a:	2220      	movs	r2, #32
    125c:	5ca2      	ldrb	r2, [r4, r2]
    125e:	2a00      	cmp	r2, #0
    1260:	d004      	beq.n	126c <spi_init+0x29c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1262:	2140      	movs	r1, #64	; 0x40
    1264:	430b      	orrs	r3, r1
    1266:	e001      	b.n	126c <spi_init+0x29c>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    1268:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    126a:	2700      	movs	r7, #0
    126c:	68a2      	ldr	r2, [r4, #8]
    126e:	6861      	ldr	r1, [r4, #4]
    1270:	430a      	orrs	r2, r1
    1272:	68e1      	ldr	r1, [r4, #12]
    1274:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1276:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1278:	7c21      	ldrb	r1, [r4, #16]
    127a:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    127c:	7c61      	ldrb	r1, [r4, #17]
    127e:	2900      	cmp	r1, #0
    1280:	d103      	bne.n	128a <spi_init+0x2ba>
    1282:	491d      	ldr	r1, [pc, #116]	; (12f8 <spi_init+0x328>)
    1284:	7889      	ldrb	r1, [r1, #2]
    1286:	0789      	lsls	r1, r1, #30
    1288:	d501      	bpl.n	128e <spi_init+0x2be>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    128a:	2180      	movs	r1, #128	; 0x80
    128c:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    128e:	7ca1      	ldrb	r1, [r4, #18]
    1290:	2900      	cmp	r1, #0
    1292:	d002      	beq.n	129a <spi_init+0x2ca>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1294:	2180      	movs	r1, #128	; 0x80
    1296:	0289      	lsls	r1, r1, #10
    1298:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    129a:	7ce1      	ldrb	r1, [r4, #19]
    129c:	2900      	cmp	r1, #0
    129e:	d002      	beq.n	12a6 <spi_init+0x2d6>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    12a0:	2180      	movs	r1, #128	; 0x80
    12a2:	0089      	lsls	r1, r1, #2
    12a4:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    12a6:	7d21      	ldrb	r1, [r4, #20]
    12a8:	2900      	cmp	r1, #0
    12aa:	d002      	beq.n	12b2 <spi_init+0x2e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    12ac:	2180      	movs	r1, #128	; 0x80
    12ae:	0189      	lsls	r1, r1, #6
    12b0:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    12b2:	6831      	ldr	r1, [r6, #0]
    12b4:	430a      	orrs	r2, r1
    12b6:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    12b8:	6872      	ldr	r2, [r6, #4]
    12ba:	4313      	orrs	r3, r2
    12bc:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    12be:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    12c0:	b009      	add	sp, #36	; 0x24
    12c2:	bc3c      	pop	{r2, r3, r4, r5}
    12c4:	4690      	mov	r8, r2
    12c6:	4699      	mov	r9, r3
    12c8:	46a2      	mov	sl, r4
    12ca:	46ab      	mov	fp, r5
    12cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	00000351 	.word	0x00000351
    12d4:	41004400 	.word	0x41004400
    12d8:	00001d45 	.word	0x00001d45
    12dc:	00000115 	.word	0x00000115
    12e0:	000004d9 	.word	0x000004d9
    12e4:	40000400 	.word	0x40000400
    12e8:	00001d29 	.word	0x00001d29
    12ec:	00001c9d 	.word	0x00001c9d
    12f0:	00000305 	.word	0x00000305
    12f4:	00001e21 	.word	0x00001e21
    12f8:	41002000 	.word	0x41002000

000012fc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    12fc:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    12fe:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1300:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1302:	2c01      	cmp	r4, #1
    1304:	d16e      	bne.n	13e4 <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1306:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1308:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    130a:	2c00      	cmp	r4, #0
    130c:	d16a      	bne.n	13e4 <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    130e:	2a00      	cmp	r2, #0
    1310:	d058      	beq.n	13c4 <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1312:	784b      	ldrb	r3, [r1, #1]
    1314:	2b00      	cmp	r3, #0
    1316:	d044      	beq.n	13a2 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1318:	6803      	ldr	r3, [r0, #0]
    131a:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    131c:	07db      	lsls	r3, r3, #31
    131e:	d410      	bmi.n	1342 <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    1320:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1322:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1324:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1326:	2900      	cmp	r1, #0
    1328:	d104      	bne.n	1334 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    132a:	095a      	lsrs	r2, r3, #5
    132c:	01d2      	lsls	r2, r2, #7
    132e:	492e      	ldr	r1, [pc, #184]	; (13e8 <spi_select_slave+0xec>)
    1330:	468c      	mov	ip, r1
    1332:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1334:	211f      	movs	r1, #31
    1336:	400b      	ands	r3, r1
    1338:	391e      	subs	r1, #30
    133a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    133c:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    133e:	2305      	movs	r3, #5
    1340:	e050      	b.n	13e4 <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1342:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1344:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1346:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1348:	2c00      	cmp	r4, #0
    134a:	d104      	bne.n	1356 <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    134c:	095a      	lsrs	r2, r3, #5
    134e:	01d2      	lsls	r2, r2, #7
    1350:	4c25      	ldr	r4, [pc, #148]	; (13e8 <spi_select_slave+0xec>)
    1352:	46a4      	mov	ip, r4
    1354:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1356:	241f      	movs	r4, #31
    1358:	4023      	ands	r3, r4
    135a:	3c1e      	subs	r4, #30
    135c:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    135e:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
    1360:	788a      	ldrb	r2, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1362:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1364:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1366:	07c9      	lsls	r1, r1, #31
    1368:	d500      	bpl.n	136c <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    136a:	629a      	str	r2, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
    136c:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    136e:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    1370:	2a00      	cmp	r2, #0
    1372:	d137      	bne.n	13e4 <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1374:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1376:	2104      	movs	r1, #4
    1378:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    137a:	420b      	tst	r3, r1
    137c:	d0fc      	beq.n	1378 <spi_select_slave+0x7c>
    137e:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1380:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1382:	0749      	lsls	r1, r1, #29
    1384:	d52e      	bpl.n	13e4 <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1386:	8b53      	ldrh	r3, [r2, #26]
    1388:	075b      	lsls	r3, r3, #29
    138a:	d501      	bpl.n	1390 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    138c:	2304      	movs	r3, #4
    138e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1390:	7983      	ldrb	r3, [r0, #6]
    1392:	2b01      	cmp	r3, #1
    1394:	d102      	bne.n	139c <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1396:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1398:	2300      	movs	r3, #0
    139a:	e023      	b.n	13e4 <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    139c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    139e:	2300      	movs	r3, #0
    13a0:	e020      	b.n	13e4 <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    13a2:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13a4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13a6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13a8:	2900      	cmp	r1, #0
    13aa:	d104      	bne.n	13b6 <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    13ac:	095a      	lsrs	r2, r3, #5
    13ae:	01d2      	lsls	r2, r2, #7
    13b0:	490d      	ldr	r1, [pc, #52]	; (13e8 <spi_select_slave+0xec>)
    13b2:	468c      	mov	ip, r1
    13b4:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13b6:	211f      	movs	r1, #31
    13b8:	400b      	ands	r3, r1
    13ba:	391e      	subs	r1, #30
    13bc:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    13be:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    13c0:	2300      	movs	r3, #0
    13c2:	e00f      	b.n	13e4 <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    13c4:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13c6:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13c8:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13ca:	2900      	cmp	r1, #0
    13cc:	d104      	bne.n	13d8 <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    13ce:	095a      	lsrs	r2, r3, #5
    13d0:	01d2      	lsls	r2, r2, #7
    13d2:	4905      	ldr	r1, [pc, #20]	; (13e8 <spi_select_slave+0xec>)
    13d4:	468c      	mov	ip, r1
    13d6:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13d8:	211f      	movs	r1, #31
    13da:	400b      	ands	r3, r1
    13dc:	391e      	subs	r1, #30
    13de:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    13e0:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    13e2:	2300      	movs	r3, #0
}
    13e4:	1c18      	adds	r0, r3, #0
    13e6:	bd10      	pop	{r4, pc}
    13e8:	41004400 	.word	0x41004400

000013ec <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    13ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ee:	465f      	mov	r7, fp
    13f0:	4656      	mov	r6, sl
    13f2:	464d      	mov	r5, r9
    13f4:	4644      	mov	r4, r8
    13f6:	b4f0      	push	{r4, r5, r6, r7}
    13f8:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    13fa:	2317      	movs	r3, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    13fc:	2a00      	cmp	r2, #0
    13fe:	d100      	bne.n	1402 <spi_write_buffer_wait+0x16>
    1400:	e0e7      	b.n	15d2 <spi_write_buffer_wait+0x1e6>
		return STATUS_ERR_INVALID_ARG;
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1402:	7943      	ldrb	r3, [r0, #5]
    1404:	2b00      	cmp	r3, #0
    1406:	d105      	bne.n	1414 <spi_write_buffer_wait+0x28>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1408:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    140a:	7e1c      	ldrb	r4, [r3, #24]
    140c:	07a4      	lsls	r4, r4, #30
    140e:	d501      	bpl.n	1414 <spi_write_buffer_wait+0x28>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1410:	2402      	movs	r4, #2
    1412:	761c      	strb	r4, [r3, #24]
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (length && spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
    1414:	4693      	mov	fp, r2
    1416:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1418:	2301      	movs	r3, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    141a:	2504      	movs	r5, #4
    141c:	46ac      	mov	ip, r5
    141e:	e08f      	b.n	1540 <spi_write_buffer_wait+0x154>

	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    1420:	7945      	ldrb	r5, [r0, #5]
    1422:	2d00      	cmp	r5, #0
    1424:	d117      	bne.n	1456 <spi_write_buffer_wait+0x6a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1426:	6807      	ldr	r7, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1428:	7e3d      	ldrb	r5, [r7, #24]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_write(module)) {
    142a:	421d      	tst	r5, r3
    142c:	d106      	bne.n	143c <spi_write_buffer_wait+0x50>
    142e:	4d6d      	ldr	r5, [pc, #436]	; (15e4 <spi_write_buffer_wait+0x1f8>)
    1430:	7e3e      	ldrb	r6, [r7, #24]
    1432:	421e      	tst	r6, r3
    1434:	d102      	bne.n	143c <spi_write_buffer_wait+0x50>
    1436:	3d01      	subs	r5, #1
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1438:	2d00      	cmp	r5, #0
    143a:	d1f9      	bne.n	1430 <spi_write_buffer_wait+0x44>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    143c:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    143e:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1440:	2702      	movs	r7, #2
    1442:	423d      	tst	r5, r7
    1444:	d003      	beq.n	144e <spi_write_buffer_wait+0x62>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1446:	2302      	movs	r3, #2
    1448:	7633      	strb	r3, [r6, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
    144a:	3302      	adds	r3, #2
    144c:	e0c1      	b.n	15d2 <spi_write_buffer_wait+0x1e6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    144e:	7e35      	ldrb	r5, [r6, #24]
			}

			if (!spi_is_ready_to_write(module)) {
    1450:	421d      	tst	r5, r3
    1452:	d100      	bne.n	1456 <spi_write_buffer_wait+0x6a>
    1454:	e0b4      	b.n	15c0 <spi_write_buffer_wait+0x1d4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1456:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1458:	7e35      	ldrb	r5, [r6, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    145a:	421d      	tst	r5, r3
    145c:	d0fc      	beq.n	1458 <spi_write_buffer_wait+0x6c>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    145e:	1c65      	adds	r5, r4, #1
    1460:	b2af      	uxth	r7, r5
    1462:	5d0d      	ldrb	r5, [r1, r4]
    1464:	46a9      	mov	r9, r5

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1466:	7985      	ldrb	r5, [r0, #6]
    1468:	2d01      	cmp	r5, #1
    146a:	d005      	beq.n	1478 <spi_write_buffer_wait+0x8c>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    146c:	464c      	mov	r4, r9
    146e:	466d      	mov	r5, sp
    1470:	80ac      	strh	r4, [r5, #4]
    1472:	88ad      	ldrh	r5, [r5, #4]
    1474:	1c3c      	adds	r4, r7, #0
    1476:	e005      	b.n	1484 <spi_write_buffer_wait+0x98>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    1478:	3402      	adds	r4, #2
    147a:	b2a4      	uxth	r4, r4
    147c:	5dcf      	ldrb	r7, [r1, r7]
    147e:	023f      	lsls	r7, r7, #8
    1480:	464d      	mov	r5, r9
    1482:	433d      	orrs	r5, r7
    1484:	7e37      	ldrb	r7, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1486:	421f      	tst	r7, r3
    1488:	d002      	beq.n	1490 <spi_write_buffer_wait+0xa4>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    148a:	05ed      	lsls	r5, r5, #23
    148c:	0ded      	lsrs	r5, r5, #23
    148e:	62b5      	str	r5, [r6, #40]	; 0x28
    1490:	1e55      	subs	r5, r2, #1
    1492:	b2ad      	uxth	r5, r5
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    1494:	79c6      	ldrb	r6, [r0, #7]
    1496:	2e00      	cmp	r6, #0
    1498:	d055      	beq.n	1546 <spi_write_buffer_wait+0x15a>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    149a:	7945      	ldrb	r5, [r0, #5]
    149c:	2d00      	cmp	r5, #0
    149e:	d139      	bne.n	1514 <spi_write_buffer_wait+0x128>
    14a0:	4d51      	ldr	r5, [pc, #324]	; (15e8 <spi_write_buffer_wait+0x1fc>)
    14a2:	468a      	mov	sl, r1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (length && spi_is_ready_to_write(module)) {
    14a4:	2a00      	cmp	r2, #0
    14a6:	d020      	beq.n	14ea <spi_write_buffer_wait+0xfe>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14a8:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14aa:	7e37      	ldrb	r7, [r6, #24]
    14ac:	421f      	tst	r7, r3
    14ae:	d01c      	beq.n	14ea <spi_write_buffer_wait+0xfe>
						data_to_send = tx_data[tx_pos++];
    14b0:	1c67      	adds	r7, r4, #1
    14b2:	b2b9      	uxth	r1, r7
    14b4:	4688      	mov	r8, r1
    14b6:	4651      	mov	r1, sl
    14b8:	5d09      	ldrb	r1, [r1, r4]
    14ba:	9101      	str	r1, [sp, #4]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14bc:	7981      	ldrb	r1, [r0, #6]
    14be:	2901      	cmp	r1, #1
    14c0:	d003      	beq.n	14ca <spi_write_buffer_wait+0xde>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (length && spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
    14c2:	4669      	mov	r1, sp
    14c4:	888f      	ldrh	r7, [r1, #4]
    14c6:	4644      	mov	r4, r8
    14c8:	e007      	b.n	14da <spi_write_buffer_wait+0xee>
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
							data_to_send |= (tx_data[tx_pos++] << 8);
    14ca:	3402      	adds	r4, #2
    14cc:	b2a4      	uxth	r4, r4
    14ce:	4641      	mov	r1, r8
    14d0:	4657      	mov	r7, sl
    14d2:	5c79      	ldrb	r1, [r7, r1]
    14d4:	0209      	lsls	r1, r1, #8
    14d6:	9f01      	ldr	r7, [sp, #4]
    14d8:	430f      	orrs	r7, r1
    14da:	7e31      	ldrb	r1, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    14dc:	4219      	tst	r1, r3
    14de:	d002      	beq.n	14e6 <spi_write_buffer_wait+0xfa>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14e0:	05ff      	lsls	r7, r7, #23
    14e2:	0dff      	lsrs	r7, r7, #23
    14e4:	62b7      	str	r7, [r6, #40]	; 0x28
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
						length--;
    14e6:	3a01      	subs	r2, #1
    14e8:	b292      	uxth	r2, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14ea:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14ec:	7e37      	ldrb	r7, [r6, #24]
					}
					if (spi_is_ready_to_read(module)) {
    14ee:	4661      	mov	r1, ip
    14f0:	420f      	tst	r7, r1
    14f2:	d102      	bne.n	14fa <spi_write_buffer_wait+0x10e>
    14f4:	3d01      	subs	r5, #1

		if (module->receiver_enabled) {
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    14f6:	2d00      	cmp	r5, #0
    14f8:	d1d4      	bne.n	14a4 <spi_write_buffer_wait+0xb8>
    14fa:	4651      	mov	r1, sl
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    14fc:	7e35      	ldrb	r5, [r6, #24]
						break;
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    14fe:	2702      	movs	r7, #2
    1500:	423d      	tst	r5, r7
    1502:	d003      	beq.n	150c <spi_write_buffer_wait+0x120>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1504:	2302      	movs	r3, #2
    1506:	7633      	strb	r3, [r6, #24]
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
					_spi_clear_tx_complete_flag(module);
					return STATUS_ABORTED;
    1508:	3302      	adds	r3, #2
    150a:	e062      	b.n	15d2 <spi_write_buffer_wait+0x1e6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    150c:	7e35      	ldrb	r5, [r6, #24]
				}

				if (!spi_is_ready_to_read(module)) {
    150e:	4666      	mov	r6, ip
    1510:	4235      	tst	r5, r6
    1512:	d057      	beq.n	15c4 <spi_write_buffer_wait+0x1d8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1514:	6806      	ldr	r6, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1516:	7e35      	ldrb	r5, [r6, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1518:	4667      	mov	r7, ip
    151a:	423d      	tst	r5, r7
    151c:	d0fb      	beq.n	1516 <spi_write_buffer_wait+0x12a>
    151e:	7e35      	ldrb	r5, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1520:	423d      	tst	r5, r7
    1522:	d009      	beq.n	1538 <spi_write_buffer_wait+0x14c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1524:	8b75      	ldrh	r5, [r6, #26]
    1526:	423d      	tst	r5, r7
    1528:	d000      	beq.n	152c <spi_write_buffer_wait+0x140>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    152a:	8377      	strh	r7, [r6, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    152c:	7985      	ldrb	r5, [r0, #6]
    152e:	2d01      	cmp	r5, #1
    1530:	d101      	bne.n	1536 <spi_write_buffer_wait+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1532:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    1534:	e000      	b.n	1538 <spi_write_buffer_wait+0x14c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1536:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
    1538:	465d      	mov	r5, fp
    153a:	3d01      	subs	r5, #1
    153c:	b2ad      	uxth	r5, r5
    153e:	46ab      	mov	fp, r5
    1540:	3a01      	subs	r2, #1
    1542:	b292      	uxth	r2, r2
    1544:	e000      	b.n	1548 <spi_write_buffer_wait+0x15c>
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    1546:	1c2a      	adds	r2, r5, #0

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    1548:	4d28      	ldr	r5, [pc, #160]	; (15ec <spi_write_buffer_wait+0x200>)
    154a:	42aa      	cmp	r2, r5
    154c:	d000      	beq.n	1550 <spi_write_buffer_wait+0x164>
    154e:	e767      	b.n	1420 <spi_write_buffer_wait+0x34>
    1550:	465a      	mov	r2, fp
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1552:	7943      	ldrb	r3, [r0, #5]
    1554:	2b01      	cmp	r3, #1
    1556:	d106      	bne.n	1566 <spi_write_buffer_wait+0x17a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1558:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    155a:	2202      	movs	r2, #2
    155c:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    155e:	4213      	tst	r3, r2
    1560:	d0fc      	beq.n	155c <spi_write_buffer_wait+0x170>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1562:	2300      	movs	r3, #0
    1564:	e035      	b.n	15d2 <spi_write_buffer_wait+0x1e6>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1566:	2b00      	cmp	r3, #0
    1568:	d12e      	bne.n	15c8 <spi_write_buffer_wait+0x1dc>
		if (module->receiver_enabled) {
    156a:	79c1      	ldrb	r1, [r0, #7]
    156c:	2900      	cmp	r1, #0
    156e:	d030      	beq.n	15d2 <spi_write_buffer_wait+0x1e6>
			while (flush_length) {
    1570:	2a00      	cmp	r2, #0
    1572:	d11c      	bne.n	15ae <spi_write_buffer_wait+0x1c2>
    1574:	e02d      	b.n	15d2 <spi_write_buffer_wait+0x1e6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1576:	7e22      	ldrb	r2, [r4, #24]
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
    1578:	420a      	tst	r2, r1
    157a:	d102      	bne.n	1582 <spi_write_buffer_wait+0x196>
    157c:	3b01      	subs	r3, #1
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    157e:	2b00      	cmp	r3, #0
    1580:	d1f9      	bne.n	1576 <spi_write_buffer_wait+0x18a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1582:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1584:	7e1a      	ldrb	r2, [r3, #24]
					if (spi_is_ready_to_read(module)) {
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
    1586:	420a      	tst	r2, r1
    1588:	d020      	beq.n	15cc <spi_write_buffer_wait+0x1e0>
    158a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    158c:	420a      	tst	r2, r1
    158e:	d009      	beq.n	15a4 <spi_write_buffer_wait+0x1b8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1590:	8b5a      	ldrh	r2, [r3, #26]
    1592:	420a      	tst	r2, r1
    1594:	d000      	beq.n	1598 <spi_write_buffer_wait+0x1ac>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1596:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1598:	7982      	ldrb	r2, [r0, #6]
    159a:	2a01      	cmp	r2, #1
    159c:	d101      	bne.n	15a2 <spi_write_buffer_wait+0x1b6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15a0:	e000      	b.n	15a4 <spi_write_buffer_wait+0x1b8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    15a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
					return STATUS_ERR_TIMEOUT;
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
				flush_length--;
    15a4:	3e01      	subs	r6, #1
    15a6:	b2b6      	uxth	r6, r6
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
    15a8:	2e00      	cmp	r6, #0
    15aa:	d103      	bne.n	15b4 <spi_write_buffer_wait+0x1c8>
    15ac:	e010      	b.n	15d0 <spi_write_buffer_wait+0x1e4>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    15ae:	2104      	movs	r1, #4
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
    15b0:	4d0c      	ldr	r5, [pc, #48]	; (15e4 <spi_write_buffer_wait+0x1f8>)
    15b2:	465e      	mov	r6, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    15b4:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    15b6:	7e23      	ldrb	r3, [r4, #24]
    15b8:	420b      	tst	r3, r1
    15ba:	d1e2      	bne.n	1582 <spi_write_buffer_wait+0x196>
    15bc:	1c2b      	adds	r3, r5, #0
    15be:	e7da      	b.n	1576 <spi_write_buffer_wait+0x18a>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    15c0:	2312      	movs	r3, #18
    15c2:	e006      	b.n	15d2 <spi_write_buffer_wait+0x1e6>
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    15c4:	2312      	movs	r3, #18
    15c6:	e004      	b.n	15d2 <spi_write_buffer_wait+0x1e6>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    15c8:	2300      	movs	r3, #0
    15ca:	e002      	b.n	15d2 <spi_write_buffer_wait+0x1e6>
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    15cc:	2312      	movs	r3, #18
    15ce:	e000      	b.n	15d2 <spi_write_buffer_wait+0x1e6>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    15d0:	2300      	movs	r3, #0
}
    15d2:	1c18      	adds	r0, r3, #0
    15d4:	b003      	add	sp, #12
    15d6:	bc3c      	pop	{r2, r3, r4, r5}
    15d8:	4690      	mov	r8, r2
    15da:	4699      	mov	r9, r3
    15dc:	46a2      	mov	sl, r4
    15de:	46ab      	mov	fp, r5
    15e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15e2:	46c0      	nop			; (mov r8, r8)
    15e4:	00002710 	.word	0x00002710
    15e8:	00002711 	.word	0x00002711
    15ec:	0000ffff 	.word	0x0000ffff

000015f0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    15f0:	4770      	bx	lr
    15f2:	46c0      	nop			; (mov r8, r8)

000015f4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    15f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    15f6:	4b0a      	ldr	r3, [pc, #40]	; (1620 <_sercom_set_handler+0x2c>)
    15f8:	781b      	ldrb	r3, [r3, #0]
    15fa:	2b00      	cmp	r3, #0
    15fc:	d10c      	bne.n	1618 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    15fe:	4f09      	ldr	r7, [pc, #36]	; (1624 <_sercom_set_handler+0x30>)
    1600:	4e09      	ldr	r6, [pc, #36]	; (1628 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1602:	4d0a      	ldr	r5, [pc, #40]	; (162c <_sercom_set_handler+0x38>)
    1604:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1606:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1608:	195a      	adds	r2, r3, r5
    160a:	6014      	str	r4, [r2, #0]
    160c:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    160e:	2b18      	cmp	r3, #24
    1610:	d1f9      	bne.n	1606 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1612:	2201      	movs	r2, #1
    1614:	4b02      	ldr	r3, [pc, #8]	; (1620 <_sercom_set_handler+0x2c>)
    1616:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1618:	0080      	lsls	r0, r0, #2
    161a:	4b02      	ldr	r3, [pc, #8]	; (1624 <_sercom_set_handler+0x30>)
    161c:	50c1      	str	r1, [r0, r3]
}
    161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1620:	20000128 	.word	0x20000128
    1624:	2000012c 	.word	0x2000012c
    1628:	000015f1 	.word	0x000015f1
    162c:	200001b0 	.word	0x200001b0

00001630 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1630:	b510      	push	{r4, lr}
    1632:	b082      	sub	sp, #8
    1634:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1636:	4668      	mov	r0, sp
    1638:	4905      	ldr	r1, [pc, #20]	; (1650 <_sercom_get_interrupt_vector+0x20>)
    163a:	2206      	movs	r2, #6
    163c:	4b05      	ldr	r3, [pc, #20]	; (1654 <_sercom_get_interrupt_vector+0x24>)
    163e:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1640:	1c20      	adds	r0, r4, #0
    1642:	4b05      	ldr	r3, [pc, #20]	; (1658 <_sercom_get_interrupt_vector+0x28>)
    1644:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1646:	466b      	mov	r3, sp
    1648:	5618      	ldrsb	r0, [r3, r0]
}
    164a:	b002      	add	sp, #8
    164c:	bd10      	pop	{r4, pc}
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	00003ca8 	.word	0x00003ca8
    1654:	0000322d 	.word	0x0000322d
    1658:	000004d9 	.word	0x000004d9

0000165c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    165c:	b508      	push	{r3, lr}
    165e:	4b02      	ldr	r3, [pc, #8]	; (1668 <SERCOM0_Handler+0xc>)
    1660:	681b      	ldr	r3, [r3, #0]
    1662:	2000      	movs	r0, #0
    1664:	4798      	blx	r3
    1666:	bd08      	pop	{r3, pc}
    1668:	2000012c 	.word	0x2000012c

0000166c <SERCOM1_Handler>:
    166c:	b508      	push	{r3, lr}
    166e:	4b02      	ldr	r3, [pc, #8]	; (1678 <SERCOM1_Handler+0xc>)
    1670:	685b      	ldr	r3, [r3, #4]
    1672:	2001      	movs	r0, #1
    1674:	4798      	blx	r3
    1676:	bd08      	pop	{r3, pc}
    1678:	2000012c 	.word	0x2000012c

0000167c <SERCOM2_Handler>:
    167c:	b508      	push	{r3, lr}
    167e:	4b02      	ldr	r3, [pc, #8]	; (1688 <SERCOM2_Handler+0xc>)
    1680:	689b      	ldr	r3, [r3, #8]
    1682:	2002      	movs	r0, #2
    1684:	4798      	blx	r3
    1686:	bd08      	pop	{r3, pc}
    1688:	2000012c 	.word	0x2000012c

0000168c <SERCOM3_Handler>:
    168c:	b508      	push	{r3, lr}
    168e:	4b02      	ldr	r3, [pc, #8]	; (1698 <SERCOM3_Handler+0xc>)
    1690:	68db      	ldr	r3, [r3, #12]
    1692:	2003      	movs	r0, #3
    1694:	4798      	blx	r3
    1696:	bd08      	pop	{r3, pc}
    1698:	2000012c 	.word	0x2000012c

0000169c <SERCOM4_Handler>:
    169c:	b508      	push	{r3, lr}
    169e:	4b02      	ldr	r3, [pc, #8]	; (16a8 <SERCOM4_Handler+0xc>)
    16a0:	691b      	ldr	r3, [r3, #16]
    16a2:	2004      	movs	r0, #4
    16a4:	4798      	blx	r3
    16a6:	bd08      	pop	{r3, pc}
    16a8:	2000012c 	.word	0x2000012c

000016ac <SERCOM5_Handler>:
    16ac:	b508      	push	{r3, lr}
    16ae:	4b02      	ldr	r3, [pc, #8]	; (16b8 <SERCOM5_Handler+0xc>)
    16b0:	695b      	ldr	r3, [r3, #20]
    16b2:	2005      	movs	r0, #5
    16b4:	4798      	blx	r3
    16b6:	bd08      	pop	{r3, pc}
    16b8:	2000012c 	.word	0x2000012c

000016bc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    16bc:	4b0c      	ldr	r3, [pc, #48]	; (16f0 <cpu_irq_enter_critical+0x34>)
    16be:	681b      	ldr	r3, [r3, #0]
    16c0:	2b00      	cmp	r3, #0
    16c2:	d110      	bne.n	16e6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    16c4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    16c8:	2b00      	cmp	r3, #0
    16ca:	d109      	bne.n	16e0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    16cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    16ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    16d2:	2200      	movs	r2, #0
    16d4:	4b07      	ldr	r3, [pc, #28]	; (16f4 <cpu_irq_enter_critical+0x38>)
    16d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    16d8:	3201      	adds	r2, #1
    16da:	4b07      	ldr	r3, [pc, #28]	; (16f8 <cpu_irq_enter_critical+0x3c>)
    16dc:	701a      	strb	r2, [r3, #0]
    16de:	e002      	b.n	16e6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    16e0:	2200      	movs	r2, #0
    16e2:	4b05      	ldr	r3, [pc, #20]	; (16f8 <cpu_irq_enter_critical+0x3c>)
    16e4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    16e6:	4a02      	ldr	r2, [pc, #8]	; (16f0 <cpu_irq_enter_critical+0x34>)
    16e8:	6813      	ldr	r3, [r2, #0]
    16ea:	3301      	adds	r3, #1
    16ec:	6013      	str	r3, [r2, #0]
}
    16ee:	4770      	bx	lr
    16f0:	20000144 	.word	0x20000144
    16f4:	20000004 	.word	0x20000004
    16f8:	20000148 	.word	0x20000148

000016fc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    16fc:	4b08      	ldr	r3, [pc, #32]	; (1720 <cpu_irq_leave_critical+0x24>)
    16fe:	681a      	ldr	r2, [r3, #0]
    1700:	3a01      	subs	r2, #1
    1702:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1704:	681b      	ldr	r3, [r3, #0]
    1706:	2b00      	cmp	r3, #0
    1708:	d109      	bne.n	171e <cpu_irq_leave_critical+0x22>
    170a:	4b06      	ldr	r3, [pc, #24]	; (1724 <cpu_irq_leave_critical+0x28>)
    170c:	781b      	ldrb	r3, [r3, #0]
    170e:	2b00      	cmp	r3, #0
    1710:	d005      	beq.n	171e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1712:	2201      	movs	r2, #1
    1714:	4b04      	ldr	r3, [pc, #16]	; (1728 <cpu_irq_leave_critical+0x2c>)
    1716:	701a      	strb	r2, [r3, #0]
    1718:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    171c:	b662      	cpsie	i
	}
}
    171e:	4770      	bx	lr
    1720:	20000144 	.word	0x20000144
    1724:	20000148 	.word	0x20000148
    1728:	20000004 	.word	0x20000004

0000172c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    172c:	b5f0      	push	{r4, r5, r6, r7, lr}
    172e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1730:	ac01      	add	r4, sp, #4
    1732:	2501      	movs	r5, #1
    1734:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1736:	2700      	movs	r7, #0
    1738:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    173a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    173c:	203e      	movs	r0, #62	; 0x3e
    173e:	1c21      	adds	r1, r4, #0
    1740:	4e06      	ldr	r6, [pc, #24]	; (175c <system_board_init+0x30>)
    1742:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1744:	2280      	movs	r2, #128	; 0x80
    1746:	05d2      	lsls	r2, r2, #23
    1748:	4b05      	ldr	r3, [pc, #20]	; (1760 <system_board_init+0x34>)
    174a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    174c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    174e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1750:	200f      	movs	r0, #15
    1752:	1c21      	adds	r1, r4, #0
    1754:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1756:	b003      	add	sp, #12
    1758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	00001765 	.word	0x00001765
    1760:	41004480 	.word	0x41004480

00001764 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1764:	b500      	push	{lr}
    1766:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1768:	ab01      	add	r3, sp, #4
    176a:	2280      	movs	r2, #128	; 0x80
    176c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    176e:	780a      	ldrb	r2, [r1, #0]
    1770:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1772:	784a      	ldrb	r2, [r1, #1]
    1774:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1776:	788a      	ldrb	r2, [r1, #2]
    1778:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    177a:	1c19      	adds	r1, r3, #0
    177c:	4b01      	ldr	r3, [pc, #4]	; (1784 <port_pin_set_config+0x20>)
    177e:	4798      	blx	r3
}
    1780:	b003      	add	sp, #12
    1782:	bd00      	pop	{pc}
    1784:	00001e21 	.word	0x00001e21

00001788 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1788:	b508      	push	{r3, lr}
	switch (clock_source) {
    178a:	2808      	cmp	r0, #8
    178c:	d803      	bhi.n	1796 <system_clock_source_get_hz+0xe>
    178e:	0080      	lsls	r0, r0, #2
    1790:	4b1b      	ldr	r3, [pc, #108]	; (1800 <system_clock_source_get_hz+0x78>)
    1792:	581b      	ldr	r3, [r3, r0]
    1794:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1796:	2000      	movs	r0, #0
    1798:	e031      	b.n	17fe <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    179a:	4b1a      	ldr	r3, [pc, #104]	; (1804 <system_clock_source_get_hz+0x7c>)
    179c:	6918      	ldr	r0, [r3, #16]
    179e:	e02e      	b.n	17fe <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    17a0:	4b19      	ldr	r3, [pc, #100]	; (1808 <system_clock_source_get_hz+0x80>)
    17a2:	6a18      	ldr	r0, [r3, #32]
    17a4:	0580      	lsls	r0, r0, #22
    17a6:	0f80      	lsrs	r0, r0, #30
    17a8:	4b18      	ldr	r3, [pc, #96]	; (180c <system_clock_source_get_hz+0x84>)
    17aa:	40c3      	lsrs	r3, r0
    17ac:	1c18      	adds	r0, r3, #0
    17ae:	e026      	b.n	17fe <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    17b0:	4b14      	ldr	r3, [pc, #80]	; (1804 <system_clock_source_get_hz+0x7c>)
    17b2:	6958      	ldr	r0, [r3, #20]
    17b4:	e023      	b.n	17fe <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    17b6:	4b13      	ldr	r3, [pc, #76]	; (1804 <system_clock_source_get_hz+0x7c>)
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	2002      	movs	r0, #2
    17bc:	4018      	ands	r0, r3
    17be:	d01e      	beq.n	17fe <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    17c0:	4911      	ldr	r1, [pc, #68]	; (1808 <system_clock_source_get_hz+0x80>)
    17c2:	2210      	movs	r2, #16
    17c4:	68cb      	ldr	r3, [r1, #12]
    17c6:	421a      	tst	r2, r3
    17c8:	d0fc      	beq.n	17c4 <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    17ca:	4b0e      	ldr	r3, [pc, #56]	; (1804 <system_clock_source_get_hz+0x7c>)
    17cc:	681b      	ldr	r3, [r3, #0]
    17ce:	075b      	lsls	r3, r3, #29
    17d0:	d514      	bpl.n	17fc <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    17d2:	2000      	movs	r0, #0
    17d4:	4b0e      	ldr	r3, [pc, #56]	; (1810 <system_clock_source_get_hz+0x88>)
    17d6:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    17d8:	4b0a      	ldr	r3, [pc, #40]	; (1804 <system_clock_source_get_hz+0x7c>)
    17da:	689b      	ldr	r3, [r3, #8]
    17dc:	041b      	lsls	r3, r3, #16
    17de:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    17e0:	4358      	muls	r0, r3
    17e2:	e00c      	b.n	17fe <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    17e4:	2350      	movs	r3, #80	; 0x50
    17e6:	4a08      	ldr	r2, [pc, #32]	; (1808 <system_clock_source_get_hz+0x80>)
    17e8:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    17ea:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    17ec:	075b      	lsls	r3, r3, #29
    17ee:	d506      	bpl.n	17fe <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    17f0:	4b04      	ldr	r3, [pc, #16]	; (1804 <system_clock_source_get_hz+0x7c>)
    17f2:	68d8      	ldr	r0, [r3, #12]
    17f4:	e003      	b.n	17fe <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    17f6:	2080      	movs	r0, #128	; 0x80
    17f8:	0200      	lsls	r0, r0, #8
    17fa:	e000      	b.n	17fe <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    17fc:	4805      	ldr	r0, [pc, #20]	; (1814 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    17fe:	bd08      	pop	{r3, pc}
    1800:	00003cb0 	.word	0x00003cb0
    1804:	2000014c 	.word	0x2000014c
    1808:	40000800 	.word	0x40000800
    180c:	007a1200 	.word	0x007a1200
    1810:	00001d45 	.word	0x00001d45
    1814:	02dc6c00 	.word	0x02dc6c00

00001818 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1818:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    181a:	4c0c      	ldr	r4, [pc, #48]	; (184c <system_clock_source_osc8m_set_config+0x34>)
    181c:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    181e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1820:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1822:	7842      	ldrb	r2, [r0, #1]
    1824:	2001      	movs	r0, #1
    1826:	4002      	ands	r2, r0
    1828:	0192      	lsls	r2, r2, #6
    182a:	2640      	movs	r6, #64	; 0x40
    182c:	43b3      	bics	r3, r6
    182e:	4313      	orrs	r3, r2
    1830:	1c02      	adds	r2, r0, #0
    1832:	402a      	ands	r2, r5
    1834:	01d2      	lsls	r2, r2, #7
    1836:	307f      	adds	r0, #127	; 0x7f
    1838:	4383      	bics	r3, r0
    183a:	4313      	orrs	r3, r2
    183c:	2203      	movs	r2, #3
    183e:	400a      	ands	r2, r1
    1840:	0212      	lsls	r2, r2, #8
    1842:	4903      	ldr	r1, [pc, #12]	; (1850 <system_clock_source_osc8m_set_config+0x38>)
    1844:	400b      	ands	r3, r1
    1846:	4313      	orrs	r3, r2
    1848:	6223      	str	r3, [r4, #32]
}
    184a:	bd70      	pop	{r4, r5, r6, pc}
    184c:	40000800 	.word	0x40000800
    1850:	fffffcff 	.word	0xfffffcff

00001854 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1854:	b5f0      	push	{r4, r5, r6, r7, lr}
    1856:	465f      	mov	r7, fp
    1858:	4656      	mov	r6, sl
    185a:	464d      	mov	r5, r9
    185c:	4644      	mov	r4, r8
    185e:	b4f0      	push	{r4, r5, r6, r7}
    1860:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1862:	4e2e      	ldr	r6, [pc, #184]	; (191c <system_clock_source_xosc32k_set_config+0xc8>)
    1864:	8ab3      	ldrh	r3, [r6, #20]
    1866:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    1868:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    186a:	7803      	ldrb	r3, [r0, #0]
    186c:	425a      	negs	r2, r3
    186e:	415a      	adcs	r2, r3
    1870:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1872:	7883      	ldrb	r3, [r0, #2]
    1874:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1876:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    1878:	7902      	ldrb	r2, [r0, #4]
    187a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    187c:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    187e:	7b02      	ldrb	r2, [r0, #12]
    1880:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    1882:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1884:	6882      	ldr	r2, [r0, #8]
    1886:	4826      	ldr	r0, [pc, #152]	; (1920 <system_clock_source_xosc32k_set_config+0xcc>)
    1888:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    188a:	2001      	movs	r0, #1
    188c:	464a      	mov	r2, r9
    188e:	0092      	lsls	r2, r2, #2
    1890:	4691      	mov	r9, r2
    1892:	2204      	movs	r2, #4
    1894:	4692      	mov	sl, r2
    1896:	4662      	mov	r2, ip
    1898:	4651      	mov	r1, sl
    189a:	438a      	bics	r2, r1
    189c:	4694      	mov	ip, r2
    189e:	464a      	mov	r2, r9
    18a0:	4661      	mov	r1, ip
    18a2:	430a      	orrs	r2, r1
    18a4:	4694      	mov	ip, r2
    18a6:	4642      	mov	r2, r8
    18a8:	4002      	ands	r2, r0
    18aa:	00d2      	lsls	r2, r2, #3
    18ac:	4690      	mov	r8, r2
    18ae:	2208      	movs	r2, #8
    18b0:	4691      	mov	r9, r2
    18b2:	4662      	mov	r2, ip
    18b4:	4649      	mov	r1, r9
    18b6:	438a      	bics	r2, r1
    18b8:	4694      	mov	ip, r2
    18ba:	4642      	mov	r2, r8
    18bc:	4661      	mov	r1, ip
    18be:	430a      	orrs	r2, r1
    18c0:	4694      	mov	ip, r2
    18c2:	4003      	ands	r3, r0
    18c4:	011b      	lsls	r3, r3, #4
    18c6:	2210      	movs	r2, #16
    18c8:	4690      	mov	r8, r2
    18ca:	4662      	mov	r2, ip
    18cc:	4641      	mov	r1, r8
    18ce:	438a      	bics	r2, r1
    18d0:	4313      	orrs	r3, r2
    18d2:	4659      	mov	r1, fp
    18d4:	4001      	ands	r1, r0
    18d6:	0149      	lsls	r1, r1, #5
    18d8:	2220      	movs	r2, #32
    18da:	4393      	bics	r3, r2
    18dc:	430b      	orrs	r3, r1
    18de:	9a01      	ldr	r2, [sp, #4]
    18e0:	4002      	ands	r2, r0
    18e2:	0192      	lsls	r2, r2, #6
    18e4:	2140      	movs	r1, #64	; 0x40
    18e6:	438b      	bics	r3, r1
    18e8:	4313      	orrs	r3, r2
    18ea:	4007      	ands	r7, r0
    18ec:	01ff      	lsls	r7, r7, #7
    18ee:	2280      	movs	r2, #128	; 0x80
    18f0:	4393      	bics	r3, r2
    18f2:	433b      	orrs	r3, r7
    18f4:	3a79      	subs	r2, #121	; 0x79
    18f6:	4015      	ands	r5, r2
    18f8:	022d      	lsls	r5, r5, #8
    18fa:	4f0a      	ldr	r7, [pc, #40]	; (1924 <system_clock_source_xosc32k_set_config+0xd0>)
    18fc:	403b      	ands	r3, r7
    18fe:	432b      	orrs	r3, r5
    1900:	4004      	ands	r4, r0
    1902:	0320      	lsls	r0, r4, #12
    1904:	4c08      	ldr	r4, [pc, #32]	; (1928 <system_clock_source_xosc32k_set_config+0xd4>)
    1906:	401c      	ands	r4, r3
    1908:	4304      	orrs	r4, r0
    190a:	82b4      	strh	r4, [r6, #20]
}
    190c:	b003      	add	sp, #12
    190e:	bc3c      	pop	{r2, r3, r4, r5}
    1910:	4690      	mov	r8, r2
    1912:	4699      	mov	r9, r3
    1914:	46a2      	mov	sl, r4
    1916:	46ab      	mov	fp, r5
    1918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	40000800 	.word	0x40000800
    1920:	2000014c 	.word	0x2000014c
    1924:	fffff8ff 	.word	0xfffff8ff
    1928:	ffffefff 	.word	0xffffefff

0000192c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    192c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    192e:	7a03      	ldrb	r3, [r0, #8]
    1930:	069b      	lsls	r3, r3, #26
    1932:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1934:	8943      	ldrh	r3, [r0, #10]
    1936:	059b      	lsls	r3, r3, #22
    1938:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    193a:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    193c:	4c19      	ldr	r4, [pc, #100]	; (19a4 <system_clock_source_dfll_set_config+0x78>)
    193e:	6063      	str	r3, [r4, #4]
    1940:	8881      	ldrh	r1, [r0, #4]
    1942:	8843      	ldrh	r3, [r0, #2]
    1944:	4319      	orrs	r1, r3
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1946:	79c3      	ldrb	r3, [r0, #7]
    1948:	7982      	ldrb	r2, [r0, #6]
    194a:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    194c:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    194e:	7842      	ldrb	r2, [r0, #1]
    1950:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1952:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1954:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1956:	7803      	ldrb	r3, [r0, #0]
    1958:	2b04      	cmp	r3, #4
    195a:	d10f      	bne.n	197c <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    195c:	7b03      	ldrb	r3, [r0, #12]
    195e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1960:	8a02      	ldrh	r2, [r0, #16]
    1962:	4313      	orrs	r3, r2
    1964:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1966:	89c3      	ldrh	r3, [r0, #14]
    1968:	041b      	lsls	r3, r3, #16
    196a:	4a0f      	ldr	r2, [pc, #60]	; (19a8 <system_clock_source_dfll_set_config+0x7c>)
    196c:	4013      	ands	r3, r2
    196e:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1970:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1972:	6821      	ldr	r1, [r4, #0]
    1974:	2304      	movs	r3, #4
    1976:	430b      	orrs	r3, r1
    1978:	6023      	str	r3, [r4, #0]
    197a:	e011      	b.n	19a0 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    197c:	2b20      	cmp	r3, #32
    197e:	d10f      	bne.n	19a0 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1980:	7b03      	ldrb	r3, [r0, #12]
    1982:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1984:	8a02      	ldrh	r2, [r0, #16]
    1986:	4313      	orrs	r3, r2
    1988:	1c19      	adds	r1, r3, #0
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    198a:	89c3      	ldrh	r3, [r0, #14]
    198c:	041b      	lsls	r3, r3, #16
    198e:	4a06      	ldr	r2, [pc, #24]	; (19a8 <system_clock_source_dfll_set_config+0x7c>)
    1990:	4013      	ands	r3, r2
    1992:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    1994:	4a03      	ldr	r2, [pc, #12]	; (19a4 <system_clock_source_dfll_set_config+0x78>)
    1996:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1998:	6813      	ldr	r3, [r2, #0]
    199a:	4904      	ldr	r1, [pc, #16]	; (19ac <system_clock_source_dfll_set_config+0x80>)
    199c:	430b      	orrs	r3, r1
    199e:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    19a0:	bd10      	pop	{r4, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	2000014c 	.word	0x2000014c
    19a8:	03ff0000 	.word	0x03ff0000
    19ac:	00000424 	.word	0x00000424

000019b0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    19b0:	2808      	cmp	r0, #8
    19b2:	d803      	bhi.n	19bc <system_clock_source_enable+0xc>
    19b4:	0080      	lsls	r0, r0, #2
    19b6:	4b25      	ldr	r3, [pc, #148]	; (1a4c <system_clock_source_enable+0x9c>)
    19b8:	581b      	ldr	r3, [r3, r0]
    19ba:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    19bc:	2017      	movs	r0, #23
    19be:	e044      	b.n	1a4a <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    19c0:	4a23      	ldr	r2, [pc, #140]	; (1a50 <system_clock_source_enable+0xa0>)
    19c2:	6a11      	ldr	r1, [r2, #32]
    19c4:	2302      	movs	r3, #2
    19c6:	430b      	orrs	r3, r1
    19c8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    19ca:	2000      	movs	r0, #0
    19cc:	e03d      	b.n	1a4a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    19ce:	4a20      	ldr	r2, [pc, #128]	; (1a50 <system_clock_source_enable+0xa0>)
    19d0:	6991      	ldr	r1, [r2, #24]
    19d2:	2302      	movs	r3, #2
    19d4:	430b      	orrs	r3, r1
    19d6:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    19d8:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    19da:	e036      	b.n	1a4a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    19dc:	4a1c      	ldr	r2, [pc, #112]	; (1a50 <system_clock_source_enable+0xa0>)
    19de:	8a11      	ldrh	r1, [r2, #16]
    19e0:	2302      	movs	r3, #2
    19e2:	430b      	orrs	r3, r1
    19e4:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    19e6:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    19e8:	e02f      	b.n	1a4a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    19ea:	4a19      	ldr	r2, [pc, #100]	; (1a50 <system_clock_source_enable+0xa0>)
    19ec:	8a91      	ldrh	r1, [r2, #20]
    19ee:	2302      	movs	r3, #2
    19f0:	430b      	orrs	r3, r1
    19f2:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    19f4:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    19f6:	e028      	b.n	1a4a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    19f8:	4916      	ldr	r1, [pc, #88]	; (1a54 <system_clock_source_enable+0xa4>)
    19fa:	680b      	ldr	r3, [r1, #0]
    19fc:	2202      	movs	r2, #2
    19fe:	4313      	orrs	r3, r2
    1a00:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1a02:	4b13      	ldr	r3, [pc, #76]	; (1a50 <system_clock_source_enable+0xa0>)
    1a04:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a06:	1c19      	adds	r1, r3, #0
    1a08:	320e      	adds	r2, #14
    1a0a:	68cb      	ldr	r3, [r1, #12]
    1a0c:	421a      	tst	r2, r3
    1a0e:	d0fc      	beq.n	1a0a <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1a10:	4a10      	ldr	r2, [pc, #64]	; (1a54 <system_clock_source_enable+0xa4>)
    1a12:	6891      	ldr	r1, [r2, #8]
    1a14:	4b0e      	ldr	r3, [pc, #56]	; (1a50 <system_clock_source_enable+0xa0>)
    1a16:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1a18:	6852      	ldr	r2, [r2, #4]
    1a1a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1a1c:	2200      	movs	r2, #0
    1a1e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a20:	1c19      	adds	r1, r3, #0
    1a22:	3210      	adds	r2, #16
    1a24:	68cb      	ldr	r3, [r1, #12]
    1a26:	421a      	tst	r2, r3
    1a28:	d0fc      	beq.n	1a24 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1a2a:	4b0a      	ldr	r3, [pc, #40]	; (1a54 <system_clock_source_enable+0xa4>)
    1a2c:	681b      	ldr	r3, [r3, #0]
    1a2e:	b29b      	uxth	r3, r3
    1a30:	4a07      	ldr	r2, [pc, #28]	; (1a50 <system_clock_source_enable+0xa0>)
    1a32:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a34:	2000      	movs	r0, #0
    1a36:	e008      	b.n	1a4a <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1a38:	4905      	ldr	r1, [pc, #20]	; (1a50 <system_clock_source_enable+0xa0>)
    1a3a:	2244      	movs	r2, #68	; 0x44
    1a3c:	5c88      	ldrb	r0, [r1, r2]
    1a3e:	2302      	movs	r3, #2
    1a40:	4303      	orrs	r3, r0
    1a42:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a44:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1a46:	e000      	b.n	1a4a <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1a48:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1a4a:	4770      	bx	lr
    1a4c:	00003cd4 	.word	0x00003cd4
    1a50:	40000800 	.word	0x40000800
    1a54:	2000014c 	.word	0x2000014c

00001a58 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1a58:	b530      	push	{r4, r5, lr}
    1a5a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1a5c:	22c2      	movs	r2, #194	; 0xc2
    1a5e:	00d2      	lsls	r2, r2, #3
    1a60:	4b1a      	ldr	r3, [pc, #104]	; (1acc <system_clock_init+0x74>)
    1a62:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1a64:	4a1a      	ldr	r2, [pc, #104]	; (1ad0 <system_clock_init+0x78>)
    1a66:	6853      	ldr	r3, [r2, #4]
    1a68:	211e      	movs	r1, #30
    1a6a:	438b      	bics	r3, r1
    1a6c:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1a6e:	2301      	movs	r3, #1
    1a70:	466a      	mov	r2, sp
    1a72:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a74:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1a76:	4d17      	ldr	r5, [pc, #92]	; (1ad4 <system_clock_init+0x7c>)
    1a78:	b2e0      	uxtb	r0, r4
    1a7a:	4669      	mov	r1, sp
    1a7c:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a7e:	3401      	adds	r4, #1
    1a80:	2c25      	cmp	r4, #37	; 0x25
    1a82:	d1f9      	bne.n	1a78 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1a84:	a803      	add	r0, sp, #12
    1a86:	2400      	movs	r4, #0
    1a88:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1a8a:	2501      	movs	r5, #1
    1a8c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1a8e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1a90:	4b11      	ldr	r3, [pc, #68]	; (1ad8 <system_clock_init+0x80>)
    1a92:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1a94:	2006      	movs	r0, #6
    1a96:	4b11      	ldr	r3, [pc, #68]	; (1adc <system_clock_init+0x84>)
    1a98:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1a9a:	4b11      	ldr	r3, [pc, #68]	; (1ae0 <system_clock_init+0x88>)
    1a9c:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1a9e:	4b11      	ldr	r3, [pc, #68]	; (1ae4 <system_clock_init+0x8c>)
    1aa0:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1aa2:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1aa4:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1aa6:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1aa8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1aaa:	466b      	mov	r3, sp
    1aac:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1aae:	2306      	movs	r3, #6
    1ab0:	466a      	mov	r2, sp
    1ab2:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1ab4:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1ab6:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1ab8:	2000      	movs	r0, #0
    1aba:	4669      	mov	r1, sp
    1abc:	4b0a      	ldr	r3, [pc, #40]	; (1ae8 <system_clock_init+0x90>)
    1abe:	4798      	blx	r3
    1ac0:	2000      	movs	r0, #0
    1ac2:	4b0a      	ldr	r3, [pc, #40]	; (1aec <system_clock_init+0x94>)
    1ac4:	4798      	blx	r3
#endif
}
    1ac6:	b005      	add	sp, #20
    1ac8:	bd30      	pop	{r4, r5, pc}
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	40000800 	.word	0x40000800
    1ad0:	41004000 	.word	0x41004000
    1ad4:	00001d29 	.word	0x00001d29
    1ad8:	00001819 	.word	0x00001819
    1adc:	000019b1 	.word	0x000019b1
    1ae0:	00001af1 	.word	0x00001af1
    1ae4:	40000400 	.word	0x40000400
    1ae8:	00001b15 	.word	0x00001b15
    1aec:	00001bcd 	.word	0x00001bcd

00001af0 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1af0:	4a06      	ldr	r2, [pc, #24]	; (1b0c <system_gclk_init+0x1c>)
    1af2:	6991      	ldr	r1, [r2, #24]
    1af4:	2308      	movs	r3, #8
    1af6:	430b      	orrs	r3, r1
    1af8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1afa:	2201      	movs	r2, #1
    1afc:	4b04      	ldr	r3, [pc, #16]	; (1b10 <system_gclk_init+0x20>)
    1afe:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1b00:	1c19      	adds	r1, r3, #0
    1b02:	780b      	ldrb	r3, [r1, #0]
    1b04:	4213      	tst	r3, r2
    1b06:	d1fc      	bne.n	1b02 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1b08:	4770      	bx	lr
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	40000400 	.word	0x40000400
    1b10:	40000c00 	.word	0x40000c00

00001b14 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1b14:	b570      	push	{r4, r5, r6, lr}
    1b16:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1b18:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1b1a:	780d      	ldrb	r5, [r1, #0]
    1b1c:	022d      	lsls	r5, r5, #8
    1b1e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1b20:	784b      	ldrb	r3, [r1, #1]
    1b22:	2b00      	cmp	r3, #0
    1b24:	d002      	beq.n	1b2c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1b26:	2380      	movs	r3, #128	; 0x80
    1b28:	02db      	lsls	r3, r3, #11
    1b2a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1b2c:	7a4b      	ldrb	r3, [r1, #9]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d002      	beq.n	1b38 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1b32:	2380      	movs	r3, #128	; 0x80
    1b34:	031b      	lsls	r3, r3, #12
    1b36:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1b38:	6848      	ldr	r0, [r1, #4]
    1b3a:	2801      	cmp	r0, #1
    1b3c:	d918      	bls.n	1b70 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1b3e:	1e43      	subs	r3, r0, #1
    1b40:	4218      	tst	r0, r3
    1b42:	d110      	bne.n	1b66 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1b44:	2802      	cmp	r0, #2
    1b46:	d906      	bls.n	1b56 <system_gclk_gen_set_config+0x42>
    1b48:	2302      	movs	r3, #2
    1b4a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1b4c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1b4e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1b50:	4298      	cmp	r0, r3
    1b52:	d8fb      	bhi.n	1b4c <system_gclk_gen_set_config+0x38>
    1b54:	e000      	b.n	1b58 <system_gclk_gen_set_config+0x44>
    1b56:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1b58:	0212      	lsls	r2, r2, #8
    1b5a:	4332      	orrs	r2, r6
    1b5c:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1b5e:	2380      	movs	r3, #128	; 0x80
    1b60:	035b      	lsls	r3, r3, #13
    1b62:	431d      	orrs	r5, r3
    1b64:	e004      	b.n	1b70 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1b66:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1b68:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1b6a:	2380      	movs	r3, #128	; 0x80
    1b6c:	029b      	lsls	r3, r3, #10
    1b6e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1b70:	7a0b      	ldrb	r3, [r1, #8]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d002      	beq.n	1b7c <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1b76:	2380      	movs	r3, #128	; 0x80
    1b78:	039b      	lsls	r3, r3, #14
    1b7a:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b7c:	4a0f      	ldr	r2, [pc, #60]	; (1bbc <system_gclk_gen_set_config+0xa8>)
    1b7e:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1b80:	b25b      	sxtb	r3, r3
    1b82:	2b00      	cmp	r3, #0
    1b84:	dbfb      	blt.n	1b7e <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b86:	4b0e      	ldr	r3, [pc, #56]	; (1bc0 <system_gclk_gen_set_config+0xac>)
    1b88:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b8a:	4b0e      	ldr	r3, [pc, #56]	; (1bc4 <system_gclk_gen_set_config+0xb0>)
    1b8c:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b8e:	4a0b      	ldr	r2, [pc, #44]	; (1bbc <system_gclk_gen_set_config+0xa8>)
    1b90:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1b92:	b25b      	sxtb	r3, r3
    1b94:	2b00      	cmp	r3, #0
    1b96:	dbfb      	blt.n	1b90 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1b98:	4b08      	ldr	r3, [pc, #32]	; (1bbc <system_gclk_gen_set_config+0xa8>)
    1b9a:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b9c:	1c1a      	adds	r2, r3, #0
    1b9e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1ba0:	b25b      	sxtb	r3, r3
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	dbfb      	blt.n	1b9e <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1ba6:	4a05      	ldr	r2, [pc, #20]	; (1bbc <system_gclk_gen_set_config+0xa8>)
    1ba8:	6851      	ldr	r1, [r2, #4]
    1baa:	2380      	movs	r3, #128	; 0x80
    1bac:	025b      	lsls	r3, r3, #9
    1bae:	400b      	ands	r3, r1
    1bb0:	431d      	orrs	r5, r3
    1bb2:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1bb4:	4b04      	ldr	r3, [pc, #16]	; (1bc8 <system_gclk_gen_set_config+0xb4>)
    1bb6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bb8:	bd70      	pop	{r4, r5, r6, pc}
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	40000c00 	.word	0x40000c00
    1bc0:	000016bd 	.word	0x000016bd
    1bc4:	40000c08 	.word	0x40000c08
    1bc8:	000016fd 	.word	0x000016fd

00001bcc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1bcc:	b510      	push	{r4, lr}
    1bce:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bd0:	4a0b      	ldr	r2, [pc, #44]	; (1c00 <system_gclk_gen_enable+0x34>)
    1bd2:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1bd4:	b25b      	sxtb	r3, r3
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	dbfb      	blt.n	1bd2 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1bda:	4b0a      	ldr	r3, [pc, #40]	; (1c04 <system_gclk_gen_enable+0x38>)
    1bdc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1bde:	4b0a      	ldr	r3, [pc, #40]	; (1c08 <system_gclk_gen_enable+0x3c>)
    1be0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1be2:	4a07      	ldr	r2, [pc, #28]	; (1c00 <system_gclk_gen_enable+0x34>)
    1be4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1be6:	b25b      	sxtb	r3, r3
    1be8:	2b00      	cmp	r3, #0
    1bea:	dbfb      	blt.n	1be4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1bec:	4a04      	ldr	r2, [pc, #16]	; (1c00 <system_gclk_gen_enable+0x34>)
    1bee:	6853      	ldr	r3, [r2, #4]
    1bf0:	2180      	movs	r1, #128	; 0x80
    1bf2:	0249      	lsls	r1, r1, #9
    1bf4:	430b      	orrs	r3, r1
    1bf6:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1bf8:	4b04      	ldr	r3, [pc, #16]	; (1c0c <system_gclk_gen_enable+0x40>)
    1bfa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bfc:	bd10      	pop	{r4, pc}
    1bfe:	46c0      	nop			; (mov r8, r8)
    1c00:	40000c00 	.word	0x40000c00
    1c04:	000016bd 	.word	0x000016bd
    1c08:	40000c04 	.word	0x40000c04
    1c0c:	000016fd 	.word	0x000016fd

00001c10 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1c10:	b570      	push	{r4, r5, r6, lr}
    1c12:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c14:	4a1a      	ldr	r2, [pc, #104]	; (1c80 <system_gclk_gen_get_hz+0x70>)
    1c16:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1c18:	b25b      	sxtb	r3, r3
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	dbfb      	blt.n	1c16 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1c1e:	4b19      	ldr	r3, [pc, #100]	; (1c84 <system_gclk_gen_get_hz+0x74>)
    1c20:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c22:	4b19      	ldr	r3, [pc, #100]	; (1c88 <system_gclk_gen_get_hz+0x78>)
    1c24:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c26:	4a16      	ldr	r2, [pc, #88]	; (1c80 <system_gclk_gen_get_hz+0x70>)
    1c28:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1c2a:	b25b      	sxtb	r3, r3
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	dbfb      	blt.n	1c28 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1c30:	4e13      	ldr	r6, [pc, #76]	; (1c80 <system_gclk_gen_get_hz+0x70>)
    1c32:	6870      	ldr	r0, [r6, #4]
    1c34:	04c0      	lsls	r0, r0, #19
    1c36:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1c38:	4b14      	ldr	r3, [pc, #80]	; (1c8c <system_gclk_gen_get_hz+0x7c>)
    1c3a:	4798      	blx	r3
    1c3c:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c3e:	4b12      	ldr	r3, [pc, #72]	; (1c88 <system_gclk_gen_get_hz+0x78>)
    1c40:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1c42:	6876      	ldr	r6, [r6, #4]
    1c44:	02f6      	lsls	r6, r6, #11
    1c46:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c48:	4b11      	ldr	r3, [pc, #68]	; (1c90 <system_gclk_gen_get_hz+0x80>)
    1c4a:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c4c:	4a0c      	ldr	r2, [pc, #48]	; (1c80 <system_gclk_gen_get_hz+0x70>)
    1c4e:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1c50:	b25b      	sxtb	r3, r3
    1c52:	2b00      	cmp	r3, #0
    1c54:	dbfb      	blt.n	1c4e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1c56:	4b0a      	ldr	r3, [pc, #40]	; (1c80 <system_gclk_gen_get_hz+0x70>)
    1c58:	689c      	ldr	r4, [r3, #8]
    1c5a:	0a24      	lsrs	r4, r4, #8
    1c5c:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1c5e:	4b0d      	ldr	r3, [pc, #52]	; (1c94 <system_gclk_gen_get_hz+0x84>)
    1c60:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1c62:	2e00      	cmp	r6, #0
    1c64:	d107      	bne.n	1c76 <system_gclk_gen_get_hz+0x66>
    1c66:	2c01      	cmp	r4, #1
    1c68:	d907      	bls.n	1c7a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1c6a:	1c28      	adds	r0, r5, #0
    1c6c:	1c21      	adds	r1, r4, #0
    1c6e:	4b0a      	ldr	r3, [pc, #40]	; (1c98 <system_gclk_gen_get_hz+0x88>)
    1c70:	4798      	blx	r3
    1c72:	1c05      	adds	r5, r0, #0
    1c74:	e001      	b.n	1c7a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1c76:	3401      	adds	r4, #1
    1c78:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1c7a:	1c28      	adds	r0, r5, #0
    1c7c:	bd70      	pop	{r4, r5, r6, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	40000c00 	.word	0x40000c00
    1c84:	000016bd 	.word	0x000016bd
    1c88:	40000c04 	.word	0x40000c04
    1c8c:	00001789 	.word	0x00001789
    1c90:	40000c08 	.word	0x40000c08
    1c94:	000016fd 	.word	0x000016fd
    1c98:	00002575 	.word	0x00002575

00001c9c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1c9c:	b510      	push	{r4, lr}
    1c9e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1ca0:	4b06      	ldr	r3, [pc, #24]	; (1cbc <system_gclk_chan_enable+0x20>)
    1ca2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ca4:	4b06      	ldr	r3, [pc, #24]	; (1cc0 <system_gclk_chan_enable+0x24>)
    1ca6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1ca8:	4a06      	ldr	r2, [pc, #24]	; (1cc4 <system_gclk_chan_enable+0x28>)
    1caa:	8851      	ldrh	r1, [r2, #2]
    1cac:	2380      	movs	r3, #128	; 0x80
    1cae:	01db      	lsls	r3, r3, #7
    1cb0:	430b      	orrs	r3, r1
    1cb2:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1cb4:	4b04      	ldr	r3, [pc, #16]	; (1cc8 <system_gclk_chan_enable+0x2c>)
    1cb6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cb8:	bd10      	pop	{r4, pc}
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	000016bd 	.word	0x000016bd
    1cc0:	40000c02 	.word	0x40000c02
    1cc4:	40000c00 	.word	0x40000c00
    1cc8:	000016fd 	.word	0x000016fd

00001ccc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1ccc:	b510      	push	{r4, lr}
    1cce:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1cd0:	4b0f      	ldr	r3, [pc, #60]	; (1d10 <system_gclk_chan_disable+0x44>)
    1cd2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1cd4:	4b0f      	ldr	r3, [pc, #60]	; (1d14 <system_gclk_chan_disable+0x48>)
    1cd6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1cd8:	4b0f      	ldr	r3, [pc, #60]	; (1d18 <system_gclk_chan_disable+0x4c>)
    1cda:	885a      	ldrh	r2, [r3, #2]
    1cdc:	0512      	lsls	r2, r2, #20
    1cde:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1ce0:	8859      	ldrh	r1, [r3, #2]
    1ce2:	4a0e      	ldr	r2, [pc, #56]	; (1d1c <system_gclk_chan_disable+0x50>)
    1ce4:	400a      	ands	r2, r1
    1ce6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1ce8:	8859      	ldrh	r1, [r3, #2]
    1cea:	4a0d      	ldr	r2, [pc, #52]	; (1d20 <system_gclk_chan_disable+0x54>)
    1cec:	400a      	ands	r2, r1
    1cee:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1cf0:	1c19      	adds	r1, r3, #0
    1cf2:	2280      	movs	r2, #128	; 0x80
    1cf4:	01d2      	lsls	r2, r2, #7
    1cf6:	884b      	ldrh	r3, [r1, #2]
    1cf8:	4213      	tst	r3, r2
    1cfa:	d1fc      	bne.n	1cf6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1cfc:	4906      	ldr	r1, [pc, #24]	; (1d18 <system_gclk_chan_disable+0x4c>)
    1cfe:	0202      	lsls	r2, r0, #8
    1d00:	8848      	ldrh	r0, [r1, #2]
    1d02:	4b06      	ldr	r3, [pc, #24]	; (1d1c <system_gclk_chan_disable+0x50>)
    1d04:	4003      	ands	r3, r0
    1d06:	4313      	orrs	r3, r2
    1d08:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1d0a:	4b06      	ldr	r3, [pc, #24]	; (1d24 <system_gclk_chan_disable+0x58>)
    1d0c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d0e:	bd10      	pop	{r4, pc}
    1d10:	000016bd 	.word	0x000016bd
    1d14:	40000c02 	.word	0x40000c02
    1d18:	40000c00 	.word	0x40000c00
    1d1c:	fffff0ff 	.word	0xfffff0ff
    1d20:	ffffbfff 	.word	0xffffbfff
    1d24:	000016fd 	.word	0x000016fd

00001d28 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1d28:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1d2a:	780c      	ldrb	r4, [r1, #0]
    1d2c:	0224      	lsls	r4, r4, #8
    1d2e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1d30:	4b02      	ldr	r3, [pc, #8]	; (1d3c <system_gclk_chan_set_config+0x14>)
    1d32:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1d34:	b2a4      	uxth	r4, r4
    1d36:	4b02      	ldr	r3, [pc, #8]	; (1d40 <system_gclk_chan_set_config+0x18>)
    1d38:	805c      	strh	r4, [r3, #2]
}
    1d3a:	bd10      	pop	{r4, pc}
    1d3c:	00001ccd 	.word	0x00001ccd
    1d40:	40000c00 	.word	0x40000c00

00001d44 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1d44:	b510      	push	{r4, lr}
    1d46:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1d48:	4b06      	ldr	r3, [pc, #24]	; (1d64 <system_gclk_chan_get_hz+0x20>)
    1d4a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d4c:	4b06      	ldr	r3, [pc, #24]	; (1d68 <system_gclk_chan_get_hz+0x24>)
    1d4e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1d50:	4b06      	ldr	r3, [pc, #24]	; (1d6c <system_gclk_chan_get_hz+0x28>)
    1d52:	885c      	ldrh	r4, [r3, #2]
    1d54:	0524      	lsls	r4, r4, #20
    1d56:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1d58:	4b05      	ldr	r3, [pc, #20]	; (1d70 <system_gclk_chan_get_hz+0x2c>)
    1d5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1d5c:	1c20      	adds	r0, r4, #0
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <system_gclk_chan_get_hz+0x30>)
    1d60:	4798      	blx	r3
}
    1d62:	bd10      	pop	{r4, pc}
    1d64:	000016bd 	.word	0x000016bd
    1d68:	40000c02 	.word	0x40000c02
    1d6c:	40000c00 	.word	0x40000c00
    1d70:	000016fd 	.word	0x000016fd
    1d74:	00001c11 	.word	0x00001c11

00001d78 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1d78:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1d7a:	78d3      	ldrb	r3, [r2, #3]
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d11e      	bne.n	1dbe <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1d80:	7814      	ldrb	r4, [r2, #0]
    1d82:	2c80      	cmp	r4, #128	; 0x80
    1d84:	d004      	beq.n	1d90 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1d86:	0624      	lsls	r4, r4, #24
    1d88:	2380      	movs	r3, #128	; 0x80
    1d8a:	025b      	lsls	r3, r3, #9
    1d8c:	431c      	orrs	r4, r3
    1d8e:	e000      	b.n	1d92 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1d90:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d92:	7853      	ldrb	r3, [r2, #1]
    1d94:	2502      	movs	r5, #2
    1d96:	43ab      	bics	r3, r5
    1d98:	d10a      	bne.n	1db0 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1d9a:	7893      	ldrb	r3, [r2, #2]
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d103      	bne.n	1da8 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1da0:	2380      	movs	r3, #128	; 0x80
    1da2:	029b      	lsls	r3, r3, #10
    1da4:	431c      	orrs	r4, r3
    1da6:	e002      	b.n	1dae <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1da8:	23c0      	movs	r3, #192	; 0xc0
    1daa:	02db      	lsls	r3, r3, #11
    1dac:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1dae:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1db0:	7853      	ldrb	r3, [r2, #1]
    1db2:	3b01      	subs	r3, #1
    1db4:	2b01      	cmp	r3, #1
    1db6:	d812      	bhi.n	1dde <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1db8:	4b18      	ldr	r3, [pc, #96]	; (1e1c <_system_pinmux_config+0xa4>)
    1dba:	401c      	ands	r4, r3
    1dbc:	e00f      	b.n	1dde <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1dbe:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1dc0:	040b      	lsls	r3, r1, #16
    1dc2:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1dc4:	24a0      	movs	r4, #160	; 0xa0
    1dc6:	05e4      	lsls	r4, r4, #23
    1dc8:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dca:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1dcc:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1dce:	24d0      	movs	r4, #208	; 0xd0
    1dd0:	0624      	lsls	r4, r4, #24
    1dd2:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dd4:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1dd6:	78d3      	ldrb	r3, [r2, #3]
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d018      	beq.n	1e0e <_system_pinmux_config+0x96>
    1ddc:	e01c      	b.n	1e18 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1dde:	040b      	lsls	r3, r1, #16
    1de0:	0c1b      	lsrs	r3, r3, #16
    1de2:	25a0      	movs	r5, #160	; 0xa0
    1de4:	05ed      	lsls	r5, r5, #23
    1de6:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1de8:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dea:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1dec:	0c0b      	lsrs	r3, r1, #16
    1dee:	25d0      	movs	r5, #208	; 0xd0
    1df0:	062d      	lsls	r5, r5, #24
    1df2:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1df4:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1df6:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1df8:	78d3      	ldrb	r3, [r2, #3]
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d10c      	bne.n	1e18 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1dfe:	0363      	lsls	r3, r4, #13
    1e00:	d505      	bpl.n	1e0e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1e02:	7893      	ldrb	r3, [r2, #2]
    1e04:	2b01      	cmp	r3, #1
    1e06:	d101      	bne.n	1e0c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1e08:	6181      	str	r1, [r0, #24]
    1e0a:	e000      	b.n	1e0e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1e0c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e0e:	7853      	ldrb	r3, [r2, #1]
    1e10:	3b01      	subs	r3, #1
    1e12:	2b01      	cmp	r3, #1
    1e14:	d800      	bhi.n	1e18 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1e16:	6081      	str	r1, [r0, #8]
		}
	}
}
    1e18:	bd30      	pop	{r4, r5, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	fffbffff 	.word	0xfffbffff

00001e20 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1e20:	b508      	push	{r3, lr}
    1e22:	1c03      	adds	r3, r0, #0
    1e24:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1e26:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1e28:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1e2a:	2900      	cmp	r1, #0
    1e2c:	d104      	bne.n	1e38 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1e2e:	0958      	lsrs	r0, r3, #5
    1e30:	01c0      	lsls	r0, r0, #7
    1e32:	4905      	ldr	r1, [pc, #20]	; (1e48 <system_pinmux_pin_set_config+0x28>)
    1e34:	468c      	mov	ip, r1
    1e36:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1e38:	211f      	movs	r1, #31
    1e3a:	400b      	ands	r3, r1
    1e3c:	391e      	subs	r1, #30
    1e3e:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1e40:	4b02      	ldr	r3, [pc, #8]	; (1e4c <system_pinmux_pin_set_config+0x2c>)
    1e42:	4798      	blx	r3
}
    1e44:	bd08      	pop	{r3, pc}
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	41004400 	.word	0x41004400
    1e4c:	00001d79 	.word	0x00001d79

00001e50 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1e50:	4770      	bx	lr
    1e52:	46c0      	nop			; (mov r8, r8)

00001e54 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1e54:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1e56:	4b05      	ldr	r3, [pc, #20]	; (1e6c <system_init+0x18>)
    1e58:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1e5a:	4b05      	ldr	r3, [pc, #20]	; (1e70 <system_init+0x1c>)
    1e5c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1e5e:	4b05      	ldr	r3, [pc, #20]	; (1e74 <system_init+0x20>)
    1e60:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1e62:	4b05      	ldr	r3, [pc, #20]	; (1e78 <system_init+0x24>)
    1e64:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1e66:	4b05      	ldr	r3, [pc, #20]	; (1e7c <system_init+0x28>)
    1e68:	4798      	blx	r3
}
    1e6a:	bd08      	pop	{r3, pc}
    1e6c:	00001a59 	.word	0x00001a59
    1e70:	0000172d 	.word	0x0000172d
    1e74:	00001e51 	.word	0x00001e51
    1e78:	00001e51 	.word	0x00001e51
    1e7c:	00001e51 	.word	0x00001e51

00001e80 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1e80:	e7fe      	b.n	1e80 <Dummy_Handler>
    1e82:	46c0      	nop			; (mov r8, r8)

00001e84 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1e84:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1e86:	4b2e      	ldr	r3, [pc, #184]	; (1f40 <Reset_Handler+0xbc>)
    1e88:	4a2e      	ldr	r2, [pc, #184]	; (1f44 <Reset_Handler+0xc0>)
    1e8a:	429a      	cmp	r2, r3
    1e8c:	d003      	beq.n	1e96 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1e8e:	4b2e      	ldr	r3, [pc, #184]	; (1f48 <Reset_Handler+0xc4>)
    1e90:	4a2b      	ldr	r2, [pc, #172]	; (1f40 <Reset_Handler+0xbc>)
    1e92:	429a      	cmp	r2, r3
    1e94:	d304      	bcc.n	1ea0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1e96:	4b2d      	ldr	r3, [pc, #180]	; (1f4c <Reset_Handler+0xc8>)
    1e98:	4a2d      	ldr	r2, [pc, #180]	; (1f50 <Reset_Handler+0xcc>)
    1e9a:	429a      	cmp	r2, r3
    1e9c:	d310      	bcc.n	1ec0 <Reset_Handler+0x3c>
    1e9e:	e01e      	b.n	1ede <Reset_Handler+0x5a>
    1ea0:	4a2c      	ldr	r2, [pc, #176]	; (1f54 <Reset_Handler+0xd0>)
    1ea2:	4b29      	ldr	r3, [pc, #164]	; (1f48 <Reset_Handler+0xc4>)
    1ea4:	3303      	adds	r3, #3
    1ea6:	1a9b      	subs	r3, r3, r2
    1ea8:	089b      	lsrs	r3, r3, #2
    1eaa:	3301      	adds	r3, #1
    1eac:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1eae:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1eb0:	4823      	ldr	r0, [pc, #140]	; (1f40 <Reset_Handler+0xbc>)
    1eb2:	4924      	ldr	r1, [pc, #144]	; (1f44 <Reset_Handler+0xc0>)
    1eb4:	588c      	ldr	r4, [r1, r2]
    1eb6:	5084      	str	r4, [r0, r2]
    1eb8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1eba:	429a      	cmp	r2, r3
    1ebc:	d1fa      	bne.n	1eb4 <Reset_Handler+0x30>
    1ebe:	e7ea      	b.n	1e96 <Reset_Handler+0x12>
    1ec0:	4a25      	ldr	r2, [pc, #148]	; (1f58 <Reset_Handler+0xd4>)
    1ec2:	4b22      	ldr	r3, [pc, #136]	; (1f4c <Reset_Handler+0xc8>)
    1ec4:	3303      	adds	r3, #3
    1ec6:	1a9b      	subs	r3, r3, r2
    1ec8:	089b      	lsrs	r3, r3, #2
    1eca:	3301      	adds	r3, #1
    1ecc:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ece:	2200      	movs	r2, #0
                *pDest++ = 0;
    1ed0:	481f      	ldr	r0, [pc, #124]	; (1f50 <Reset_Handler+0xcc>)
    1ed2:	2100      	movs	r1, #0
    1ed4:	1814      	adds	r4, r2, r0
    1ed6:	6021      	str	r1, [r4, #0]
    1ed8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1eda:	429a      	cmp	r2, r3
    1edc:	d1fa      	bne.n	1ed4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1ede:	4a1f      	ldr	r2, [pc, #124]	; (1f5c <Reset_Handler+0xd8>)
    1ee0:	21ff      	movs	r1, #255	; 0xff
    1ee2:	4b1f      	ldr	r3, [pc, #124]	; (1f60 <Reset_Handler+0xdc>)
    1ee4:	438b      	bics	r3, r1
    1ee6:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1ee8:	39fd      	subs	r1, #253	; 0xfd
    1eea:	2390      	movs	r3, #144	; 0x90
    1eec:	005b      	lsls	r3, r3, #1
    1eee:	4a1d      	ldr	r2, [pc, #116]	; (1f64 <Reset_Handler+0xe0>)
    1ef0:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1ef2:	481d      	ldr	r0, [pc, #116]	; (1f68 <Reset_Handler+0xe4>)
    1ef4:	78c3      	ldrb	r3, [r0, #3]
    1ef6:	2403      	movs	r4, #3
    1ef8:	43a3      	bics	r3, r4
    1efa:	2202      	movs	r2, #2
    1efc:	4313      	orrs	r3, r2
    1efe:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f00:	78c3      	ldrb	r3, [r0, #3]
    1f02:	260c      	movs	r6, #12
    1f04:	43b3      	bics	r3, r6
    1f06:	2108      	movs	r1, #8
    1f08:	430b      	orrs	r3, r1
    1f0a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1f0c:	4b17      	ldr	r3, [pc, #92]	; (1f6c <Reset_Handler+0xe8>)
    1f0e:	7b98      	ldrb	r0, [r3, #14]
    1f10:	2530      	movs	r5, #48	; 0x30
    1f12:	43a8      	bics	r0, r5
    1f14:	1c05      	adds	r5, r0, #0
    1f16:	2020      	movs	r0, #32
    1f18:	4328      	orrs	r0, r5
    1f1a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1f1c:	7b98      	ldrb	r0, [r3, #14]
    1f1e:	43b0      	bics	r0, r6
    1f20:	4301      	orrs	r1, r0
    1f22:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1f24:	7b99      	ldrb	r1, [r3, #14]
    1f26:	43a1      	bics	r1, r4
    1f28:	430a      	orrs	r2, r1
    1f2a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1f2c:	4a10      	ldr	r2, [pc, #64]	; (1f70 <Reset_Handler+0xec>)
    1f2e:	6851      	ldr	r1, [r2, #4]
    1f30:	2380      	movs	r3, #128	; 0x80
    1f32:	430b      	orrs	r3, r1
    1f34:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1f36:	4b0f      	ldr	r3, [pc, #60]	; (1f74 <Reset_Handler+0xf0>)
    1f38:	4798      	blx	r3

        /* Branch to main function */
        main();
    1f3a:	4b0f      	ldr	r3, [pc, #60]	; (1f78 <Reset_Handler+0xf4>)
    1f3c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1f3e:	e7fe      	b.n	1f3e <Reset_Handler+0xba>
    1f40:	20000000 	.word	0x20000000
    1f44:	00003e74 	.word	0x00003e74
    1f48:	2000006c 	.word	0x2000006c
    1f4c:	20000268 	.word	0x20000268
    1f50:	2000006c 	.word	0x2000006c
    1f54:	20000004 	.word	0x20000004
    1f58:	20000070 	.word	0x20000070
    1f5c:	e000ed00 	.word	0xe000ed00
    1f60:	00000000 	.word	0x00000000
    1f64:	41007000 	.word	0x41007000
    1f68:	41005000 	.word	0x41005000
    1f6c:	41004800 	.word	0x41004800
    1f70:	41004000 	.word	0x41004000
    1f74:	000031e1 	.word	0x000031e1
    1f78:	00002489 	.word	0x00002489

00001f7c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1f7c:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1f7e:	4a06      	ldr	r2, [pc, #24]	; (1f98 <_sbrk+0x1c>)
    1f80:	6812      	ldr	r2, [r2, #0]
    1f82:	2a00      	cmp	r2, #0
    1f84:	d102      	bne.n	1f8c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1f86:	4905      	ldr	r1, [pc, #20]	; (1f9c <_sbrk+0x20>)
    1f88:	4a03      	ldr	r2, [pc, #12]	; (1f98 <_sbrk+0x1c>)
    1f8a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1f8c:	4a02      	ldr	r2, [pc, #8]	; (1f98 <_sbrk+0x1c>)
    1f8e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1f90:	18c3      	adds	r3, r0, r3
    1f92:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1f94:	4770      	bx	lr
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	20000164 	.word	0x20000164
    1f9c:	20002268 	.word	0x20002268

00001fa0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1fa0:	2001      	movs	r0, #1
    1fa2:	4240      	negs	r0, r0
    1fa4:	4770      	bx	lr
    1fa6:	46c0      	nop			; (mov r8, r8)

00001fa8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1fa8:	2380      	movs	r3, #128	; 0x80
    1faa:	019b      	lsls	r3, r3, #6
    1fac:	604b      	str	r3, [r1, #4]

	return 0;
}
    1fae:	2000      	movs	r0, #0
    1fb0:	4770      	bx	lr
    1fb2:	46c0      	nop			; (mov r8, r8)

00001fb4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1fb4:	2001      	movs	r0, #1
    1fb6:	4770      	bx	lr

00001fb8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1fb8:	2000      	movs	r0, #0
    1fba:	4770      	bx	lr

00001fbc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1fbc:	b570      	push	{r4, r5, r6, lr}
    1fbe:	b082      	sub	sp, #8
    1fc0:	1c05      	adds	r5, r0, #0
    1fc2:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    1fc4:	2200      	movs	r2, #0
    1fc6:	466b      	mov	r3, sp
    1fc8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1fca:	4c06      	ldr	r4, [pc, #24]	; (1fe4 <usart_serial_getchar+0x28>)
    1fcc:	1c28      	adds	r0, r5, #0
    1fce:	466b      	mov	r3, sp
    1fd0:	1d99      	adds	r1, r3, #6
    1fd2:	47a0      	blx	r4
    1fd4:	2800      	cmp	r0, #0
    1fd6:	d1f9      	bne.n	1fcc <usart_serial_getchar+0x10>

	*c = temp;
    1fd8:	466b      	mov	r3, sp
    1fda:	3306      	adds	r3, #6
    1fdc:	881b      	ldrh	r3, [r3, #0]
    1fde:	7033      	strb	r3, [r6, #0]
}
    1fe0:	b002      	add	sp, #8
    1fe2:	bd70      	pop	{r4, r5, r6, pc}
    1fe4:	00000dbd 	.word	0x00000dbd

00001fe8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1fe8:	b570      	push	{r4, r5, r6, lr}
    1fea:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    1fec:	b28c      	uxth	r4, r1
    1fee:	4e03      	ldr	r6, [pc, #12]	; (1ffc <usart_serial_putchar+0x14>)
    1ff0:	1c28      	adds	r0, r5, #0
    1ff2:	1c21      	adds	r1, r4, #0
    1ff4:	47b0      	blx	r6
    1ff6:	2800      	cmp	r0, #0
    1ff8:	d1fa      	bne.n	1ff0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    1ffa:	bd70      	pop	{r4, r5, r6, pc}
    1ffc:	00000d91 	.word	0x00000d91

00002000 <usart_read_callback>:
	spi_enable(&spi_master_instance);
}

/*****  INTERRUPT HANDLERS  *****/
void usart_read_callback(struct usart_module *const usart_module)
{
    2000:	b510      	push	{r4, lr}
    2002:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    2004:	2300      	movs	r3, #0
    2006:	9301      	str	r3, [sp, #4]

	//sets semaphore for secondary handler task to receive
	xSemaphoreGiveFromISR( UARTsem, &xHigherPriorityTaskWoken );
    2008:	4b09      	ldr	r3, [pc, #36]	; (2030 <STACK_SIZE+0x30>)
    200a:	6818      	ldr	r0, [r3, #0]
    200c:	2100      	movs	r1, #0
    200e:	aa01      	add	r2, sp, #4
    2010:	2300      	movs	r3, #0
    2012:	4c08      	ldr	r4, [pc, #32]	; (2034 <STACK_SIZE+0x34>)
    2014:	47a0      	blx	r4

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
    2016:	9b01      	ldr	r3, [sp, #4]
    2018:	2b00      	cmp	r3, #0
    201a:	d003      	beq.n	2024 <usart_read_callback+0x24>
    201c:	2280      	movs	r2, #128	; 0x80
    201e:	0552      	lsls	r2, r2, #21
    2020:	4b05      	ldr	r3, [pc, #20]	; (2038 <STACK_SIZE+0x38>)
    2022:	601a      	str	r2, [r3, #0]
	printf( "Interrupt - Semaphore generated.\r\n" );
    2024:	4805      	ldr	r0, [pc, #20]	; (203c <STACK_SIZE+0x3c>)
    2026:	4b06      	ldr	r3, [pc, #24]	; (2040 <STACK_SIZE+0x40>)
    2028:	4798      	blx	r3
}
    202a:	b002      	add	sp, #8
    202c:	bd10      	pop	{r4, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	20000250 	.word	0x20000250
    2034:	00000735 	.word	0x00000735
    2038:	e000ed04 	.word	0xe000ed04
    203c:	00003cf8 	.word	0x00003cf8
    2040:	00003311 	.word	0x00003311

00002044 <write_to_MCP4821>:
static uint16_t sample_buffer;


/***  APPLICATION FUNCTIONS  ****/
void write_to_MCP4821( uint16_t input16 )
{
    2044:	b5f0      	push	{r4, r5, r6, r7, lr}
    2046:	b083      	sub	sp, #12
	union u16_to_u8 sample_to_send;
	uint8_t sent_bytes[2];
	int i;

	sample_to_send.u16 = (input16 & 0xFFF) | (DAC_CMD_MASK);
    2048:	0500      	lsls	r0, r0, #20
    204a:	0d00      	lsrs	r0, r0, #20
    204c:	23c0      	movs	r3, #192	; 0xc0
    204e:	019b      	lsls	r3, r3, #6
    2050:	4318      	orrs	r0, r3

	sent_bytes[0] = sample_to_send.u8[1];
    2052:	ad01      	add	r5, sp, #4
    2054:	0a03      	lsrs	r3, r0, #8
    2056:	702b      	strb	r3, [r5, #0]
	sent_bytes[1] = sample_to_send.u8[0];
    2058:	7068      	strb	r0, [r5, #1]

	//send sample to spi peripheral
	spi_select_slave(&spi_master_instance, &slave, true);
    205a:	4c09      	ldr	r4, [pc, #36]	; (2080 <write_to_MCP4821+0x3c>)
    205c:	4f09      	ldr	r7, [pc, #36]	; (2084 <write_to_MCP4821+0x40>)
    205e:	1c20      	adds	r0, r4, #0
    2060:	1c39      	adds	r1, r7, #0
    2062:	2201      	movs	r2, #1
    2064:	4e08      	ldr	r6, [pc, #32]	; (2088 <write_to_MCP4821+0x44>)
    2066:	47b0      	blx	r6
	spi_write_buffer_wait(&spi_master_instance, sent_bytes, 2);
    2068:	1c20      	adds	r0, r4, #0
    206a:	1c29      	adds	r1, r5, #0
    206c:	2202      	movs	r2, #2
    206e:	4b07      	ldr	r3, [pc, #28]	; (208c <write_to_MCP4821+0x48>)
    2070:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
    2072:	1c20      	adds	r0, r4, #0
    2074:	1c39      	adds	r1, r7, #0
    2076:	2200      	movs	r2, #0
    2078:	47b0      	blx	r6
}
    207a:	b003      	add	sp, #12
    207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	20000254 	.word	0x20000254
    2084:	20000260 	.word	0x20000260
    2088:	000012fd 	.word	0x000012fd
    208c:	000013ed 	.word	0x000013ed

00002090 <fraction_of_FFF>:
		}
	}
}

uint16_t fraction_of_FFF(long num, long den)
{
    2090:	b570      	push	{r4, r5, r6, lr}
    2092:	1c0e      	adds	r6, r1, #0
	float num_f = num;
    2094:	4c07      	ldr	r4, [pc, #28]	; (20b4 <fraction_of_FFF+0x24>)
    2096:	47a0      	blx	r4
    2098:	1c05      	adds	r5, r0, #0
	float den_f = den;
    209a:	1c30      	adds	r0, r6, #0
    209c:	47a0      	blx	r4
    209e:	1c01      	adds	r1, r0, #0
	float output = (float) 0xFFF;

	output = output * (num_f/den_f);
    20a0:	1c28      	adds	r0, r5, #0
    20a2:	4b05      	ldr	r3, [pc, #20]	; (20b8 <fraction_of_FFF+0x28>)
    20a4:	4798      	blx	r3
    20a6:	4905      	ldr	r1, [pc, #20]	; (20bc <fraction_of_FFF+0x2c>)
    20a8:	4b05      	ldr	r3, [pc, #20]	; (20c0 <fraction_of_FFF+0x30>)
    20aa:	4798      	blx	r3

	return ((uint16_t) output);
    20ac:	4b05      	ldr	r3, [pc, #20]	; (20c4 <fraction_of_FFF+0x34>)
    20ae:	4798      	blx	r3
    20b0:	b280      	uxth	r0, r0
}
    20b2:	bd70      	pop	{r4, r5, r6, pc}
    20b4:	00002f2d 	.word	0x00002f2d
    20b8:	0000271d 	.word	0x0000271d
    20bc:	457ff000 	.word	0x457ff000
    20c0:	0000298d 	.word	0x0000298d
    20c4:	000026ed 	.word	0x000026ed

000020c8 <configure_extosc32k>:
		/* Error enabling the clock source */
	}
}

void configure_extosc32k( void )
{
    20c8:	b500      	push	{lr}
    20ca:	b085      	sub	sp, #20
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    20cc:	2300      	movs	r3, #0
    20ce:	466a      	mov	r2, sp
    20d0:	7013      	strb	r3, [r2, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    20d2:	7093      	strb	r3, [r2, #2]
	config->frequency           = 32768UL;
    20d4:	2280      	movs	r2, #128	; 0x80
    20d6:	0212      	lsls	r2, r2, #8
    20d8:	9202      	str	r2, [sp, #8]
	config->enable_1khz_output  = false;
    20da:	466a      	mov	r2, sp
    20dc:	70d3      	strb	r3, [r2, #3]
	config->enable_32khz_output = true;
    20de:	2201      	movs	r2, #1
    20e0:	4669      	mov	r1, sp
    20e2:	710a      	strb	r2, [r1, #4]
	config->run_in_standby      = false;
    20e4:	730b      	strb	r3, [r1, #12]
	config->on_demand           = true;
    20e6:	734a      	strb	r2, [r1, #13]
	config->write_once          = false;
    20e8:	738b      	strb	r3, [r1, #14]
	struct  system_clock_source_xosc32k_config config_ext32k;
	system_clock_source_xosc32k_get_config_defaults(&config_ext32k);
	config_ext32k.startup_time = SYSTEM_XOSC32K_STARTUP_4096;
    20ea:	3303      	adds	r3, #3
    20ec:	704b      	strb	r3, [r1, #1]
	system_clock_source_xosc32k_set_config(&config_ext32k);
    20ee:	4668      	mov	r0, sp
    20f0:	4b01      	ldr	r3, [pc, #4]	; (20f8 <configure_extosc32k+0x30>)
    20f2:	4798      	blx	r3
}
    20f4:	b005      	add	sp, #20
    20f6:	bd00      	pop	{pc}
    20f8:	00001855 	.word	0x00001855

000020fc <extosc32k_setup>:
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &config_gclock_gen);
	#endif
}

void extosc32k_setup( void )
{
    20fc:	b508      	push	{r3, lr}
	/* Configure the external 32KHz oscillator */
	configure_extosc32k();
    20fe:	4b03      	ldr	r3, [pc, #12]	; (210c <extosc32k_setup+0x10>)
    2100:	4798      	blx	r3
	/* Enable the external 32KHz oscillator */
		enum status_code osc32k_status =
    2102:	2005      	movs	r0, #5
    2104:	4b02      	ldr	r3, [pc, #8]	; (2110 <extosc32k_setup+0x14>)
    2106:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	if (osc32k_status != STATUS_OK) {
		/* Error enabling the clock source */
	}
}
    2108:	bd08      	pop	{r3, pc}
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	000020c9 	.word	0x000020c9
    2110:	000019b1 	.word	0x000019b1

00002114 <configure_dfll_open_loop>:
	system_clock_source_xosc32k_set_config(&config_ext32k);
}

#if (!SAMC21)
void configure_dfll_open_loop( void )
{
    2114:	b500      	push	{lr}
    2116:	b087      	sub	sp, #28
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    2118:	a801      	add	r0, sp, #4
    211a:	2300      	movs	r3, #0
    211c:	7003      	strb	r3, [r0, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    211e:	2200      	movs	r2, #0
    2120:	8043      	strh	r3, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2122:	8083      	strh	r3, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2124:	7182      	strb	r2, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2126:	71c2      	strb	r2, [r0, #7]
	config->on_demand       = true;
    2128:	3301      	adds	r3, #1
    212a:	7043      	strb	r3, [r0, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    212c:	2207      	movs	r2, #7
    212e:	7202      	strb	r2, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2130:	3238      	adds	r2, #56	; 0x38
    2132:	8142      	strh	r2, [r0, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    2134:	7303      	strb	r3, [r0, #12]
	config->fine_max_step   = 1;
    2136:	81c3      	strh	r3, [r0, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    2138:	3305      	adds	r3, #5
    213a:	8203      	strh	r3, [r0, #16]
	struct  system_clock_source_dfll_config config_dfll;
	system_clock_source_dfll_get_config_defaults(&config_dfll);
	system_clock_source_dfll_set_config(&config_dfll);
    213c:	4b01      	ldr	r3, [pc, #4]	; (2144 <configure_dfll_open_loop+0x30>)
    213e:	4798      	blx	r3
}
    2140:	b007      	add	sp, #28
    2142:	bd00      	pop	{pc}
    2144:	0000192d 	.word	0x0000192d

00002148 <dfll_setup>:


/******  CONFIG FUNCTIONS  ******/
//clock config functions
void dfll_setup( void )
{
    2148:	b500      	push	{lr}
    214a:	b085      	sub	sp, #20
	#if (!SAMC21)
	/* Configure the DFLL in open loop mode using default values */
	configure_dfll_open_loop();
    214c:	4b0c      	ldr	r3, [pc, #48]	; (2180 <dfll_setup+0x38>)
    214e:	4798      	blx	r3
	/* Enable the DFLL oscillator */
	enum status_code dfll_status =
    2150:	2007      	movs	r0, #7
    2152:	4b0c      	ldr	r3, [pc, #48]	; (2184 <dfll_setup+0x3c>)
    2154:	4798      	blx	r3
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2156:	490c      	ldr	r1, [pc, #48]	; (2188 <dfll_setup+0x40>)
    2158:	684b      	ldr	r3, [r1, #4]
    215a:	221e      	movs	r2, #30
    215c:	4393      	bics	r3, r2
    215e:	3a1a      	subs	r2, #26
    2160:	4313      	orrs	r3, r2
    2162:	604b      	str	r3, [r1, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2164:	a901      	add	r1, sp, #4
    2166:	2301      	movs	r3, #1
    2168:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    216a:	2300      	movs	r3, #0
    216c:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    216e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2170:	724b      	strb	r3, [r1, #9]
	/* Configure flash wait states before switching to high frequency clock */
	system_flash_set_waitstates(2);
	/* Change system clock to DFLL */
	struct  system_gclk_gen_config config_gclock_gen;
	system_gclk_gen_get_config_defaults(&config_gclock_gen);
	config_gclock_gen.source_clock = SYSTEM_CLOCK_SOURCE_DFLL;
    2172:	3307      	adds	r3, #7
    2174:	700b      	strb	r3, [r1, #0]
	config_gclock_gen.division_factor = 1;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &config_gclock_gen);
    2176:	2000      	movs	r0, #0
    2178:	4b04      	ldr	r3, [pc, #16]	; (218c <dfll_setup+0x44>)
    217a:	4798      	blx	r3
	#endif
}
    217c:	b005      	add	sp, #20
    217e:	bd00      	pop	{pc}
    2180:	00002115 	.word	0x00002115
    2184:	000019b1 	.word	0x000019b1
    2188:	41004000 	.word	0x41004000
    218c:	00001b15 	.word	0x00001b15

00002190 <configure_gclock_generator>:
	system_clock_source_dfll_set_config(&config_dfll);
}
#endif

void configure_gclock_generator( void )
{
    2190:	b500      	push	{lr}
    2192:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    2194:	a901      	add	r1, sp, #4
    2196:	2300      	movs	r3, #0
    2198:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    219a:	2206      	movs	r2, #6
    219c:	700a      	strb	r2, [r1, #0]
#endif
	config->run_in_standby     = false;
    219e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    21a0:	724b      	strb	r3, [r1, #9]
	#elif (SAMC21)
	gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC48M;
	gclock_gen_conf.division_factor = 4;
	#else
	gclock_gen_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
	gclock_gen_conf.division_factor = 4;
    21a2:	3304      	adds	r3, #4
    21a4:	604b      	str	r3, [r1, #4]
	#endif
	system_gclk_gen_set_config(GCLK_GENERATOR_2, &gclock_gen_conf);
    21a6:	2002      	movs	r0, #2
    21a8:	4b03      	ldr	r3, [pc, #12]	; (21b8 <configure_gclock_generator+0x28>)
    21aa:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_2);
    21ac:	2002      	movs	r0, #2
    21ae:	4b03      	ldr	r3, [pc, #12]	; (21bc <configure_gclock_generator+0x2c>)
    21b0:	4798      	blx	r3
}
    21b2:	b005      	add	sp, #20
    21b4:	bd00      	pop	{pc}
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	00001b15 	.word	0x00001b15
    21bc:	00001bcd 	.word	0x00001bcd

000021c0 <configure_gclock_channel>:

void configure_gclock_channel( void )
{
    21c0:	b500      	push	{lr}
    21c2:	b083      	sub	sp, #12
	struct  system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    21c4:	a901      	add	r1, sp, #4
    21c6:	2302      	movs	r3, #2
    21c8:	700b      	strb	r3, [r1, #0]
	#if (SAMD10) || (SAMD11)
	system_gclk_chan_set_config(TC1_GCLK_ID, &gclk_chan_conf);
	system_gclk_chan_enable(TC1_GCLK_ID);
	#else
	system_gclk_chan_set_config(TC3_GCLK_ID, &gclk_chan_conf);
    21ca:	201b      	movs	r0, #27
    21cc:	4b03      	ldr	r3, [pc, #12]	; (21dc <configure_gclock_channel+0x1c>)
    21ce:	4798      	blx	r3
	system_gclk_chan_enable(TC3_GCLK_ID);
    21d0:	201b      	movs	r0, #27
    21d2:	4b03      	ldr	r3, [pc, #12]	; (21e0 <configure_gclock_channel+0x20>)
    21d4:	4798      	blx	r3
	#endif
}
    21d6:	b003      	add	sp, #12
    21d8:	bd00      	pop	{pc}
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	00001d29 	.word	0x00001d29
    21e0:	00001c9d 	.word	0x00001c9d

000021e4 <configure_usart>:

void configure_usart(void)
{
    21e4:	b570      	push	{r4, r5, r6, lr}
    21e6:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    21e8:	2380      	movs	r3, #128	; 0x80
    21ea:	05db      	lsls	r3, r3, #23
    21ec:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    21ee:	2300      	movs	r3, #0
    21f0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    21f2:	22ff      	movs	r2, #255	; 0xff
    21f4:	4669      	mov	r1, sp
    21f6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    21f8:	2100      	movs	r1, #0
    21fa:	466a      	mov	r2, sp
    21fc:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    21fe:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2200:	2201      	movs	r2, #1
    2202:	2024      	movs	r0, #36	; 0x24
    2204:	466c      	mov	r4, sp
    2206:	5422      	strb	r2, [r4, r0]
	config->transmitter_enable = true;
    2208:	3001      	adds	r0, #1
    220a:	5422      	strb	r2, [r4, r0]
	config->clock_polarity_inverted = false;
    220c:	3001      	adds	r0, #1
    220e:	5423      	strb	r3, [r4, r0]
	config->use_external_clock = false;
    2210:	3001      	adds	r0, #1
    2212:	5423      	strb	r3, [r4, r0]
	config->ext_clock_freq   = 0;
    2214:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2216:	3005      	adds	r0, #5
    2218:	5423      	strb	r3, [r4, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    221a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    221c:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    221e:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2220:	7621      	strb	r1, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2222:	7661      	strb	r1, [r4, #25]
	config->receive_pulse_length                    = 19;
    2224:	2313      	movs	r3, #19
    2226:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2228:	7761      	strb	r1, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = USART_BAUD_RATE;
    222a:	23e1      	movs	r3, #225	; 0xe1
    222c:	025b      	lsls	r3, r3, #9
    222e:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    2230:	2380      	movs	r3, #128	; 0x80
    2232:	035b      	lsls	r3, r3, #13
    2234:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    2236:	4b15      	ldr	r3, [pc, #84]	; (228c <configure_usart+0xa8>)
    2238:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    223a:	4b15      	ldr	r3, [pc, #84]	; (2290 <configure_usart+0xac>)
    223c:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    223e:	2301      	movs	r3, #1
    2240:	425b      	negs	r3, r3
    2242:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    2244:	930f      	str	r3, [sp, #60]	; 0x3c
	config_usart.start_frame_detection_enable = true;
    2246:	7722      	strb	r2, [r4, #28]
	config_usart.generator_source = GCLK_GENERATOR_2;
    2248:	3201      	adds	r2, #1
    224a:	232d      	movs	r3, #45	; 0x2d
    224c:	54e2      	strb	r2, [r4, r3]
	while (usart_init(&usart_instance, SERCOM1
    224e:	4e11      	ldr	r6, [pc, #68]	; (2294 <configure_usart+0xb0>)
    2250:	4d11      	ldr	r5, [pc, #68]	; (2298 <configure_usart+0xb4>)
    2252:	4c12      	ldr	r4, [pc, #72]	; (229c <configure_usart+0xb8>)
    2254:	1c30      	adds	r0, r6, #0
    2256:	1c29      	adds	r1, r5, #0
    2258:	466a      	mov	r2, sp
    225a:	47a0      	blx	r4
    225c:	2800      	cmp	r0, #0
    225e:	d1f9      	bne.n	2254 <configure_usart+0x70>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2260:	4d0c      	ldr	r5, [pc, #48]	; (2294 <configure_usart+0xb0>)
    2262:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2264:	1c20      	adds	r0, r4, #0
    2266:	4b0e      	ldr	r3, [pc, #56]	; (22a0 <configure_usart+0xbc>)
    2268:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    226a:	231f      	movs	r3, #31
    226c:	4018      	ands	r0, r3
    226e:	3b1e      	subs	r3, #30
    2270:	4083      	lsls	r3, r0
    2272:	1c18      	adds	r0, r3, #0
    2274:	4b0b      	ldr	r3, [pc, #44]	; (22a4 <configure_usart+0xc0>)
    2276:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2278:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    227a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    227c:	2b00      	cmp	r3, #0
    227e:	d1fc      	bne.n	227a <configure_usart+0x96>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2280:	6822      	ldr	r2, [r4, #0]
    2282:	3302      	adds	r3, #2
    2284:	4313      	orrs	r3, r2
    2286:	6023      	str	r3, [r4, #0]
	, &config_usart) != STATUS_OK) {
	}
	usart_enable(&usart_instance);
}
    2288:	b010      	add	sp, #64	; 0x40
    228a:	bd70      	pop	{r4, r5, r6, pc}
    228c:	00100002 	.word	0x00100002
    2290:	00110002 	.word	0x00110002
    2294:	200001dc 	.word	0x200001dc
    2298:	42000c00 	.word	0x42000c00
    229c:	00000a59 	.word	0x00000a59
    22a0:	00001631 	.word	0x00001631
    22a4:	e000e100 	.word	0xe000e100

000022a8 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    22a8:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,
    22aa:	4c06      	ldr	r4, [pc, #24]	; (22c4 <configure_usart_callbacks+0x1c>)
    22ac:	1c20      	adds	r0, r4, #0
    22ae:	4906      	ldr	r1, [pc, #24]	; (22c8 <configure_usart_callbacks+0x20>)
    22b0:	2205      	movs	r2, #5
    22b2:	4b06      	ldr	r3, [pc, #24]	; (22cc <configure_usart_callbacks+0x24>)
    22b4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    22b6:	2231      	movs	r2, #49	; 0x31
    22b8:	5ca1      	ldrb	r1, [r4, r2]
    22ba:	2320      	movs	r3, #32
    22bc:	430b      	orrs	r3, r1
    22be:	54a3      	strb	r3, [r4, r2]
	usart_read_callback, USART_CALLBACK_START_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_START_RECEIVED);
}
    22c0:	bd10      	pop	{r4, pc}
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	200001dc 	.word	0x200001dc
    22c8:	00002001 	.word	0x00002001
    22cc:	00000e2d 	.word	0x00000e2d

000022d0 <configure_usart_EDBG>:

void configure_usart_EDBG(void)
{
    22d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22d2:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    22d4:	2380      	movs	r3, #128	; 0x80
    22d6:	05db      	lsls	r3, r3, #23
    22d8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    22da:	2300      	movs	r3, #0
    22dc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    22de:	22ff      	movs	r2, #255	; 0xff
    22e0:	4669      	mov	r1, sp
    22e2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    22e4:	2200      	movs	r2, #0
    22e6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    22e8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    22ea:	2401      	movs	r4, #1
    22ec:	2124      	movs	r1, #36	; 0x24
    22ee:	4668      	mov	r0, sp
    22f0:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    22f2:	3101      	adds	r1, #1
    22f4:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    22f6:	3101      	adds	r1, #1
    22f8:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    22fa:	3101      	adds	r1, #1
    22fc:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    22fe:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2300:	3105      	adds	r1, #5
    2302:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2304:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2306:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2308:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    230a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    230c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    230e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    2310:	2313      	movs	r3, #19
    2312:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2314:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = USART_BAUD_RATE;
    2316:	23e1      	movs	r3, #225	; 0xe1
    2318:	025b      	lsls	r3, r3, #9
    231a:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    231c:	2380      	movs	r3, #128	; 0x80
    231e:	035b      	lsls	r3, r3, #13
    2320:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2322:	4b1b      	ldr	r3, [pc, #108]	; (2390 <configure_usart_EDBG+0xc0>)
    2324:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2326:	4b1b      	ldr	r3, [pc, #108]	; (2394 <configure_usart_EDBG+0xc4>)
    2328:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    232a:	2301      	movs	r3, #1
    232c:	425b      	negs	r3, r3
    232e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2330:	930f      	str	r3, [sp, #60]	; 0x3c
	config_usart.generator_source = GCLK_GENERATOR_2;
    2332:	2202      	movs	r2, #2
    2334:	332e      	adds	r3, #46	; 0x2e
    2336:	54c2      	strb	r2, [r0, r3]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2338:	4d17      	ldr	r5, [pc, #92]	; (2398 <configure_usart_EDBG+0xc8>)
    233a:	4b18      	ldr	r3, [pc, #96]	; (239c <configure_usart_EDBG+0xcc>)
    233c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    233e:	4a18      	ldr	r2, [pc, #96]	; (23a0 <configure_usart_EDBG+0xd0>)
    2340:	4b18      	ldr	r3, [pc, #96]	; (23a4 <configure_usart_EDBG+0xd4>)
    2342:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2344:	4a18      	ldr	r2, [pc, #96]	; (23a8 <configure_usart_EDBG+0xd8>)
    2346:	4b19      	ldr	r3, [pc, #100]	; (23ac <configure_usart_EDBG+0xdc>)
    2348:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    234a:	1c28      	adds	r0, r5, #0
    234c:	4918      	ldr	r1, [pc, #96]	; (23b0 <configure_usart_EDBG+0xe0>)
    234e:	466a      	mov	r2, sp
    2350:	4b18      	ldr	r3, [pc, #96]	; (23b4 <configure_usart_EDBG+0xe4>)
    2352:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2354:	4f18      	ldr	r7, [pc, #96]	; (23b8 <configure_usart_EDBG+0xe8>)
    2356:	683b      	ldr	r3, [r7, #0]
    2358:	6898      	ldr	r0, [r3, #8]
    235a:	2100      	movs	r1, #0
    235c:	4e17      	ldr	r6, [pc, #92]	; (23bc <configure_usart_EDBG+0xec>)
    235e:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2360:	683b      	ldr	r3, [r7, #0]
    2362:	6858      	ldr	r0, [r3, #4]
    2364:	2100      	movs	r1, #0
    2366:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2368:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    236a:	1c30      	adds	r0, r6, #0
    236c:	4b14      	ldr	r3, [pc, #80]	; (23c0 <configure_usart_EDBG+0xf0>)
    236e:	4798      	blx	r3
    2370:	231f      	movs	r3, #31
    2372:	4018      	ands	r0, r3
    2374:	4084      	lsls	r4, r0
    2376:	4b13      	ldr	r3, [pc, #76]	; (23c4 <configure_usart_EDBG+0xf4>)
    2378:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    237a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    237c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    237e:	2b00      	cmp	r3, #0
    2380:	d1fc      	bne.n	237c <configure_usart_EDBG+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2382:	6832      	ldr	r2, [r6, #0]
    2384:	3302      	adds	r3, #2
    2386:	4313      	orrs	r3, r2
    2388:	6033      	str	r3, [r6, #0]
	
	stdio_serial_init(&usart_instance_EDBG, EDBG_CDC_MODULE, &config_usart);

	usart_enable(&usart_instance_EDBG);
}
    238a:	b011      	add	sp, #68	; 0x44
    238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    238e:	46c0      	nop			; (mov r8, r8)
    2390:	00160002 	.word	0x00160002
    2394:	00170002 	.word	0x00170002
    2398:	20000210 	.word	0x20000210
    239c:	200001ac 	.word	0x200001ac
    23a0:	00001fe9 	.word	0x00001fe9
    23a4:	200001a8 	.word	0x200001a8
    23a8:	00001fbd 	.word	0x00001fbd
    23ac:	200001a4 	.word	0x200001a4
    23b0:	42001400 	.word	0x42001400
    23b4:	00000a59 	.word	0x00000a59
    23b8:	20000068 	.word	0x20000068
    23bc:	00003325 	.word	0x00003325
    23c0:	00001631 	.word	0x00001631
    23c4:	e000e100 	.word	0xe000e100

000023c8 <configure_spi_master>:

void configure_spi_master(void)
{
    23c8:	b510      	push	{r4, lr}
    23ca:	b090      	sub	sp, #64	; 0x40
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    23cc:	4c24      	ldr	r4, [pc, #144]	; (2460 <configure_spi_master+0x98>)
    23ce:	2328      	movs	r3, #40	; 0x28
    23d0:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    23d2:	2300      	movs	r3, #0
    23d4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    23d6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    23d8:	a901      	add	r1, sp, #4
    23da:	2201      	movs	r2, #1
    23dc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    23de:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    23e0:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    23e2:	2028      	movs	r0, #40	; 0x28
    23e4:	4b1f      	ldr	r3, [pc, #124]	; (2464 <configure_spi_master+0x9c>)
    23e6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    23e8:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    23ea:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    23ec:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    23ee:	2900      	cmp	r1, #0
    23f0:	d104      	bne.n	23fc <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    23f2:	095a      	lsrs	r2, r3, #5
    23f4:	01d2      	lsls	r2, r2, #7
    23f6:	491c      	ldr	r1, [pc, #112]	; (2468 <configure_spi_master+0xa0>)
    23f8:	468c      	mov	ip, r1
    23fa:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    23fc:	211f      	movs	r1, #31
    23fe:	400b      	ands	r3, r1
    2400:	391e      	subs	r1, #30
    2402:	1c08      	adds	r0, r1, #0
    2404:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2406:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2408:	aa02      	add	r2, sp, #8
    240a:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    240c:	2300      	movs	r3, #0
    240e:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2410:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2412:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    2414:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    2416:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2418:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    241a:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    241c:	9309      	str	r3, [sp, #36]	; 0x24
    241e:	930a      	str	r3, [sp, #40]	; 0x28

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    2420:	4b12      	ldr	r3, [pc, #72]	; (246c <configure_spi_master+0xa4>)
    2422:	6193      	str	r3, [r2, #24]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = PIN_PB08;
	spi_attach_slave(&slave, &slave_dev_config);
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = EXT1_SPI_SERCOM_MUX_SETTING;
    2424:	2380      	movs	r3, #128	; 0x80
    2426:	025b      	lsls	r3, r3, #9
    2428:	60d3      	str	r3, [r2, #12]
	/* Configure pad 0 for data in */
	config_spi_master.pinmux_pad0 = EXT1_SPI_SERCOM_PINMUX_PAD0;
    242a:	4b11      	ldr	r3, [pc, #68]	; (2470 <configure_spi_master+0xa8>)
    242c:	6293      	str	r3, [r2, #40]	; 0x28
	/* Configure pad 1 as unused */
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    242e:	2301      	movs	r3, #1
    2430:	425b      	negs	r3, r3
    2432:	62d3      	str	r3, [r2, #44]	; 0x2c
	/* Configure pad 2 for data out */
	config_spi_master.pinmux_pad2 = EXT1_SPI_SERCOM_PINMUX_PAD2; //PA06
    2434:	4b0f      	ldr	r3, [pc, #60]	; (2474 <configure_spi_master+0xac>)
    2436:	6313      	str	r3, [r2, #48]	; 0x30
	/* Configure pad 3 for SCK */
	config_spi_master.pinmux_pad3 = EXT1_SPI_SERCOM_PINMUX_PAD3; //PA07
    2438:	4b0f      	ldr	r3, [pc, #60]	; (2478 <configure_spi_master+0xb0>)
    243a:	6353      	str	r3, [r2, #52]	; 0x34
	config_spi_master.generator_source = GCLK_GENERATOR_2;
    243c:	3101      	adds	r1, #1
    243e:	2324      	movs	r3, #36	; 0x24
    2440:	54d1      	strb	r1, [r2, r3]
	spi_init(&spi_master_instance, EXT1_SPI_MODULE, &config_spi_master);
    2442:	4c0e      	ldr	r4, [pc, #56]	; (247c <configure_spi_master+0xb4>)
    2444:	1c20      	adds	r0, r4, #0
    2446:	490e      	ldr	r1, [pc, #56]	; (2480 <configure_spi_master+0xb8>)
    2448:	4b0e      	ldr	r3, [pc, #56]	; (2484 <configure_spi_master+0xbc>)
    244a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    244c:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    244e:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    2450:	2b00      	cmp	r3, #0
    2452:	d1fc      	bne.n	244e <configure_spi_master+0x86>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2454:	6811      	ldr	r1, [r2, #0]
    2456:	3302      	adds	r3, #2
    2458:	430b      	orrs	r3, r1
    245a:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
}
    245c:	b010      	add	sp, #64	; 0x40
    245e:	bd10      	pop	{r4, pc}
    2460:	20000260 	.word	0x20000260
    2464:	00001765 	.word	0x00001765
    2468:	41004400 	.word	0x41004400
    246c:	000186a0 	.word	0x000186a0
    2470:	00040003 	.word	0x00040003
    2474:	00060003 	.word	0x00060003
    2478:	00070003 	.word	0x00070003
    247c:	20000254 	.word	0x20000254
    2480:	42000800 	.word	0x42000800
    2484:	00000fd1 	.word	0x00000fd1

00002488 <main>:
	}
}

/*******      MAIN     **********/
int main ( void )
{
    2488:	b570      	push	{r4, r5, r6, lr}
	system_init();
    248a:	4b29      	ldr	r3, [pc, #164]	; (2530 <main+0xa8>)
    248c:	4798      	blx	r3


	extosc32k_setup();
    248e:	4b29      	ldr	r3, [pc, #164]	; (2534 <main+0xac>)
    2490:	4798      	blx	r3
	dfll_setup();
    2492:	4b29      	ldr	r3, [pc, #164]	; (2538 <main+0xb0>)
    2494:	4798      	blx	r3


	configure_gclock_generator();
    2496:	4b29      	ldr	r3, [pc, #164]	; (253c <main+0xb4>)
    2498:	4798      	blx	r3
	configure_gclock_channel();
    249a:	4b29      	ldr	r3, [pc, #164]	; (2540 <main+0xb8>)
    249c:	4798      	blx	r3


	configure_usart();
    249e:	4b29      	ldr	r3, [pc, #164]	; (2544 <main+0xbc>)
    24a0:	4798      	blx	r3
	configure_usart_EDBG();
    24a2:	4b29      	ldr	r3, [pc, #164]	; (2548 <main+0xc0>)
    24a4:	4798      	blx	r3
	configure_usart_callbacks();
    24a6:	4b29      	ldr	r3, [pc, #164]	; (254c <main+0xc4>)
    24a8:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    24aa:	2401      	movs	r4, #1
    24ac:	4b28      	ldr	r3, [pc, #160]	; (2550 <main+0xc8>)
    24ae:	701c      	strb	r4, [r3, #0]
    24b0:	f3bf 8f5f 	dmb	sy
    24b4:	b662      	cpsie	i


	system_interrupt_enable_global();


	configure_spi_master();
    24b6:	4b27      	ldr	r3, [pc, #156]	; (2554 <main+0xcc>)
    24b8:	4798      	blx	r3


	printf("PROGRAM START!\r\n");
    24ba:	4827      	ldr	r0, [pc, #156]	; (2558 <main+0xd0>)
    24bc:	4b27      	ldr	r3, [pc, #156]	; (255c <main+0xd4>)
    24be:	4798      	blx	r3

	uint16_t test_sample = fraction_of_FFF(45, 45);

	active_voices[0].v_enable = true;
    24c0:	4b27      	ldr	r3, [pc, #156]	; (2560 <main+0xd8>)
    24c2:	701c      	strb	r4, [r3, #0]
	active_voices[0].v_type = TRI;
    24c4:	2202      	movs	r2, #2
    24c6:	705a      	strb	r2, [r3, #1]
	active_voices[0].v_counter = 0;
    24c8:	2200      	movs	r2, #0
    24ca:	605a      	str	r2, [r3, #4]
	active_voices[0].v_period = 5;
    24cc:	2105      	movs	r1, #5
    24ce:	6099      	str	r1, [r3, #8]

	j=0;
    24d0:	4b24      	ldr	r3, [pc, #144]	; (2564 <main+0xdc>)
    24d2:	601a      	str	r2, [r3, #0]

	//TRIANGLE TEST
	while(1)
	{

		if(active_voices[j].v_counter <= ((active_voices[j].v_period) >> 1))
    24d4:	1c1d      	adds	r5, r3, #0
    24d6:	4c22      	ldr	r4, [pc, #136]	; (2560 <main+0xd8>)
		{
			sample_buffer = (uint16_t) (fraction_of_FFF((active_voices[j].v_counter << 1), active_voices[j].v_period) >> 2);
		}
		else if(active_voices[j].v_counter > ((active_voices[j].v_period) >> 1))
		{
			sample_buffer = (uint16_t) (fraction_of_FFF(((active_voices[j].v_period - active_voices[j].v_counter) << 1), active_voices[j].v_period) >> 2);
    24d8:	4e23      	ldr	r6, [pc, #140]	; (2568 <main+0xe0>)

	//TRIANGLE TEST
	while(1)
	{

		if(active_voices[j].v_counter <= ((active_voices[j].v_period) >> 1))
    24da:	682b      	ldr	r3, [r5, #0]
    24dc:	0059      	lsls	r1, r3, #1
    24de:	18ca      	adds	r2, r1, r3
    24e0:	0092      	lsls	r2, r2, #2
    24e2:	18a2      	adds	r2, r4, r2
    24e4:	6850      	ldr	r0, [r2, #4]
    24e6:	6891      	ldr	r1, [r2, #8]
    24e8:	104b      	asrs	r3, r1, #1
    24ea:	4298      	cmp	r0, r3
    24ec:	dc06      	bgt.n	24fc <main+0x74>
		{
			sample_buffer = (uint16_t) (fraction_of_FFF((active_voices[j].v_counter << 1), active_voices[j].v_period) >> 2);
    24ee:	0040      	lsls	r0, r0, #1
    24f0:	4b1d      	ldr	r3, [pc, #116]	; (2568 <main+0xe0>)
    24f2:	4798      	blx	r3
    24f4:	0880      	lsrs	r0, r0, #2
    24f6:	4b1d      	ldr	r3, [pc, #116]	; (256c <main+0xe4>)
    24f8:	8018      	strh	r0, [r3, #0]
    24fa:	e005      	b.n	2508 <main+0x80>
		}
		else if(active_voices[j].v_counter > ((active_voices[j].v_period) >> 1))
		{
			sample_buffer = (uint16_t) (fraction_of_FFF(((active_voices[j].v_period - active_voices[j].v_counter) << 1), active_voices[j].v_period) >> 2);
    24fc:	1a08      	subs	r0, r1, r0
    24fe:	0040      	lsls	r0, r0, #1
    2500:	47b0      	blx	r6
    2502:	0880      	lsrs	r0, r0, #2
    2504:	4b19      	ldr	r3, [pc, #100]	; (256c <main+0xe4>)
    2506:	8018      	strh	r0, [r3, #0]
		}

		if(active_voices[0].v_counter < active_voices[0].v_period)
    2508:	4a15      	ldr	r2, [pc, #84]	; (2560 <main+0xd8>)
    250a:	6853      	ldr	r3, [r2, #4]
    250c:	6892      	ldr	r2, [r2, #8]
    250e:	4293      	cmp	r3, r2
    2510:	da03      	bge.n	251a <main+0x92>
		{
			active_voices[0].v_counter++;
    2512:	3301      	adds	r3, #1
    2514:	4a12      	ldr	r2, [pc, #72]	; (2560 <main+0xd8>)
    2516:	6053      	str	r3, [r2, #4]
    2518:	e002      	b.n	2520 <main+0x98>
		}
		else active_voices[0].v_counter = 0;
    251a:	2200      	movs	r2, #0
    251c:	4b10      	ldr	r3, [pc, #64]	; (2560 <main+0xd8>)
    251e:	605a      	str	r2, [r3, #4]

		write_to_MCP4821(sample_buffer*3);
    2520:	4b12      	ldr	r3, [pc, #72]	; (256c <main+0xe4>)
    2522:	8818      	ldrh	r0, [r3, #0]
    2524:	0043      	lsls	r3, r0, #1
    2526:	18c0      	adds	r0, r0, r3
    2528:	b280      	uxth	r0, r0
    252a:	4b11      	ldr	r3, [pc, #68]	; (2570 <main+0xe8>)
    252c:	4798      	blx	r3
	}
    252e:	e7d4      	b.n	24da <main+0x52>
    2530:	00001e55 	.word	0x00001e55
    2534:	000020fd 	.word	0x000020fd
    2538:	00002149 	.word	0x00002149
    253c:	00002191 	.word	0x00002191
    2540:	000021c1 	.word	0x000021c1
    2544:	000021e5 	.word	0x000021e5
    2548:	000022d1 	.word	0x000022d1
    254c:	000022a9 	.word	0x000022a9
    2550:	20000004 	.word	0x20000004
    2554:	000023c9 	.word	0x000023c9
    2558:	00003d1c 	.word	0x00003d1c
    255c:	00003311 	.word	0x00003311
    2560:	2000016c 	.word	0x2000016c
    2564:	200001d4 	.word	0x200001d4
    2568:	00002091 	.word	0x00002091
    256c:	20000168 	.word	0x20000168
    2570:	00002045 	.word	0x00002045

00002574 <__aeabi_uidiv>:
    2574:	2200      	movs	r2, #0
    2576:	0843      	lsrs	r3, r0, #1
    2578:	428b      	cmp	r3, r1
    257a:	d374      	bcc.n	2666 <__aeabi_uidiv+0xf2>
    257c:	0903      	lsrs	r3, r0, #4
    257e:	428b      	cmp	r3, r1
    2580:	d35f      	bcc.n	2642 <__aeabi_uidiv+0xce>
    2582:	0a03      	lsrs	r3, r0, #8
    2584:	428b      	cmp	r3, r1
    2586:	d344      	bcc.n	2612 <__aeabi_uidiv+0x9e>
    2588:	0b03      	lsrs	r3, r0, #12
    258a:	428b      	cmp	r3, r1
    258c:	d328      	bcc.n	25e0 <__aeabi_uidiv+0x6c>
    258e:	0c03      	lsrs	r3, r0, #16
    2590:	428b      	cmp	r3, r1
    2592:	d30d      	bcc.n	25b0 <__aeabi_uidiv+0x3c>
    2594:	22ff      	movs	r2, #255	; 0xff
    2596:	0209      	lsls	r1, r1, #8
    2598:	ba12      	rev	r2, r2
    259a:	0c03      	lsrs	r3, r0, #16
    259c:	428b      	cmp	r3, r1
    259e:	d302      	bcc.n	25a6 <__aeabi_uidiv+0x32>
    25a0:	1212      	asrs	r2, r2, #8
    25a2:	0209      	lsls	r1, r1, #8
    25a4:	d065      	beq.n	2672 <__aeabi_uidiv+0xfe>
    25a6:	0b03      	lsrs	r3, r0, #12
    25a8:	428b      	cmp	r3, r1
    25aa:	d319      	bcc.n	25e0 <__aeabi_uidiv+0x6c>
    25ac:	e000      	b.n	25b0 <__aeabi_uidiv+0x3c>
    25ae:	0a09      	lsrs	r1, r1, #8
    25b0:	0bc3      	lsrs	r3, r0, #15
    25b2:	428b      	cmp	r3, r1
    25b4:	d301      	bcc.n	25ba <__aeabi_uidiv+0x46>
    25b6:	03cb      	lsls	r3, r1, #15
    25b8:	1ac0      	subs	r0, r0, r3
    25ba:	4152      	adcs	r2, r2
    25bc:	0b83      	lsrs	r3, r0, #14
    25be:	428b      	cmp	r3, r1
    25c0:	d301      	bcc.n	25c6 <__aeabi_uidiv+0x52>
    25c2:	038b      	lsls	r3, r1, #14
    25c4:	1ac0      	subs	r0, r0, r3
    25c6:	4152      	adcs	r2, r2
    25c8:	0b43      	lsrs	r3, r0, #13
    25ca:	428b      	cmp	r3, r1
    25cc:	d301      	bcc.n	25d2 <__aeabi_uidiv+0x5e>
    25ce:	034b      	lsls	r3, r1, #13
    25d0:	1ac0      	subs	r0, r0, r3
    25d2:	4152      	adcs	r2, r2
    25d4:	0b03      	lsrs	r3, r0, #12
    25d6:	428b      	cmp	r3, r1
    25d8:	d301      	bcc.n	25de <__aeabi_uidiv+0x6a>
    25da:	030b      	lsls	r3, r1, #12
    25dc:	1ac0      	subs	r0, r0, r3
    25de:	4152      	adcs	r2, r2
    25e0:	0ac3      	lsrs	r3, r0, #11
    25e2:	428b      	cmp	r3, r1
    25e4:	d301      	bcc.n	25ea <__aeabi_uidiv+0x76>
    25e6:	02cb      	lsls	r3, r1, #11
    25e8:	1ac0      	subs	r0, r0, r3
    25ea:	4152      	adcs	r2, r2
    25ec:	0a83      	lsrs	r3, r0, #10
    25ee:	428b      	cmp	r3, r1
    25f0:	d301      	bcc.n	25f6 <__aeabi_uidiv+0x82>
    25f2:	028b      	lsls	r3, r1, #10
    25f4:	1ac0      	subs	r0, r0, r3
    25f6:	4152      	adcs	r2, r2
    25f8:	0a43      	lsrs	r3, r0, #9
    25fa:	428b      	cmp	r3, r1
    25fc:	d301      	bcc.n	2602 <__aeabi_uidiv+0x8e>
    25fe:	024b      	lsls	r3, r1, #9
    2600:	1ac0      	subs	r0, r0, r3
    2602:	4152      	adcs	r2, r2
    2604:	0a03      	lsrs	r3, r0, #8
    2606:	428b      	cmp	r3, r1
    2608:	d301      	bcc.n	260e <__aeabi_uidiv+0x9a>
    260a:	020b      	lsls	r3, r1, #8
    260c:	1ac0      	subs	r0, r0, r3
    260e:	4152      	adcs	r2, r2
    2610:	d2cd      	bcs.n	25ae <__aeabi_uidiv+0x3a>
    2612:	09c3      	lsrs	r3, r0, #7
    2614:	428b      	cmp	r3, r1
    2616:	d301      	bcc.n	261c <__aeabi_uidiv+0xa8>
    2618:	01cb      	lsls	r3, r1, #7
    261a:	1ac0      	subs	r0, r0, r3
    261c:	4152      	adcs	r2, r2
    261e:	0983      	lsrs	r3, r0, #6
    2620:	428b      	cmp	r3, r1
    2622:	d301      	bcc.n	2628 <__aeabi_uidiv+0xb4>
    2624:	018b      	lsls	r3, r1, #6
    2626:	1ac0      	subs	r0, r0, r3
    2628:	4152      	adcs	r2, r2
    262a:	0943      	lsrs	r3, r0, #5
    262c:	428b      	cmp	r3, r1
    262e:	d301      	bcc.n	2634 <__aeabi_uidiv+0xc0>
    2630:	014b      	lsls	r3, r1, #5
    2632:	1ac0      	subs	r0, r0, r3
    2634:	4152      	adcs	r2, r2
    2636:	0903      	lsrs	r3, r0, #4
    2638:	428b      	cmp	r3, r1
    263a:	d301      	bcc.n	2640 <__aeabi_uidiv+0xcc>
    263c:	010b      	lsls	r3, r1, #4
    263e:	1ac0      	subs	r0, r0, r3
    2640:	4152      	adcs	r2, r2
    2642:	08c3      	lsrs	r3, r0, #3
    2644:	428b      	cmp	r3, r1
    2646:	d301      	bcc.n	264c <__aeabi_uidiv+0xd8>
    2648:	00cb      	lsls	r3, r1, #3
    264a:	1ac0      	subs	r0, r0, r3
    264c:	4152      	adcs	r2, r2
    264e:	0883      	lsrs	r3, r0, #2
    2650:	428b      	cmp	r3, r1
    2652:	d301      	bcc.n	2658 <__aeabi_uidiv+0xe4>
    2654:	008b      	lsls	r3, r1, #2
    2656:	1ac0      	subs	r0, r0, r3
    2658:	4152      	adcs	r2, r2
    265a:	0843      	lsrs	r3, r0, #1
    265c:	428b      	cmp	r3, r1
    265e:	d301      	bcc.n	2664 <__aeabi_uidiv+0xf0>
    2660:	004b      	lsls	r3, r1, #1
    2662:	1ac0      	subs	r0, r0, r3
    2664:	4152      	adcs	r2, r2
    2666:	1a41      	subs	r1, r0, r1
    2668:	d200      	bcs.n	266c <__aeabi_uidiv+0xf8>
    266a:	4601      	mov	r1, r0
    266c:	4152      	adcs	r2, r2
    266e:	4610      	mov	r0, r2
    2670:	4770      	bx	lr
    2672:	e7ff      	b.n	2674 <__aeabi_uidiv+0x100>
    2674:	b501      	push	{r0, lr}
    2676:	2000      	movs	r0, #0
    2678:	f000 f80c 	bl	2694 <__aeabi_idiv0>
    267c:	bd02      	pop	{r1, pc}
    267e:	46c0      	nop			; (mov r8, r8)

00002680 <__aeabi_uidivmod>:
    2680:	2900      	cmp	r1, #0
    2682:	d0f7      	beq.n	2674 <__aeabi_uidiv+0x100>
    2684:	b503      	push	{r0, r1, lr}
    2686:	f7ff ff75 	bl	2574 <__aeabi_uidiv>
    268a:	bc0e      	pop	{r1, r2, r3}
    268c:	4342      	muls	r2, r0
    268e:	1a89      	subs	r1, r1, r2
    2690:	4718      	bx	r3
    2692:	46c0      	nop			; (mov r8, r8)

00002694 <__aeabi_idiv0>:
    2694:	4770      	bx	lr
    2696:	46c0      	nop			; (mov r8, r8)

00002698 <__aeabi_lmul>:
    2698:	b5f0      	push	{r4, r5, r6, r7, lr}
    269a:	464f      	mov	r7, r9
    269c:	4646      	mov	r6, r8
    269e:	0405      	lsls	r5, r0, #16
    26a0:	0c2d      	lsrs	r5, r5, #16
    26a2:	1c2c      	adds	r4, r5, #0
    26a4:	b4c0      	push	{r6, r7}
    26a6:	0417      	lsls	r7, r2, #16
    26a8:	0c16      	lsrs	r6, r2, #16
    26aa:	0c3f      	lsrs	r7, r7, #16
    26ac:	4699      	mov	r9, r3
    26ae:	0c03      	lsrs	r3, r0, #16
    26b0:	437c      	muls	r4, r7
    26b2:	4375      	muls	r5, r6
    26b4:	435f      	muls	r7, r3
    26b6:	4373      	muls	r3, r6
    26b8:	197d      	adds	r5, r7, r5
    26ba:	0c26      	lsrs	r6, r4, #16
    26bc:	19ad      	adds	r5, r5, r6
    26be:	469c      	mov	ip, r3
    26c0:	42af      	cmp	r7, r5
    26c2:	d903      	bls.n	26cc <__aeabi_lmul+0x34>
    26c4:	2380      	movs	r3, #128	; 0x80
    26c6:	025b      	lsls	r3, r3, #9
    26c8:	4698      	mov	r8, r3
    26ca:	44c4      	add	ip, r8
    26cc:	464b      	mov	r3, r9
    26ce:	4351      	muls	r1, r2
    26d0:	4343      	muls	r3, r0
    26d2:	0424      	lsls	r4, r4, #16
    26d4:	0c2e      	lsrs	r6, r5, #16
    26d6:	0c24      	lsrs	r4, r4, #16
    26d8:	042d      	lsls	r5, r5, #16
    26da:	4466      	add	r6, ip
    26dc:	192c      	adds	r4, r5, r4
    26de:	1859      	adds	r1, r3, r1
    26e0:	1989      	adds	r1, r1, r6
    26e2:	1c20      	adds	r0, r4, #0
    26e4:	bc0c      	pop	{r2, r3}
    26e6:	4690      	mov	r8, r2
    26e8:	4699      	mov	r9, r3
    26ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000026ec <__aeabi_f2uiz>:
    26ec:	219e      	movs	r1, #158	; 0x9e
    26ee:	b510      	push	{r4, lr}
    26f0:	05c9      	lsls	r1, r1, #23
    26f2:	1c04      	adds	r4, r0, #0
    26f4:	f000 fc92 	bl	301c <__aeabi_fcmpge>
    26f8:	2800      	cmp	r0, #0
    26fa:	d103      	bne.n	2704 <__aeabi_f2uiz+0x18>
    26fc:	1c20      	adds	r0, r4, #0
    26fe:	f000 fbf5 	bl	2eec <__aeabi_f2iz>
    2702:	bd10      	pop	{r4, pc}
    2704:	219e      	movs	r1, #158	; 0x9e
    2706:	1c20      	adds	r0, r4, #0
    2708:	05c9      	lsls	r1, r1, #23
    270a:	f000 fa71 	bl	2bf0 <__aeabi_fsub>
    270e:	f000 fbed 	bl	2eec <__aeabi_f2iz>
    2712:	2380      	movs	r3, #128	; 0x80
    2714:	061b      	lsls	r3, r3, #24
    2716:	469c      	mov	ip, r3
    2718:	4460      	add	r0, ip
    271a:	e7f2      	b.n	2702 <__aeabi_f2uiz+0x16>

0000271c <__aeabi_fdiv>:
    271c:	b5f0      	push	{r4, r5, r6, r7, lr}
    271e:	4656      	mov	r6, sl
    2720:	464d      	mov	r5, r9
    2722:	465f      	mov	r7, fp
    2724:	4644      	mov	r4, r8
    2726:	b4f0      	push	{r4, r5, r6, r7}
    2728:	0243      	lsls	r3, r0, #9
    272a:	0045      	lsls	r5, r0, #1
    272c:	0fc7      	lsrs	r7, r0, #31
    272e:	b083      	sub	sp, #12
    2730:	468a      	mov	sl, r1
    2732:	0a5c      	lsrs	r4, r3, #9
    2734:	0e2e      	lsrs	r6, r5, #24
    2736:	46b9      	mov	r9, r7
    2738:	d041      	beq.n	27be <__aeabi_fdiv+0xa2>
    273a:	2eff      	cmp	r6, #255	; 0xff
    273c:	d026      	beq.n	278c <__aeabi_fdiv+0x70>
    273e:	2380      	movs	r3, #128	; 0x80
    2740:	041b      	lsls	r3, r3, #16
    2742:	4323      	orrs	r3, r4
    2744:	00dc      	lsls	r4, r3, #3
    2746:	2300      	movs	r3, #0
    2748:	4698      	mov	r8, r3
    274a:	469b      	mov	fp, r3
    274c:	3e7f      	subs	r6, #127	; 0x7f
    274e:	4653      	mov	r3, sl
    2750:	025b      	lsls	r3, r3, #9
    2752:	0a5d      	lsrs	r5, r3, #9
    2754:	4653      	mov	r3, sl
    2756:	005a      	lsls	r2, r3, #1
    2758:	0fdb      	lsrs	r3, r3, #31
    275a:	0e12      	lsrs	r2, r2, #24
    275c:	469a      	mov	sl, r3
    275e:	d039      	beq.n	27d4 <__aeabi_fdiv+0xb8>
    2760:	2aff      	cmp	r2, #255	; 0xff
    2762:	d033      	beq.n	27cc <__aeabi_fdiv+0xb0>
    2764:	2380      	movs	r3, #128	; 0x80
    2766:	041b      	lsls	r3, r3, #16
    2768:	432b      	orrs	r3, r5
    276a:	00dd      	lsls	r5, r3, #3
    276c:	2300      	movs	r3, #0
    276e:	3a7f      	subs	r2, #127	; 0x7f
    2770:	4651      	mov	r1, sl
    2772:	1ab2      	subs	r2, r6, r2
    2774:	4646      	mov	r6, r8
    2776:	4079      	eors	r1, r7
    2778:	1c08      	adds	r0, r1, #0
    277a:	9201      	str	r2, [sp, #4]
    277c:	431e      	orrs	r6, r3
    277e:	2e0f      	cmp	r6, #15
    2780:	d900      	bls.n	2784 <__aeabi_fdiv+0x68>
    2782:	e076      	b.n	2872 <__aeabi_fdiv+0x156>
    2784:	4a7e      	ldr	r2, [pc, #504]	; (2980 <__aeabi_fdiv+0x264>)
    2786:	00b6      	lsls	r6, r6, #2
    2788:	5996      	ldr	r6, [r2, r6]
    278a:	46b7      	mov	pc, r6
    278c:	2c00      	cmp	r4, #0
    278e:	d130      	bne.n	27f2 <__aeabi_fdiv+0xd6>
    2790:	2308      	movs	r3, #8
    2792:	4698      	mov	r8, r3
    2794:	3b06      	subs	r3, #6
    2796:	469b      	mov	fp, r3
    2798:	e7d9      	b.n	274e <__aeabi_fdiv+0x32>
    279a:	2380      	movs	r3, #128	; 0x80
    279c:	2100      	movs	r1, #0
    279e:	03db      	lsls	r3, r3, #15
    27a0:	24ff      	movs	r4, #255	; 0xff
    27a2:	025b      	lsls	r3, r3, #9
    27a4:	05e4      	lsls	r4, r4, #23
    27a6:	0a5b      	lsrs	r3, r3, #9
    27a8:	07c9      	lsls	r1, r1, #31
    27aa:	4323      	orrs	r3, r4
    27ac:	430b      	orrs	r3, r1
    27ae:	1c18      	adds	r0, r3, #0
    27b0:	b003      	add	sp, #12
    27b2:	bc3c      	pop	{r2, r3, r4, r5}
    27b4:	4690      	mov	r8, r2
    27b6:	4699      	mov	r9, r3
    27b8:	46a2      	mov	sl, r4
    27ba:	46ab      	mov	fp, r5
    27bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27be:	2c00      	cmp	r4, #0
    27c0:	d128      	bne.n	2814 <__aeabi_fdiv+0xf8>
    27c2:	2304      	movs	r3, #4
    27c4:	4698      	mov	r8, r3
    27c6:	3b03      	subs	r3, #3
    27c8:	469b      	mov	fp, r3
    27ca:	e7c0      	b.n	274e <__aeabi_fdiv+0x32>
    27cc:	2d00      	cmp	r5, #0
    27ce:	d11f      	bne.n	2810 <__aeabi_fdiv+0xf4>
    27d0:	2302      	movs	r3, #2
    27d2:	e002      	b.n	27da <__aeabi_fdiv+0xbe>
    27d4:	2d00      	cmp	r5, #0
    27d6:	d111      	bne.n	27fc <__aeabi_fdiv+0xe0>
    27d8:	2301      	movs	r3, #1
    27da:	1ab2      	subs	r2, r6, r2
    27dc:	4650      	mov	r0, sl
    27de:	4646      	mov	r6, r8
    27e0:	4078      	eors	r0, r7
    27e2:	9201      	str	r2, [sp, #4]
    27e4:	431e      	orrs	r6, r3
    27e6:	2e0f      	cmp	r6, #15
    27e8:	d827      	bhi.n	283a <__aeabi_fdiv+0x11e>
    27ea:	4966      	ldr	r1, [pc, #408]	; (2984 <__aeabi_fdiv+0x268>)
    27ec:	00b6      	lsls	r6, r6, #2
    27ee:	5989      	ldr	r1, [r1, r6]
    27f0:	468f      	mov	pc, r1
    27f2:	230c      	movs	r3, #12
    27f4:	4698      	mov	r8, r3
    27f6:	3b09      	subs	r3, #9
    27f8:	469b      	mov	fp, r3
    27fa:	e7a8      	b.n	274e <__aeabi_fdiv+0x32>
    27fc:	1c28      	adds	r0, r5, #0
    27fe:	f000 fc17 	bl	3030 <__clzsi2>
    2802:	2276      	movs	r2, #118	; 0x76
    2804:	1f43      	subs	r3, r0, #5
    2806:	4252      	negs	r2, r2
    2808:	409d      	lsls	r5, r3
    280a:	1a12      	subs	r2, r2, r0
    280c:	2300      	movs	r3, #0
    280e:	e7af      	b.n	2770 <__aeabi_fdiv+0x54>
    2810:	2303      	movs	r3, #3
    2812:	e7ad      	b.n	2770 <__aeabi_fdiv+0x54>
    2814:	1c20      	adds	r0, r4, #0
    2816:	f000 fc0b 	bl	3030 <__clzsi2>
    281a:	1f43      	subs	r3, r0, #5
    281c:	409c      	lsls	r4, r3
    281e:	2376      	movs	r3, #118	; 0x76
    2820:	425b      	negs	r3, r3
    2822:	1a1e      	subs	r6, r3, r0
    2824:	2300      	movs	r3, #0
    2826:	4698      	mov	r8, r3
    2828:	469b      	mov	fp, r3
    282a:	e790      	b.n	274e <__aeabi_fdiv+0x32>
    282c:	2500      	movs	r5, #0
    282e:	46d1      	mov	r9, sl
    2830:	469b      	mov	fp, r3
    2832:	465b      	mov	r3, fp
    2834:	4648      	mov	r0, r9
    2836:	2b02      	cmp	r3, #2
    2838:	d16f      	bne.n	291a <__aeabi_fdiv+0x1fe>
    283a:	2101      	movs	r1, #1
    283c:	24ff      	movs	r4, #255	; 0xff
    283e:	4001      	ands	r1, r0
    2840:	2300      	movs	r3, #0
    2842:	e7ae      	b.n	27a2 <__aeabi_fdiv+0x86>
    2844:	237e      	movs	r3, #126	; 0x7e
    2846:	9a01      	ldr	r2, [sp, #4]
    2848:	425b      	negs	r3, r3
    284a:	1a9b      	subs	r3, r3, r2
    284c:	2b1b      	cmp	r3, #27
    284e:	dd6d      	ble.n	292c <__aeabi_fdiv+0x210>
    2850:	2101      	movs	r1, #1
    2852:	464b      	mov	r3, r9
    2854:	4019      	ands	r1, r3
    2856:	2400      	movs	r4, #0
    2858:	2300      	movs	r3, #0
    285a:	e7a2      	b.n	27a2 <__aeabi_fdiv+0x86>
    285c:	2380      	movs	r3, #128	; 0x80
    285e:	03db      	lsls	r3, r3, #15
    2860:	421c      	tst	r4, r3
    2862:	d149      	bne.n	28f8 <__aeabi_fdiv+0x1dc>
    2864:	2380      	movs	r3, #128	; 0x80
    2866:	03db      	lsls	r3, r3, #15
    2868:	4323      	orrs	r3, r4
    286a:	025b      	lsls	r3, r3, #9
    286c:	0a5b      	lsrs	r3, r3, #9
    286e:	1c39      	adds	r1, r7, #0
    2870:	e796      	b.n	27a0 <__aeabi_fdiv+0x84>
    2872:	0163      	lsls	r3, r4, #5
    2874:	016d      	lsls	r5, r5, #5
    2876:	42ab      	cmp	r3, r5
    2878:	d337      	bcc.n	28ea <__aeabi_fdiv+0x1ce>
    287a:	4689      	mov	r9, r1
    287c:	201a      	movs	r0, #26
    287e:	2101      	movs	r1, #1
    2880:	1b5b      	subs	r3, r3, r5
    2882:	2401      	movs	r4, #1
    2884:	1c1e      	adds	r6, r3, #0
    2886:	0049      	lsls	r1, r1, #1
    2888:	005b      	lsls	r3, r3, #1
    288a:	2e00      	cmp	r6, #0
    288c:	db01      	blt.n	2892 <__aeabi_fdiv+0x176>
    288e:	42ab      	cmp	r3, r5
    2890:	d301      	bcc.n	2896 <__aeabi_fdiv+0x17a>
    2892:	1b5b      	subs	r3, r3, r5
    2894:	4321      	orrs	r1, r4
    2896:	3801      	subs	r0, #1
    2898:	2800      	cmp	r0, #0
    289a:	d1f3      	bne.n	2884 <__aeabi_fdiv+0x168>
    289c:	1e58      	subs	r0, r3, #1
    289e:	4183      	sbcs	r3, r0
    28a0:	430b      	orrs	r3, r1
    28a2:	1c1d      	adds	r5, r3, #0
    28a4:	9c01      	ldr	r4, [sp, #4]
    28a6:	347f      	adds	r4, #127	; 0x7f
    28a8:	2c00      	cmp	r4, #0
    28aa:	ddcb      	ble.n	2844 <__aeabi_fdiv+0x128>
    28ac:	076b      	lsls	r3, r5, #29
    28ae:	d004      	beq.n	28ba <__aeabi_fdiv+0x19e>
    28b0:	230f      	movs	r3, #15
    28b2:	402b      	ands	r3, r5
    28b4:	2b04      	cmp	r3, #4
    28b6:	d000      	beq.n	28ba <__aeabi_fdiv+0x19e>
    28b8:	3504      	adds	r5, #4
    28ba:	012b      	lsls	r3, r5, #4
    28bc:	d504      	bpl.n	28c8 <__aeabi_fdiv+0x1ac>
    28be:	9a01      	ldr	r2, [sp, #4]
    28c0:	4b31      	ldr	r3, [pc, #196]	; (2988 <__aeabi_fdiv+0x26c>)
    28c2:	3280      	adds	r2, #128	; 0x80
    28c4:	1c14      	adds	r4, r2, #0
    28c6:	401d      	ands	r5, r3
    28c8:	2cfe      	cmp	r4, #254	; 0xfe
    28ca:	dd07      	ble.n	28dc <__aeabi_fdiv+0x1c0>
    28cc:	464b      	mov	r3, r9
    28ce:	2101      	movs	r1, #1
    28d0:	24ff      	movs	r4, #255	; 0xff
    28d2:	4019      	ands	r1, r3
    28d4:	2300      	movs	r3, #0
    28d6:	e764      	b.n	27a2 <__aeabi_fdiv+0x86>
    28d8:	1c25      	adds	r5, r4, #0
    28da:	e7aa      	b.n	2832 <__aeabi_fdiv+0x116>
    28dc:	2101      	movs	r1, #1
    28de:	464a      	mov	r2, r9
    28e0:	01ab      	lsls	r3, r5, #6
    28e2:	0a5b      	lsrs	r3, r3, #9
    28e4:	b2e4      	uxtb	r4, r4
    28e6:	4011      	ands	r1, r2
    28e8:	e75b      	b.n	27a2 <__aeabi_fdiv+0x86>
    28ea:	9a01      	ldr	r2, [sp, #4]
    28ec:	4689      	mov	r9, r1
    28ee:	3a01      	subs	r2, #1
    28f0:	9201      	str	r2, [sp, #4]
    28f2:	201b      	movs	r0, #27
    28f4:	2100      	movs	r1, #0
    28f6:	e7c4      	b.n	2882 <__aeabi_fdiv+0x166>
    28f8:	421d      	tst	r5, r3
    28fa:	d007      	beq.n	290c <__aeabi_fdiv+0x1f0>
    28fc:	4323      	orrs	r3, r4
    28fe:	025b      	lsls	r3, r3, #9
    2900:	0a5b      	lsrs	r3, r3, #9
    2902:	1c39      	adds	r1, r7, #0
    2904:	e74c      	b.n	27a0 <__aeabi_fdiv+0x84>
    2906:	2500      	movs	r5, #0
    2908:	0263      	lsls	r3, r4, #9
    290a:	d5ab      	bpl.n	2864 <__aeabi_fdiv+0x148>
    290c:	2380      	movs	r3, #128	; 0x80
    290e:	03db      	lsls	r3, r3, #15
    2910:	432b      	orrs	r3, r5
    2912:	025b      	lsls	r3, r3, #9
    2914:	0a5b      	lsrs	r3, r3, #9
    2916:	4651      	mov	r1, sl
    2918:	e742      	b.n	27a0 <__aeabi_fdiv+0x84>
    291a:	2b03      	cmp	r3, #3
    291c:	d025      	beq.n	296a <__aeabi_fdiv+0x24e>
    291e:	2b01      	cmp	r3, #1
    2920:	d1c0      	bne.n	28a4 <__aeabi_fdiv+0x188>
    2922:	2101      	movs	r1, #1
    2924:	2400      	movs	r4, #0
    2926:	4001      	ands	r1, r0
    2928:	2300      	movs	r3, #0
    292a:	e73a      	b.n	27a2 <__aeabi_fdiv+0x86>
    292c:	1c29      	adds	r1, r5, #0
    292e:	40d9      	lsrs	r1, r3
    2930:	1c2b      	adds	r3, r5, #0
    2932:	9a01      	ldr	r2, [sp, #4]
    2934:	329e      	adds	r2, #158	; 0x9e
    2936:	4093      	lsls	r3, r2
    2938:	1e5d      	subs	r5, r3, #1
    293a:	41ab      	sbcs	r3, r5
    293c:	430b      	orrs	r3, r1
    293e:	075a      	lsls	r2, r3, #29
    2940:	d004      	beq.n	294c <__aeabi_fdiv+0x230>
    2942:	220f      	movs	r2, #15
    2944:	401a      	ands	r2, r3
    2946:	2a04      	cmp	r2, #4
    2948:	d000      	beq.n	294c <__aeabi_fdiv+0x230>
    294a:	3304      	adds	r3, #4
    294c:	015a      	lsls	r2, r3, #5
    294e:	d505      	bpl.n	295c <__aeabi_fdiv+0x240>
    2950:	464b      	mov	r3, r9
    2952:	2101      	movs	r1, #1
    2954:	2401      	movs	r4, #1
    2956:	4019      	ands	r1, r3
    2958:	2300      	movs	r3, #0
    295a:	e722      	b.n	27a2 <__aeabi_fdiv+0x86>
    295c:	2101      	movs	r1, #1
    295e:	464a      	mov	r2, r9
    2960:	019b      	lsls	r3, r3, #6
    2962:	0a5b      	lsrs	r3, r3, #9
    2964:	4011      	ands	r1, r2
    2966:	2400      	movs	r4, #0
    2968:	e71b      	b.n	27a2 <__aeabi_fdiv+0x86>
    296a:	2380      	movs	r3, #128	; 0x80
    296c:	2101      	movs	r1, #1
    296e:	464a      	mov	r2, r9
    2970:	03db      	lsls	r3, r3, #15
    2972:	432b      	orrs	r3, r5
    2974:	025b      	lsls	r3, r3, #9
    2976:	400a      	ands	r2, r1
    2978:	0a5b      	lsrs	r3, r3, #9
    297a:	1c11      	adds	r1, r2, #0
    297c:	e710      	b.n	27a0 <__aeabi_fdiv+0x84>
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	00003d2c 	.word	0x00003d2c
    2984:	00003d6c 	.word	0x00003d6c
    2988:	f7ffffff 	.word	0xf7ffffff

0000298c <__aeabi_fmul>:
    298c:	b5f0      	push	{r4, r5, r6, r7, lr}
    298e:	465f      	mov	r7, fp
    2990:	4656      	mov	r6, sl
    2992:	464d      	mov	r5, r9
    2994:	4644      	mov	r4, r8
    2996:	b4f0      	push	{r4, r5, r6, r7}
    2998:	0245      	lsls	r5, r0, #9
    299a:	0046      	lsls	r6, r0, #1
    299c:	0fc4      	lsrs	r4, r0, #31
    299e:	b083      	sub	sp, #12
    29a0:	1c0f      	adds	r7, r1, #0
    29a2:	0a6d      	lsrs	r5, r5, #9
    29a4:	0e36      	lsrs	r6, r6, #24
    29a6:	46a3      	mov	fp, r4
    29a8:	d045      	beq.n	2a36 <__aeabi_fmul+0xaa>
    29aa:	2eff      	cmp	r6, #255	; 0xff
    29ac:	d025      	beq.n	29fa <__aeabi_fmul+0x6e>
    29ae:	2380      	movs	r3, #128	; 0x80
    29b0:	041b      	lsls	r3, r3, #16
    29b2:	431d      	orrs	r5, r3
    29b4:	2300      	movs	r3, #0
    29b6:	469a      	mov	sl, r3
    29b8:	00ed      	lsls	r5, r5, #3
    29ba:	3e7f      	subs	r6, #127	; 0x7f
    29bc:	9301      	str	r3, [sp, #4]
    29be:	027b      	lsls	r3, r7, #9
    29c0:	0a5b      	lsrs	r3, r3, #9
    29c2:	4698      	mov	r8, r3
    29c4:	0078      	lsls	r0, r7, #1
    29c6:	0ffb      	lsrs	r3, r7, #31
    29c8:	0e00      	lsrs	r0, r0, #24
    29ca:	4699      	mov	r9, r3
    29cc:	d040      	beq.n	2a50 <__aeabi_fmul+0xc4>
    29ce:	28ff      	cmp	r0, #255	; 0xff
    29d0:	d038      	beq.n	2a44 <__aeabi_fmul+0xb8>
    29d2:	2380      	movs	r3, #128	; 0x80
    29d4:	4642      	mov	r2, r8
    29d6:	041b      	lsls	r3, r3, #16
    29d8:	4313      	orrs	r3, r2
    29da:	00db      	lsls	r3, r3, #3
    29dc:	4698      	mov	r8, r3
    29de:	2300      	movs	r3, #0
    29e0:	387f      	subs	r0, #127	; 0x7f
    29e2:	464a      	mov	r2, r9
    29e4:	9f01      	ldr	r7, [sp, #4]
    29e6:	1830      	adds	r0, r6, r0
    29e8:	4062      	eors	r2, r4
    29ea:	1c41      	adds	r1, r0, #1
    29ec:	431f      	orrs	r7, r3
    29ee:	2f0f      	cmp	r7, #15
    29f0:	d869      	bhi.n	2ac6 <__aeabi_fmul+0x13a>
    29f2:	4e7d      	ldr	r6, [pc, #500]	; (2be8 <__aeabi_fmul+0x25c>)
    29f4:	00bf      	lsls	r7, r7, #2
    29f6:	59f6      	ldr	r6, [r6, r7]
    29f8:	46b7      	mov	pc, r6
    29fa:	2d00      	cmp	r5, #0
    29fc:	d145      	bne.n	2a8a <__aeabi_fmul+0xfe>
    29fe:	2308      	movs	r3, #8
    2a00:	9301      	str	r3, [sp, #4]
    2a02:	3b06      	subs	r3, #6
    2a04:	469a      	mov	sl, r3
    2a06:	e7da      	b.n	29be <__aeabi_fmul+0x32>
    2a08:	4693      	mov	fp, r2
    2a0a:	4653      	mov	r3, sl
    2a0c:	2b02      	cmp	r3, #2
    2a0e:	d12f      	bne.n	2a70 <__aeabi_fmul+0xe4>
    2a10:	465b      	mov	r3, fp
    2a12:	2401      	movs	r4, #1
    2a14:	2500      	movs	r5, #0
    2a16:	401c      	ands	r4, r3
    2a18:	23ff      	movs	r3, #255	; 0xff
    2a1a:	026d      	lsls	r5, r5, #9
    2a1c:	05db      	lsls	r3, r3, #23
    2a1e:	0a6d      	lsrs	r5, r5, #9
    2a20:	07e4      	lsls	r4, r4, #31
    2a22:	431d      	orrs	r5, r3
    2a24:	4325      	orrs	r5, r4
    2a26:	1c28      	adds	r0, r5, #0
    2a28:	b003      	add	sp, #12
    2a2a:	bc3c      	pop	{r2, r3, r4, r5}
    2a2c:	4690      	mov	r8, r2
    2a2e:	4699      	mov	r9, r3
    2a30:	46a2      	mov	sl, r4
    2a32:	46ab      	mov	fp, r5
    2a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a36:	2d00      	cmp	r5, #0
    2a38:	d12c      	bne.n	2a94 <__aeabi_fmul+0x108>
    2a3a:	2304      	movs	r3, #4
    2a3c:	9301      	str	r3, [sp, #4]
    2a3e:	3b03      	subs	r3, #3
    2a40:	469a      	mov	sl, r3
    2a42:	e7bc      	b.n	29be <__aeabi_fmul+0x32>
    2a44:	4643      	mov	r3, r8
    2a46:	425a      	negs	r2, r3
    2a48:	4153      	adcs	r3, r2
    2a4a:	2203      	movs	r2, #3
    2a4c:	1ad3      	subs	r3, r2, r3
    2a4e:	e7c8      	b.n	29e2 <__aeabi_fmul+0x56>
    2a50:	4642      	mov	r2, r8
    2a52:	2301      	movs	r3, #1
    2a54:	2a00      	cmp	r2, #0
    2a56:	d0c4      	beq.n	29e2 <__aeabi_fmul+0x56>
    2a58:	4640      	mov	r0, r8
    2a5a:	f000 fae9 	bl	3030 <__clzsi2>
    2a5e:	4642      	mov	r2, r8
    2a60:	1f43      	subs	r3, r0, #5
    2a62:	409a      	lsls	r2, r3
    2a64:	2376      	movs	r3, #118	; 0x76
    2a66:	425b      	negs	r3, r3
    2a68:	1a18      	subs	r0, r3, r0
    2a6a:	4690      	mov	r8, r2
    2a6c:	2300      	movs	r3, #0
    2a6e:	e7b8      	b.n	29e2 <__aeabi_fmul+0x56>
    2a70:	2b03      	cmp	r3, #3
    2a72:	d100      	bne.n	2a76 <__aeabi_fmul+0xea>
    2a74:	e0ad      	b.n	2bd2 <__aeabi_fmul+0x246>
    2a76:	2b01      	cmp	r3, #1
    2a78:	d000      	beq.n	2a7c <__aeabi_fmul+0xf0>
    2a7a:	e08c      	b.n	2b96 <__aeabi_fmul+0x20a>
    2a7c:	465b      	mov	r3, fp
    2a7e:	4654      	mov	r4, sl
    2a80:	401c      	ands	r4, r3
    2a82:	b2e4      	uxtb	r4, r4
    2a84:	2300      	movs	r3, #0
    2a86:	2500      	movs	r5, #0
    2a88:	e7c7      	b.n	2a1a <__aeabi_fmul+0x8e>
    2a8a:	230c      	movs	r3, #12
    2a8c:	9301      	str	r3, [sp, #4]
    2a8e:	3b09      	subs	r3, #9
    2a90:	469a      	mov	sl, r3
    2a92:	e794      	b.n	29be <__aeabi_fmul+0x32>
    2a94:	1c28      	adds	r0, r5, #0
    2a96:	f000 facb 	bl	3030 <__clzsi2>
    2a9a:	2676      	movs	r6, #118	; 0x76
    2a9c:	1f43      	subs	r3, r0, #5
    2a9e:	409d      	lsls	r5, r3
    2aa0:	2300      	movs	r3, #0
    2aa2:	4276      	negs	r6, r6
    2aa4:	1a36      	subs	r6, r6, r0
    2aa6:	9301      	str	r3, [sp, #4]
    2aa8:	469a      	mov	sl, r3
    2aaa:	e788      	b.n	29be <__aeabi_fmul+0x32>
    2aac:	2580      	movs	r5, #128	; 0x80
    2aae:	2400      	movs	r4, #0
    2ab0:	03ed      	lsls	r5, r5, #15
    2ab2:	23ff      	movs	r3, #255	; 0xff
    2ab4:	e7b1      	b.n	2a1a <__aeabi_fmul+0x8e>
    2ab6:	4645      	mov	r5, r8
    2ab8:	46cb      	mov	fp, r9
    2aba:	469a      	mov	sl, r3
    2abc:	e7a5      	b.n	2a0a <__aeabi_fmul+0x7e>
    2abe:	4645      	mov	r5, r8
    2ac0:	4693      	mov	fp, r2
    2ac2:	469a      	mov	sl, r3
    2ac4:	e7a1      	b.n	2a0a <__aeabi_fmul+0x7e>
    2ac6:	4643      	mov	r3, r8
    2ac8:	042c      	lsls	r4, r5, #16
    2aca:	0c1b      	lsrs	r3, r3, #16
    2acc:	469c      	mov	ip, r3
    2ace:	0c23      	lsrs	r3, r4, #16
    2ad0:	4644      	mov	r4, r8
    2ad2:	0426      	lsls	r6, r4, #16
    2ad4:	1c1c      	adds	r4, r3, #0
    2ad6:	0c36      	lsrs	r6, r6, #16
    2ad8:	0c2f      	lsrs	r7, r5, #16
    2ada:	4374      	muls	r4, r6
    2adc:	1c35      	adds	r5, r6, #0
    2ade:	4666      	mov	r6, ip
    2ae0:	437d      	muls	r5, r7
    2ae2:	4373      	muls	r3, r6
    2ae4:	4377      	muls	r7, r6
    2ae6:	18eb      	adds	r3, r5, r3
    2ae8:	0c26      	lsrs	r6, r4, #16
    2aea:	199e      	adds	r6, r3, r6
    2aec:	42b5      	cmp	r5, r6
    2aee:	d903      	bls.n	2af8 <__aeabi_fmul+0x16c>
    2af0:	2380      	movs	r3, #128	; 0x80
    2af2:	025b      	lsls	r3, r3, #9
    2af4:	469c      	mov	ip, r3
    2af6:	4467      	add	r7, ip
    2af8:	0424      	lsls	r4, r4, #16
    2afa:	0433      	lsls	r3, r6, #16
    2afc:	0c24      	lsrs	r4, r4, #16
    2afe:	191b      	adds	r3, r3, r4
    2b00:	019d      	lsls	r5, r3, #6
    2b02:	1e6c      	subs	r4, r5, #1
    2b04:	41a5      	sbcs	r5, r4
    2b06:	0e9b      	lsrs	r3, r3, #26
    2b08:	0c36      	lsrs	r6, r6, #16
    2b0a:	432b      	orrs	r3, r5
    2b0c:	19bd      	adds	r5, r7, r6
    2b0e:	01ad      	lsls	r5, r5, #6
    2b10:	431d      	orrs	r5, r3
    2b12:	012b      	lsls	r3, r5, #4
    2b14:	d504      	bpl.n	2b20 <__aeabi_fmul+0x194>
    2b16:	2301      	movs	r3, #1
    2b18:	0868      	lsrs	r0, r5, #1
    2b1a:	401d      	ands	r5, r3
    2b1c:	4305      	orrs	r5, r0
    2b1e:	1c08      	adds	r0, r1, #0
    2b20:	1c03      	adds	r3, r0, #0
    2b22:	337f      	adds	r3, #127	; 0x7f
    2b24:	2b00      	cmp	r3, #0
    2b26:	dd2c      	ble.n	2b82 <__aeabi_fmul+0x1f6>
    2b28:	0769      	lsls	r1, r5, #29
    2b2a:	d004      	beq.n	2b36 <__aeabi_fmul+0x1aa>
    2b2c:	210f      	movs	r1, #15
    2b2e:	4029      	ands	r1, r5
    2b30:	2904      	cmp	r1, #4
    2b32:	d000      	beq.n	2b36 <__aeabi_fmul+0x1aa>
    2b34:	3504      	adds	r5, #4
    2b36:	0129      	lsls	r1, r5, #4
    2b38:	d503      	bpl.n	2b42 <__aeabi_fmul+0x1b6>
    2b3a:	4b2c      	ldr	r3, [pc, #176]	; (2bec <__aeabi_fmul+0x260>)
    2b3c:	401d      	ands	r5, r3
    2b3e:	1c03      	adds	r3, r0, #0
    2b40:	3380      	adds	r3, #128	; 0x80
    2b42:	2bfe      	cmp	r3, #254	; 0xfe
    2b44:	dd17      	ble.n	2b76 <__aeabi_fmul+0x1ea>
    2b46:	2401      	movs	r4, #1
    2b48:	23ff      	movs	r3, #255	; 0xff
    2b4a:	4014      	ands	r4, r2
    2b4c:	2500      	movs	r5, #0
    2b4e:	e764      	b.n	2a1a <__aeabi_fmul+0x8e>
    2b50:	2080      	movs	r0, #128	; 0x80
    2b52:	03c0      	lsls	r0, r0, #15
    2b54:	4205      	tst	r5, r0
    2b56:	d009      	beq.n	2b6c <__aeabi_fmul+0x1e0>
    2b58:	4643      	mov	r3, r8
    2b5a:	4203      	tst	r3, r0
    2b5c:	d106      	bne.n	2b6c <__aeabi_fmul+0x1e0>
    2b5e:	4645      	mov	r5, r8
    2b60:	4305      	orrs	r5, r0
    2b62:	026d      	lsls	r5, r5, #9
    2b64:	0a6d      	lsrs	r5, r5, #9
    2b66:	464c      	mov	r4, r9
    2b68:	23ff      	movs	r3, #255	; 0xff
    2b6a:	e756      	b.n	2a1a <__aeabi_fmul+0x8e>
    2b6c:	4305      	orrs	r5, r0
    2b6e:	026d      	lsls	r5, r5, #9
    2b70:	0a6d      	lsrs	r5, r5, #9
    2b72:	23ff      	movs	r3, #255	; 0xff
    2b74:	e751      	b.n	2a1a <__aeabi_fmul+0x8e>
    2b76:	2401      	movs	r4, #1
    2b78:	01ad      	lsls	r5, r5, #6
    2b7a:	0a6d      	lsrs	r5, r5, #9
    2b7c:	b2db      	uxtb	r3, r3
    2b7e:	4014      	ands	r4, r2
    2b80:	e74b      	b.n	2a1a <__aeabi_fmul+0x8e>
    2b82:	237e      	movs	r3, #126	; 0x7e
    2b84:	425b      	negs	r3, r3
    2b86:	1a1b      	subs	r3, r3, r0
    2b88:	2b1b      	cmp	r3, #27
    2b8a:	dd07      	ble.n	2b9c <__aeabi_fmul+0x210>
    2b8c:	2401      	movs	r4, #1
    2b8e:	2300      	movs	r3, #0
    2b90:	4014      	ands	r4, r2
    2b92:	2500      	movs	r5, #0
    2b94:	e741      	b.n	2a1a <__aeabi_fmul+0x8e>
    2b96:	1c08      	adds	r0, r1, #0
    2b98:	465a      	mov	r2, fp
    2b9a:	e7c1      	b.n	2b20 <__aeabi_fmul+0x194>
    2b9c:	309e      	adds	r0, #158	; 0x9e
    2b9e:	1c29      	adds	r1, r5, #0
    2ba0:	4085      	lsls	r5, r0
    2ba2:	40d9      	lsrs	r1, r3
    2ba4:	1e68      	subs	r0, r5, #1
    2ba6:	4185      	sbcs	r5, r0
    2ba8:	430d      	orrs	r5, r1
    2baa:	076b      	lsls	r3, r5, #29
    2bac:	d004      	beq.n	2bb8 <__aeabi_fmul+0x22c>
    2bae:	230f      	movs	r3, #15
    2bb0:	402b      	ands	r3, r5
    2bb2:	2b04      	cmp	r3, #4
    2bb4:	d000      	beq.n	2bb8 <__aeabi_fmul+0x22c>
    2bb6:	3504      	adds	r5, #4
    2bb8:	016b      	lsls	r3, r5, #5
    2bba:	d504      	bpl.n	2bc6 <__aeabi_fmul+0x23a>
    2bbc:	2401      	movs	r4, #1
    2bbe:	2301      	movs	r3, #1
    2bc0:	4014      	ands	r4, r2
    2bc2:	2500      	movs	r5, #0
    2bc4:	e729      	b.n	2a1a <__aeabi_fmul+0x8e>
    2bc6:	2401      	movs	r4, #1
    2bc8:	01ad      	lsls	r5, r5, #6
    2bca:	0a6d      	lsrs	r5, r5, #9
    2bcc:	4014      	ands	r4, r2
    2bce:	2300      	movs	r3, #0
    2bd0:	e723      	b.n	2a1a <__aeabi_fmul+0x8e>
    2bd2:	2380      	movs	r3, #128	; 0x80
    2bd4:	03db      	lsls	r3, r3, #15
    2bd6:	431d      	orrs	r5, r3
    2bd8:	2401      	movs	r4, #1
    2bda:	465b      	mov	r3, fp
    2bdc:	026d      	lsls	r5, r5, #9
    2bde:	4023      	ands	r3, r4
    2be0:	1c1c      	adds	r4, r3, #0
    2be2:	0a6d      	lsrs	r5, r5, #9
    2be4:	23ff      	movs	r3, #255	; 0xff
    2be6:	e718      	b.n	2a1a <__aeabi_fmul+0x8e>
    2be8:	00003dac 	.word	0x00003dac
    2bec:	f7ffffff 	.word	0xf7ffffff

00002bf0 <__aeabi_fsub>:
    2bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bf2:	004a      	lsls	r2, r1, #1
    2bf4:	0243      	lsls	r3, r0, #9
    2bf6:	0044      	lsls	r4, r0, #1
    2bf8:	024d      	lsls	r5, r1, #9
    2bfa:	0fc0      	lsrs	r0, r0, #31
    2bfc:	0e24      	lsrs	r4, r4, #24
    2bfe:	1c06      	adds	r6, r0, #0
    2c00:	099b      	lsrs	r3, r3, #6
    2c02:	0e12      	lsrs	r2, r2, #24
    2c04:	0fc9      	lsrs	r1, r1, #31
    2c06:	09ad      	lsrs	r5, r5, #6
    2c08:	2aff      	cmp	r2, #255	; 0xff
    2c0a:	d100      	bne.n	2c0e <__aeabi_fsub+0x1e>
    2c0c:	e075      	b.n	2cfa <__aeabi_fsub+0x10a>
    2c0e:	2701      	movs	r7, #1
    2c10:	4079      	eors	r1, r7
    2c12:	4288      	cmp	r0, r1
    2c14:	d050      	beq.n	2cb8 <__aeabi_fsub+0xc8>
    2c16:	1aa0      	subs	r0, r4, r2
    2c18:	2800      	cmp	r0, #0
    2c1a:	dc00      	bgt.n	2c1e <__aeabi_fsub+0x2e>
    2c1c:	e08f      	b.n	2d3e <__aeabi_fsub+0x14e>
    2c1e:	2a00      	cmp	r2, #0
    2c20:	d11e      	bne.n	2c60 <__aeabi_fsub+0x70>
    2c22:	2d00      	cmp	r5, #0
    2c24:	d000      	beq.n	2c28 <__aeabi_fsub+0x38>
    2c26:	e075      	b.n	2d14 <__aeabi_fsub+0x124>
    2c28:	075a      	lsls	r2, r3, #29
    2c2a:	d004      	beq.n	2c36 <__aeabi_fsub+0x46>
    2c2c:	220f      	movs	r2, #15
    2c2e:	401a      	ands	r2, r3
    2c30:	2a04      	cmp	r2, #4
    2c32:	d000      	beq.n	2c36 <__aeabi_fsub+0x46>
    2c34:	3304      	adds	r3, #4
    2c36:	2280      	movs	r2, #128	; 0x80
    2c38:	2001      	movs	r0, #1
    2c3a:	04d2      	lsls	r2, r2, #19
    2c3c:	401a      	ands	r2, r3
    2c3e:	4030      	ands	r0, r6
    2c40:	2a00      	cmp	r2, #0
    2c42:	d032      	beq.n	2caa <__aeabi_fsub+0xba>
    2c44:	3401      	adds	r4, #1
    2c46:	2cff      	cmp	r4, #255	; 0xff
    2c48:	d100      	bne.n	2c4c <__aeabi_fsub+0x5c>
    2c4a:	e084      	b.n	2d56 <__aeabi_fsub+0x166>
    2c4c:	019b      	lsls	r3, r3, #6
    2c4e:	0a5b      	lsrs	r3, r3, #9
    2c50:	b2e4      	uxtb	r4, r4
    2c52:	025b      	lsls	r3, r3, #9
    2c54:	05e4      	lsls	r4, r4, #23
    2c56:	0a5b      	lsrs	r3, r3, #9
    2c58:	4323      	orrs	r3, r4
    2c5a:	07c0      	lsls	r0, r0, #31
    2c5c:	4318      	orrs	r0, r3
    2c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c60:	2cff      	cmp	r4, #255	; 0xff
    2c62:	d0e1      	beq.n	2c28 <__aeabi_fsub+0x38>
    2c64:	2280      	movs	r2, #128	; 0x80
    2c66:	04d2      	lsls	r2, r2, #19
    2c68:	4315      	orrs	r5, r2
    2c6a:	281b      	cmp	r0, #27
    2c6c:	dd7a      	ble.n	2d64 <__aeabi_fsub+0x174>
    2c6e:	2501      	movs	r5, #1
    2c70:	1b5b      	subs	r3, r3, r5
    2c72:	015a      	lsls	r2, r3, #5
    2c74:	d55d      	bpl.n	2d32 <__aeabi_fsub+0x142>
    2c76:	019b      	lsls	r3, r3, #6
    2c78:	099f      	lsrs	r7, r3, #6
    2c7a:	1c38      	adds	r0, r7, #0
    2c7c:	f000 f9d8 	bl	3030 <__clzsi2>
    2c80:	3805      	subs	r0, #5
    2c82:	4087      	lsls	r7, r0
    2c84:	4284      	cmp	r4, r0
    2c86:	dc69      	bgt.n	2d5c <__aeabi_fsub+0x16c>
    2c88:	1b00      	subs	r0, r0, r4
    2c8a:	241f      	movs	r4, #31
    2c8c:	1c3a      	adds	r2, r7, #0
    2c8e:	1c43      	adds	r3, r0, #1
    2c90:	1a20      	subs	r0, r4, r0
    2c92:	40da      	lsrs	r2, r3
    2c94:	4087      	lsls	r7, r0
    2c96:	1c13      	adds	r3, r2, #0
    2c98:	1e7c      	subs	r4, r7, #1
    2c9a:	41a7      	sbcs	r7, r4
    2c9c:	2400      	movs	r4, #0
    2c9e:	433b      	orrs	r3, r7
    2ca0:	e7c2      	b.n	2c28 <__aeabi_fsub+0x38>
    2ca2:	1e13      	subs	r3, r2, #0
    2ca4:	d145      	bne.n	2d32 <__aeabi_fsub+0x142>
    2ca6:	2300      	movs	r3, #0
    2ca8:	2000      	movs	r0, #0
    2caa:	08db      	lsrs	r3, r3, #3
    2cac:	2cff      	cmp	r4, #255	; 0xff
    2cae:	d028      	beq.n	2d02 <__aeabi_fsub+0x112>
    2cb0:	025b      	lsls	r3, r3, #9
    2cb2:	0a5b      	lsrs	r3, r3, #9
    2cb4:	b2e4      	uxtb	r4, r4
    2cb6:	e7cc      	b.n	2c52 <__aeabi_fsub+0x62>
    2cb8:	1aa1      	subs	r1, r4, r2
    2cba:	2900      	cmp	r1, #0
    2cbc:	dd5b      	ble.n	2d76 <__aeabi_fsub+0x186>
    2cbe:	2a00      	cmp	r2, #0
    2cc0:	d02e      	beq.n	2d20 <__aeabi_fsub+0x130>
    2cc2:	2cff      	cmp	r4, #255	; 0xff
    2cc4:	d0b0      	beq.n	2c28 <__aeabi_fsub+0x38>
    2cc6:	2280      	movs	r2, #128	; 0x80
    2cc8:	04d2      	lsls	r2, r2, #19
    2cca:	4315      	orrs	r5, r2
    2ccc:	291b      	cmp	r1, #27
    2cce:	dc74      	bgt.n	2dba <__aeabi_fsub+0x1ca>
    2cd0:	1c2f      	adds	r7, r5, #0
    2cd2:	2220      	movs	r2, #32
    2cd4:	40cf      	lsrs	r7, r1
    2cd6:	1a51      	subs	r1, r2, r1
    2cd8:	408d      	lsls	r5, r1
    2cda:	1e69      	subs	r1, r5, #1
    2cdc:	418d      	sbcs	r5, r1
    2cde:	433d      	orrs	r5, r7
    2ce0:	195b      	adds	r3, r3, r5
    2ce2:	015a      	lsls	r2, r3, #5
    2ce4:	d525      	bpl.n	2d32 <__aeabi_fsub+0x142>
    2ce6:	3401      	adds	r4, #1
    2ce8:	2cff      	cmp	r4, #255	; 0xff
    2cea:	d074      	beq.n	2dd6 <__aeabi_fsub+0x1e6>
    2cec:	2101      	movs	r1, #1
    2cee:	4a7e      	ldr	r2, [pc, #504]	; (2ee8 <__aeabi_fsub+0x2f8>)
    2cf0:	4019      	ands	r1, r3
    2cf2:	4013      	ands	r3, r2
    2cf4:	085b      	lsrs	r3, r3, #1
    2cf6:	430b      	orrs	r3, r1
    2cf8:	e796      	b.n	2c28 <__aeabi_fsub+0x38>
    2cfa:	2d00      	cmp	r5, #0
    2cfc:	d000      	beq.n	2d00 <__aeabi_fsub+0x110>
    2cfe:	e788      	b.n	2c12 <__aeabi_fsub+0x22>
    2d00:	e785      	b.n	2c0e <__aeabi_fsub+0x1e>
    2d02:	2b00      	cmp	r3, #0
    2d04:	d027      	beq.n	2d56 <__aeabi_fsub+0x166>
    2d06:	2280      	movs	r2, #128	; 0x80
    2d08:	03d2      	lsls	r2, r2, #15
    2d0a:	4313      	orrs	r3, r2
    2d0c:	025b      	lsls	r3, r3, #9
    2d0e:	0a5b      	lsrs	r3, r3, #9
    2d10:	24ff      	movs	r4, #255	; 0xff
    2d12:	e79e      	b.n	2c52 <__aeabi_fsub+0x62>
    2d14:	3801      	subs	r0, #1
    2d16:	2800      	cmp	r0, #0
    2d18:	d0aa      	beq.n	2c70 <__aeabi_fsub+0x80>
    2d1a:	2cff      	cmp	r4, #255	; 0xff
    2d1c:	d1a5      	bne.n	2c6a <__aeabi_fsub+0x7a>
    2d1e:	e783      	b.n	2c28 <__aeabi_fsub+0x38>
    2d20:	2d00      	cmp	r5, #0
    2d22:	d100      	bne.n	2d26 <__aeabi_fsub+0x136>
    2d24:	e780      	b.n	2c28 <__aeabi_fsub+0x38>
    2d26:	3901      	subs	r1, #1
    2d28:	2900      	cmp	r1, #0
    2d2a:	d0d9      	beq.n	2ce0 <__aeabi_fsub+0xf0>
    2d2c:	2cff      	cmp	r4, #255	; 0xff
    2d2e:	d1cd      	bne.n	2ccc <__aeabi_fsub+0xdc>
    2d30:	e77a      	b.n	2c28 <__aeabi_fsub+0x38>
    2d32:	075a      	lsls	r2, r3, #29
    2d34:	d000      	beq.n	2d38 <__aeabi_fsub+0x148>
    2d36:	e779      	b.n	2c2c <__aeabi_fsub+0x3c>
    2d38:	2001      	movs	r0, #1
    2d3a:	4030      	ands	r0, r6
    2d3c:	e7b5      	b.n	2caa <__aeabi_fsub+0xba>
    2d3e:	2800      	cmp	r0, #0
    2d40:	d125      	bne.n	2d8e <__aeabi_fsub+0x19e>
    2d42:	1c62      	adds	r2, r4, #1
    2d44:	b2d2      	uxtb	r2, r2
    2d46:	2a01      	cmp	r2, #1
    2d48:	dd55      	ble.n	2df6 <__aeabi_fsub+0x206>
    2d4a:	1b5f      	subs	r7, r3, r5
    2d4c:	017a      	lsls	r2, r7, #5
    2d4e:	d52d      	bpl.n	2dac <__aeabi_fsub+0x1bc>
    2d50:	1aef      	subs	r7, r5, r3
    2d52:	1c0e      	adds	r6, r1, #0
    2d54:	e791      	b.n	2c7a <__aeabi_fsub+0x8a>
    2d56:	24ff      	movs	r4, #255	; 0xff
    2d58:	2300      	movs	r3, #0
    2d5a:	e77a      	b.n	2c52 <__aeabi_fsub+0x62>
    2d5c:	4b62      	ldr	r3, [pc, #392]	; (2ee8 <__aeabi_fsub+0x2f8>)
    2d5e:	1a24      	subs	r4, r4, r0
    2d60:	403b      	ands	r3, r7
    2d62:	e761      	b.n	2c28 <__aeabi_fsub+0x38>
    2d64:	1c29      	adds	r1, r5, #0
    2d66:	2220      	movs	r2, #32
    2d68:	40c1      	lsrs	r1, r0
    2d6a:	1a10      	subs	r0, r2, r0
    2d6c:	4085      	lsls	r5, r0
    2d6e:	1e68      	subs	r0, r5, #1
    2d70:	4185      	sbcs	r5, r0
    2d72:	430d      	orrs	r5, r1
    2d74:	e77c      	b.n	2c70 <__aeabi_fsub+0x80>
    2d76:	2900      	cmp	r1, #0
    2d78:	d146      	bne.n	2e08 <__aeabi_fsub+0x218>
    2d7a:	1c62      	adds	r2, r4, #1
    2d7c:	b2d1      	uxtb	r1, r2
    2d7e:	2901      	cmp	r1, #1
    2d80:	dd2b      	ble.n	2dda <__aeabi_fsub+0x1ea>
    2d82:	2aff      	cmp	r2, #255	; 0xff
    2d84:	d026      	beq.n	2dd4 <__aeabi_fsub+0x1e4>
    2d86:	18eb      	adds	r3, r5, r3
    2d88:	085b      	lsrs	r3, r3, #1
    2d8a:	1c14      	adds	r4, r2, #0
    2d8c:	e74c      	b.n	2c28 <__aeabi_fsub+0x38>
    2d8e:	2c00      	cmp	r4, #0
    2d90:	d015      	beq.n	2dbe <__aeabi_fsub+0x1ce>
    2d92:	2aff      	cmp	r2, #255	; 0xff
    2d94:	d01a      	beq.n	2dcc <__aeabi_fsub+0x1dc>
    2d96:	2480      	movs	r4, #128	; 0x80
    2d98:	04e4      	lsls	r4, r4, #19
    2d9a:	4240      	negs	r0, r0
    2d9c:	4323      	orrs	r3, r4
    2d9e:	281b      	cmp	r0, #27
    2da0:	dd4d      	ble.n	2e3e <__aeabi_fsub+0x24e>
    2da2:	2301      	movs	r3, #1
    2da4:	1aeb      	subs	r3, r5, r3
    2da6:	1c14      	adds	r4, r2, #0
    2da8:	1c0e      	adds	r6, r1, #0
    2daa:	e762      	b.n	2c72 <__aeabi_fsub+0x82>
    2dac:	2f00      	cmp	r7, #0
    2dae:	d000      	beq.n	2db2 <__aeabi_fsub+0x1c2>
    2db0:	e763      	b.n	2c7a <__aeabi_fsub+0x8a>
    2db2:	2300      	movs	r3, #0
    2db4:	2000      	movs	r0, #0
    2db6:	2400      	movs	r4, #0
    2db8:	e777      	b.n	2caa <__aeabi_fsub+0xba>
    2dba:	2501      	movs	r5, #1
    2dbc:	e790      	b.n	2ce0 <__aeabi_fsub+0xf0>
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d039      	beq.n	2e36 <__aeabi_fsub+0x246>
    2dc2:	43c0      	mvns	r0, r0
    2dc4:	2800      	cmp	r0, #0
    2dc6:	d0ed      	beq.n	2da4 <__aeabi_fsub+0x1b4>
    2dc8:	2aff      	cmp	r2, #255	; 0xff
    2dca:	d1e8      	bne.n	2d9e <__aeabi_fsub+0x1ae>
    2dcc:	1c2b      	adds	r3, r5, #0
    2dce:	24ff      	movs	r4, #255	; 0xff
    2dd0:	1c0e      	adds	r6, r1, #0
    2dd2:	e729      	b.n	2c28 <__aeabi_fsub+0x38>
    2dd4:	24ff      	movs	r4, #255	; 0xff
    2dd6:	2300      	movs	r3, #0
    2dd8:	e767      	b.n	2caa <__aeabi_fsub+0xba>
    2dda:	2c00      	cmp	r4, #0
    2ddc:	d15a      	bne.n	2e94 <__aeabi_fsub+0x2a4>
    2dde:	2b00      	cmp	r3, #0
    2de0:	d07f      	beq.n	2ee2 <__aeabi_fsub+0x2f2>
    2de2:	2d00      	cmp	r5, #0
    2de4:	d100      	bne.n	2de8 <__aeabi_fsub+0x1f8>
    2de6:	e71f      	b.n	2c28 <__aeabi_fsub+0x38>
    2de8:	195b      	adds	r3, r3, r5
    2dea:	015a      	lsls	r2, r3, #5
    2dec:	d5a1      	bpl.n	2d32 <__aeabi_fsub+0x142>
    2dee:	4a3e      	ldr	r2, [pc, #248]	; (2ee8 <__aeabi_fsub+0x2f8>)
    2df0:	3401      	adds	r4, #1
    2df2:	4013      	ands	r3, r2
    2df4:	e718      	b.n	2c28 <__aeabi_fsub+0x38>
    2df6:	2c00      	cmp	r4, #0
    2df8:	d115      	bne.n	2e26 <__aeabi_fsub+0x236>
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d12f      	bne.n	2e5e <__aeabi_fsub+0x26e>
    2dfe:	2d00      	cmp	r5, #0
    2e00:	d05e      	beq.n	2ec0 <__aeabi_fsub+0x2d0>
    2e02:	1c2b      	adds	r3, r5, #0
    2e04:	1c0e      	adds	r6, r1, #0
    2e06:	e70f      	b.n	2c28 <__aeabi_fsub+0x38>
    2e08:	2c00      	cmp	r4, #0
    2e0a:	d121      	bne.n	2e50 <__aeabi_fsub+0x260>
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	d054      	beq.n	2eba <__aeabi_fsub+0x2ca>
    2e10:	43c9      	mvns	r1, r1
    2e12:	2900      	cmp	r1, #0
    2e14:	d004      	beq.n	2e20 <__aeabi_fsub+0x230>
    2e16:	2aff      	cmp	r2, #255	; 0xff
    2e18:	d04c      	beq.n	2eb4 <__aeabi_fsub+0x2c4>
    2e1a:	291b      	cmp	r1, #27
    2e1c:	dd58      	ble.n	2ed0 <__aeabi_fsub+0x2e0>
    2e1e:	2301      	movs	r3, #1
    2e20:	195b      	adds	r3, r3, r5
    2e22:	1c14      	adds	r4, r2, #0
    2e24:	e75d      	b.n	2ce2 <__aeabi_fsub+0xf2>
    2e26:	2b00      	cmp	r3, #0
    2e28:	d123      	bne.n	2e72 <__aeabi_fsub+0x282>
    2e2a:	2d00      	cmp	r5, #0
    2e2c:	d04b      	beq.n	2ec6 <__aeabi_fsub+0x2d6>
    2e2e:	1c2b      	adds	r3, r5, #0
    2e30:	1c0e      	adds	r6, r1, #0
    2e32:	24ff      	movs	r4, #255	; 0xff
    2e34:	e6f8      	b.n	2c28 <__aeabi_fsub+0x38>
    2e36:	1c2b      	adds	r3, r5, #0
    2e38:	1c14      	adds	r4, r2, #0
    2e3a:	1c0e      	adds	r6, r1, #0
    2e3c:	e6f4      	b.n	2c28 <__aeabi_fsub+0x38>
    2e3e:	1c1e      	adds	r6, r3, #0
    2e40:	2420      	movs	r4, #32
    2e42:	40c6      	lsrs	r6, r0
    2e44:	1a20      	subs	r0, r4, r0
    2e46:	4083      	lsls	r3, r0
    2e48:	1e58      	subs	r0, r3, #1
    2e4a:	4183      	sbcs	r3, r0
    2e4c:	4333      	orrs	r3, r6
    2e4e:	e7a9      	b.n	2da4 <__aeabi_fsub+0x1b4>
    2e50:	2aff      	cmp	r2, #255	; 0xff
    2e52:	d02f      	beq.n	2eb4 <__aeabi_fsub+0x2c4>
    2e54:	2480      	movs	r4, #128	; 0x80
    2e56:	04e4      	lsls	r4, r4, #19
    2e58:	4249      	negs	r1, r1
    2e5a:	4323      	orrs	r3, r4
    2e5c:	e7dd      	b.n	2e1a <__aeabi_fsub+0x22a>
    2e5e:	2d00      	cmp	r5, #0
    2e60:	d100      	bne.n	2e64 <__aeabi_fsub+0x274>
    2e62:	e6e1      	b.n	2c28 <__aeabi_fsub+0x38>
    2e64:	1b5a      	subs	r2, r3, r5
    2e66:	0150      	lsls	r0, r2, #5
    2e68:	d400      	bmi.n	2e6c <__aeabi_fsub+0x27c>
    2e6a:	e71a      	b.n	2ca2 <__aeabi_fsub+0xb2>
    2e6c:	1aeb      	subs	r3, r5, r3
    2e6e:	1c0e      	adds	r6, r1, #0
    2e70:	e6da      	b.n	2c28 <__aeabi_fsub+0x38>
    2e72:	24ff      	movs	r4, #255	; 0xff
    2e74:	2d00      	cmp	r5, #0
    2e76:	d100      	bne.n	2e7a <__aeabi_fsub+0x28a>
    2e78:	e6d6      	b.n	2c28 <__aeabi_fsub+0x38>
    2e7a:	2280      	movs	r2, #128	; 0x80
    2e7c:	08db      	lsrs	r3, r3, #3
    2e7e:	03d2      	lsls	r2, r2, #15
    2e80:	4213      	tst	r3, r2
    2e82:	d004      	beq.n	2e8e <__aeabi_fsub+0x29e>
    2e84:	08ed      	lsrs	r5, r5, #3
    2e86:	4215      	tst	r5, r2
    2e88:	d101      	bne.n	2e8e <__aeabi_fsub+0x29e>
    2e8a:	1c2b      	adds	r3, r5, #0
    2e8c:	1c0e      	adds	r6, r1, #0
    2e8e:	00db      	lsls	r3, r3, #3
    2e90:	24ff      	movs	r4, #255	; 0xff
    2e92:	e6c9      	b.n	2c28 <__aeabi_fsub+0x38>
    2e94:	2b00      	cmp	r3, #0
    2e96:	d00d      	beq.n	2eb4 <__aeabi_fsub+0x2c4>
    2e98:	24ff      	movs	r4, #255	; 0xff
    2e9a:	2d00      	cmp	r5, #0
    2e9c:	d100      	bne.n	2ea0 <__aeabi_fsub+0x2b0>
    2e9e:	e6c3      	b.n	2c28 <__aeabi_fsub+0x38>
    2ea0:	2280      	movs	r2, #128	; 0x80
    2ea2:	08db      	lsrs	r3, r3, #3
    2ea4:	03d2      	lsls	r2, r2, #15
    2ea6:	4213      	tst	r3, r2
    2ea8:	d0f1      	beq.n	2e8e <__aeabi_fsub+0x29e>
    2eaa:	08ed      	lsrs	r5, r5, #3
    2eac:	4215      	tst	r5, r2
    2eae:	d1ee      	bne.n	2e8e <__aeabi_fsub+0x29e>
    2eb0:	1c2b      	adds	r3, r5, #0
    2eb2:	e7ec      	b.n	2e8e <__aeabi_fsub+0x29e>
    2eb4:	1c2b      	adds	r3, r5, #0
    2eb6:	24ff      	movs	r4, #255	; 0xff
    2eb8:	e6b6      	b.n	2c28 <__aeabi_fsub+0x38>
    2eba:	1c2b      	adds	r3, r5, #0
    2ebc:	1c14      	adds	r4, r2, #0
    2ebe:	e6b3      	b.n	2c28 <__aeabi_fsub+0x38>
    2ec0:	1c23      	adds	r3, r4, #0
    2ec2:	2000      	movs	r0, #0
    2ec4:	e6f1      	b.n	2caa <__aeabi_fsub+0xba>
    2ec6:	2380      	movs	r3, #128	; 0x80
    2ec8:	2000      	movs	r0, #0
    2eca:	049b      	lsls	r3, r3, #18
    2ecc:	24ff      	movs	r4, #255	; 0xff
    2ece:	e6ec      	b.n	2caa <__aeabi_fsub+0xba>
    2ed0:	1c1f      	adds	r7, r3, #0
    2ed2:	2420      	movs	r4, #32
    2ed4:	40cf      	lsrs	r7, r1
    2ed6:	1a61      	subs	r1, r4, r1
    2ed8:	408b      	lsls	r3, r1
    2eda:	1e59      	subs	r1, r3, #1
    2edc:	418b      	sbcs	r3, r1
    2ede:	433b      	orrs	r3, r7
    2ee0:	e79e      	b.n	2e20 <__aeabi_fsub+0x230>
    2ee2:	1c2b      	adds	r3, r5, #0
    2ee4:	e6a0      	b.n	2c28 <__aeabi_fsub+0x38>
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	fbffffff 	.word	0xfbffffff

00002eec <__aeabi_f2iz>:
    2eec:	0242      	lsls	r2, r0, #9
    2eee:	0a51      	lsrs	r1, r2, #9
    2ef0:	0042      	lsls	r2, r0, #1
    2ef2:	0fc3      	lsrs	r3, r0, #31
    2ef4:	0e12      	lsrs	r2, r2, #24
    2ef6:	2000      	movs	r0, #0
    2ef8:	2a7e      	cmp	r2, #126	; 0x7e
    2efa:	dd0d      	ble.n	2f18 <__aeabi_f2iz+0x2c>
    2efc:	2a9d      	cmp	r2, #157	; 0x9d
    2efe:	dc0c      	bgt.n	2f1a <__aeabi_f2iz+0x2e>
    2f00:	2080      	movs	r0, #128	; 0x80
    2f02:	0400      	lsls	r0, r0, #16
    2f04:	4301      	orrs	r1, r0
    2f06:	2a95      	cmp	r2, #149	; 0x95
    2f08:	dc0a      	bgt.n	2f20 <__aeabi_f2iz+0x34>
    2f0a:	2096      	movs	r0, #150	; 0x96
    2f0c:	1a82      	subs	r2, r0, r2
    2f0e:	40d1      	lsrs	r1, r2
    2f10:	1c0a      	adds	r2, r1, #0
    2f12:	4258      	negs	r0, r3
    2f14:	4042      	eors	r2, r0
    2f16:	18d0      	adds	r0, r2, r3
    2f18:	4770      	bx	lr
    2f1a:	4a03      	ldr	r2, [pc, #12]	; (2f28 <__aeabi_f2iz+0x3c>)
    2f1c:	1898      	adds	r0, r3, r2
    2f1e:	e7fb      	b.n	2f18 <__aeabi_f2iz+0x2c>
    2f20:	3a96      	subs	r2, #150	; 0x96
    2f22:	4091      	lsls	r1, r2
    2f24:	1c0a      	adds	r2, r1, #0
    2f26:	e7f4      	b.n	2f12 <__aeabi_f2iz+0x26>
    2f28:	7fffffff 	.word	0x7fffffff

00002f2c <__aeabi_i2f>:
    2f2c:	b570      	push	{r4, r5, r6, lr}
    2f2e:	1e04      	subs	r4, r0, #0
    2f30:	d039      	beq.n	2fa6 <__aeabi_i2f+0x7a>
    2f32:	0fc5      	lsrs	r5, r0, #31
    2f34:	d000      	beq.n	2f38 <__aeabi_i2f+0xc>
    2f36:	4244      	negs	r4, r0
    2f38:	1c20      	adds	r0, r4, #0
    2f3a:	f000 f879 	bl	3030 <__clzsi2>
    2f3e:	239e      	movs	r3, #158	; 0x9e
    2f40:	1c26      	adds	r6, r4, #0
    2f42:	1a1b      	subs	r3, r3, r0
    2f44:	2b96      	cmp	r3, #150	; 0x96
    2f46:	dc07      	bgt.n	2f58 <__aeabi_i2f+0x2c>
    2f48:	2808      	cmp	r0, #8
    2f4a:	dd01      	ble.n	2f50 <__aeabi_i2f+0x24>
    2f4c:	3808      	subs	r0, #8
    2f4e:	4084      	lsls	r4, r0
    2f50:	0264      	lsls	r4, r4, #9
    2f52:	0a64      	lsrs	r4, r4, #9
    2f54:	b2d8      	uxtb	r0, r3
    2f56:	e01e      	b.n	2f96 <__aeabi_i2f+0x6a>
    2f58:	2b99      	cmp	r3, #153	; 0x99
    2f5a:	dd0a      	ble.n	2f72 <__aeabi_i2f+0x46>
    2f5c:	2205      	movs	r2, #5
    2f5e:	1c21      	adds	r1, r4, #0
    2f60:	1a12      	subs	r2, r2, r0
    2f62:	40d1      	lsrs	r1, r2
    2f64:	1c0a      	adds	r2, r1, #0
    2f66:	1c01      	adds	r1, r0, #0
    2f68:	311b      	adds	r1, #27
    2f6a:	408e      	lsls	r6, r1
    2f6c:	1e71      	subs	r1, r6, #1
    2f6e:	418e      	sbcs	r6, r1
    2f70:	4316      	orrs	r6, r2
    2f72:	2805      	cmp	r0, #5
    2f74:	dd01      	ble.n	2f7a <__aeabi_i2f+0x4e>
    2f76:	1f42      	subs	r2, r0, #5
    2f78:	4096      	lsls	r6, r2
    2f7a:	4c0f      	ldr	r4, [pc, #60]	; (2fb8 <__aeabi_i2f+0x8c>)
    2f7c:	4034      	ands	r4, r6
    2f7e:	0772      	lsls	r2, r6, #29
    2f80:	d004      	beq.n	2f8c <__aeabi_i2f+0x60>
    2f82:	220f      	movs	r2, #15
    2f84:	4016      	ands	r6, r2
    2f86:	2e04      	cmp	r6, #4
    2f88:	d000      	beq.n	2f8c <__aeabi_i2f+0x60>
    2f8a:	3404      	adds	r4, #4
    2f8c:	0162      	lsls	r2, r4, #5
    2f8e:	d40e      	bmi.n	2fae <__aeabi_i2f+0x82>
    2f90:	01a4      	lsls	r4, r4, #6
    2f92:	0a64      	lsrs	r4, r4, #9
    2f94:	b2d8      	uxtb	r0, r3
    2f96:	0264      	lsls	r4, r4, #9
    2f98:	05c0      	lsls	r0, r0, #23
    2f9a:	0a64      	lsrs	r4, r4, #9
    2f9c:	07ed      	lsls	r5, r5, #31
    2f9e:	4304      	orrs	r4, r0
    2fa0:	432c      	orrs	r4, r5
    2fa2:	1c20      	adds	r0, r4, #0
    2fa4:	bd70      	pop	{r4, r5, r6, pc}
    2fa6:	2500      	movs	r5, #0
    2fa8:	2000      	movs	r0, #0
    2faa:	2400      	movs	r4, #0
    2fac:	e7f3      	b.n	2f96 <__aeabi_i2f+0x6a>
    2fae:	4b02      	ldr	r3, [pc, #8]	; (2fb8 <__aeabi_i2f+0x8c>)
    2fb0:	401c      	ands	r4, r3
    2fb2:	239f      	movs	r3, #159	; 0x9f
    2fb4:	1a1b      	subs	r3, r3, r0
    2fb6:	e7eb      	b.n	2f90 <__aeabi_i2f+0x64>
    2fb8:	fbffffff 	.word	0xfbffffff

00002fbc <__aeabi_cfrcmple>:
    2fbc:	4684      	mov	ip, r0
    2fbe:	1c08      	adds	r0, r1, #0
    2fc0:	4661      	mov	r1, ip
    2fc2:	e7ff      	b.n	2fc4 <__aeabi_cfcmpeq>

00002fc4 <__aeabi_cfcmpeq>:
    2fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2fc6:	f000 f8c5 	bl	3154 <__lesf2>
    2fca:	2800      	cmp	r0, #0
    2fcc:	d401      	bmi.n	2fd2 <__aeabi_cfcmpeq+0xe>
    2fce:	2100      	movs	r1, #0
    2fd0:	42c8      	cmn	r0, r1
    2fd2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002fd4 <__aeabi_fcmpeq>:
    2fd4:	b510      	push	{r4, lr}
    2fd6:	f000 f849 	bl	306c <__eqsf2>
    2fda:	4240      	negs	r0, r0
    2fdc:	3001      	adds	r0, #1
    2fde:	bd10      	pop	{r4, pc}

00002fe0 <__aeabi_fcmplt>:
    2fe0:	b510      	push	{r4, lr}
    2fe2:	f000 f8b7 	bl	3154 <__lesf2>
    2fe6:	2800      	cmp	r0, #0
    2fe8:	db01      	blt.n	2fee <__aeabi_fcmplt+0xe>
    2fea:	2000      	movs	r0, #0
    2fec:	bd10      	pop	{r4, pc}
    2fee:	2001      	movs	r0, #1
    2ff0:	bd10      	pop	{r4, pc}
    2ff2:	46c0      	nop			; (mov r8, r8)

00002ff4 <__aeabi_fcmple>:
    2ff4:	b510      	push	{r4, lr}
    2ff6:	f000 f8ad 	bl	3154 <__lesf2>
    2ffa:	2800      	cmp	r0, #0
    2ffc:	dd01      	ble.n	3002 <__aeabi_fcmple+0xe>
    2ffe:	2000      	movs	r0, #0
    3000:	bd10      	pop	{r4, pc}
    3002:	2001      	movs	r0, #1
    3004:	bd10      	pop	{r4, pc}
    3006:	46c0      	nop			; (mov r8, r8)

00003008 <__aeabi_fcmpgt>:
    3008:	b510      	push	{r4, lr}
    300a:	f000 f859 	bl	30c0 <__gesf2>
    300e:	2800      	cmp	r0, #0
    3010:	dc01      	bgt.n	3016 <__aeabi_fcmpgt+0xe>
    3012:	2000      	movs	r0, #0
    3014:	bd10      	pop	{r4, pc}
    3016:	2001      	movs	r0, #1
    3018:	bd10      	pop	{r4, pc}
    301a:	46c0      	nop			; (mov r8, r8)

0000301c <__aeabi_fcmpge>:
    301c:	b510      	push	{r4, lr}
    301e:	f000 f84f 	bl	30c0 <__gesf2>
    3022:	2800      	cmp	r0, #0
    3024:	da01      	bge.n	302a <__aeabi_fcmpge+0xe>
    3026:	2000      	movs	r0, #0
    3028:	bd10      	pop	{r4, pc}
    302a:	2001      	movs	r0, #1
    302c:	bd10      	pop	{r4, pc}
    302e:	46c0      	nop			; (mov r8, r8)

00003030 <__clzsi2>:
    3030:	211c      	movs	r1, #28
    3032:	2301      	movs	r3, #1
    3034:	041b      	lsls	r3, r3, #16
    3036:	4298      	cmp	r0, r3
    3038:	d301      	bcc.n	303e <__clzsi2+0xe>
    303a:	0c00      	lsrs	r0, r0, #16
    303c:	3910      	subs	r1, #16
    303e:	0a1b      	lsrs	r3, r3, #8
    3040:	4298      	cmp	r0, r3
    3042:	d301      	bcc.n	3048 <__clzsi2+0x18>
    3044:	0a00      	lsrs	r0, r0, #8
    3046:	3908      	subs	r1, #8
    3048:	091b      	lsrs	r3, r3, #4
    304a:	4298      	cmp	r0, r3
    304c:	d301      	bcc.n	3052 <__clzsi2+0x22>
    304e:	0900      	lsrs	r0, r0, #4
    3050:	3904      	subs	r1, #4
    3052:	a202      	add	r2, pc, #8	; (adr r2, 305c <__clzsi2+0x2c>)
    3054:	5c10      	ldrb	r0, [r2, r0]
    3056:	1840      	adds	r0, r0, r1
    3058:	4770      	bx	lr
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	02020304 	.word	0x02020304
    3060:	01010101 	.word	0x01010101
	...

0000306c <__eqsf2>:
    306c:	0243      	lsls	r3, r0, #9
    306e:	b570      	push	{r4, r5, r6, lr}
    3070:	0042      	lsls	r2, r0, #1
    3072:	004c      	lsls	r4, r1, #1
    3074:	0a5d      	lsrs	r5, r3, #9
    3076:	0fc3      	lsrs	r3, r0, #31
    3078:	0248      	lsls	r0, r1, #9
    307a:	0e12      	lsrs	r2, r2, #24
    307c:	0a46      	lsrs	r6, r0, #9
    307e:	0e24      	lsrs	r4, r4, #24
    3080:	0fc9      	lsrs	r1, r1, #31
    3082:	2aff      	cmp	r2, #255	; 0xff
    3084:	d005      	beq.n	3092 <__eqsf2+0x26>
    3086:	2cff      	cmp	r4, #255	; 0xff
    3088:	d008      	beq.n	309c <__eqsf2+0x30>
    308a:	2001      	movs	r0, #1
    308c:	42a2      	cmp	r2, r4
    308e:	d00b      	beq.n	30a8 <__eqsf2+0x3c>
    3090:	bd70      	pop	{r4, r5, r6, pc}
    3092:	2001      	movs	r0, #1
    3094:	2d00      	cmp	r5, #0
    3096:	d1fb      	bne.n	3090 <__eqsf2+0x24>
    3098:	2cff      	cmp	r4, #255	; 0xff
    309a:	d1f6      	bne.n	308a <__eqsf2+0x1e>
    309c:	2001      	movs	r0, #1
    309e:	2e00      	cmp	r6, #0
    30a0:	d1f6      	bne.n	3090 <__eqsf2+0x24>
    30a2:	2001      	movs	r0, #1
    30a4:	42a2      	cmp	r2, r4
    30a6:	d1f3      	bne.n	3090 <__eqsf2+0x24>
    30a8:	42b5      	cmp	r5, r6
    30aa:	d1f1      	bne.n	3090 <__eqsf2+0x24>
    30ac:	428b      	cmp	r3, r1
    30ae:	d005      	beq.n	30bc <__eqsf2+0x50>
    30b0:	2a00      	cmp	r2, #0
    30b2:	d1ed      	bne.n	3090 <__eqsf2+0x24>
    30b4:	1c28      	adds	r0, r5, #0
    30b6:	1e43      	subs	r3, r0, #1
    30b8:	4198      	sbcs	r0, r3
    30ba:	e7e9      	b.n	3090 <__eqsf2+0x24>
    30bc:	2000      	movs	r0, #0
    30be:	e7e7      	b.n	3090 <__eqsf2+0x24>

000030c0 <__gesf2>:
    30c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30c2:	0243      	lsls	r3, r0, #9
    30c4:	024d      	lsls	r5, r1, #9
    30c6:	004a      	lsls	r2, r1, #1
    30c8:	0044      	lsls	r4, r0, #1
    30ca:	0a5e      	lsrs	r6, r3, #9
    30cc:	0e24      	lsrs	r4, r4, #24
    30ce:	0fc3      	lsrs	r3, r0, #31
    30d0:	0a6d      	lsrs	r5, r5, #9
    30d2:	0e12      	lsrs	r2, r2, #24
    30d4:	0fc9      	lsrs	r1, r1, #31
    30d6:	2cff      	cmp	r4, #255	; 0xff
    30d8:	d00d      	beq.n	30f6 <__gesf2+0x36>
    30da:	2aff      	cmp	r2, #255	; 0xff
    30dc:	d031      	beq.n	3142 <__gesf2+0x82>
    30de:	2c00      	cmp	r4, #0
    30e0:	d10d      	bne.n	30fe <__gesf2+0x3e>
    30e2:	4277      	negs	r7, r6
    30e4:	4177      	adcs	r7, r6
    30e6:	2a00      	cmp	r2, #0
    30e8:	d123      	bne.n	3132 <__gesf2+0x72>
    30ea:	2d00      	cmp	r5, #0
    30ec:	d121      	bne.n	3132 <__gesf2+0x72>
    30ee:	2000      	movs	r0, #0
    30f0:	2f00      	cmp	r7, #0
    30f2:	d10b      	bne.n	310c <__gesf2+0x4c>
    30f4:	e007      	b.n	3106 <__gesf2+0x46>
    30f6:	2e00      	cmp	r6, #0
    30f8:	d128      	bne.n	314c <__gesf2+0x8c>
    30fa:	2aff      	cmp	r2, #255	; 0xff
    30fc:	d021      	beq.n	3142 <__gesf2+0x82>
    30fe:	2a00      	cmp	r2, #0
    3100:	d005      	beq.n	310e <__gesf2+0x4e>
    3102:	428b      	cmp	r3, r1
    3104:	d007      	beq.n	3116 <__gesf2+0x56>
    3106:	4258      	negs	r0, r3
    3108:	2301      	movs	r3, #1
    310a:	4318      	orrs	r0, r3
    310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    310e:	2d00      	cmp	r5, #0
    3110:	d0f9      	beq.n	3106 <__gesf2+0x46>
    3112:	428b      	cmp	r3, r1
    3114:	d1f7      	bne.n	3106 <__gesf2+0x46>
    3116:	4294      	cmp	r4, r2
    3118:	dcf5      	bgt.n	3106 <__gesf2+0x46>
    311a:	db04      	blt.n	3126 <__gesf2+0x66>
    311c:	42ae      	cmp	r6, r5
    311e:	d8f2      	bhi.n	3106 <__gesf2+0x46>
    3120:	2000      	movs	r0, #0
    3122:	42ae      	cmp	r6, r5
    3124:	d2f2      	bcs.n	310c <__gesf2+0x4c>
    3126:	4258      	negs	r0, r3
    3128:	4143      	adcs	r3, r0
    312a:	2001      	movs	r0, #1
    312c:	425b      	negs	r3, r3
    312e:	4318      	orrs	r0, r3
    3130:	e7ec      	b.n	310c <__gesf2+0x4c>
    3132:	2f00      	cmp	r7, #0
    3134:	d0e5      	beq.n	3102 <__gesf2+0x42>
    3136:	4248      	negs	r0, r1
    3138:	4141      	adcs	r1, r0
    313a:	2001      	movs	r0, #1
    313c:	4249      	negs	r1, r1
    313e:	4308      	orrs	r0, r1
    3140:	e7e4      	b.n	310c <__gesf2+0x4c>
    3142:	2d00      	cmp	r5, #0
    3144:	d102      	bne.n	314c <__gesf2+0x8c>
    3146:	2c00      	cmp	r4, #0
    3148:	d0cb      	beq.n	30e2 <__gesf2+0x22>
    314a:	e7da      	b.n	3102 <__gesf2+0x42>
    314c:	2002      	movs	r0, #2
    314e:	4240      	negs	r0, r0
    3150:	e7dc      	b.n	310c <__gesf2+0x4c>
    3152:	46c0      	nop			; (mov r8, r8)

00003154 <__lesf2>:
    3154:	0243      	lsls	r3, r0, #9
    3156:	b5f0      	push	{r4, r5, r6, r7, lr}
    3158:	0042      	lsls	r2, r0, #1
    315a:	004c      	lsls	r4, r1, #1
    315c:	0a5e      	lsrs	r6, r3, #9
    315e:	0fc3      	lsrs	r3, r0, #31
    3160:	0248      	lsls	r0, r1, #9
    3162:	0e12      	lsrs	r2, r2, #24
    3164:	0a45      	lsrs	r5, r0, #9
    3166:	0e24      	lsrs	r4, r4, #24
    3168:	0fc9      	lsrs	r1, r1, #31
    316a:	2aff      	cmp	r2, #255	; 0xff
    316c:	d00f      	beq.n	318e <__lesf2+0x3a>
    316e:	2cff      	cmp	r4, #255	; 0xff
    3170:	d01a      	beq.n	31a8 <__lesf2+0x54>
    3172:	2a00      	cmp	r2, #0
    3174:	d110      	bne.n	3198 <__lesf2+0x44>
    3176:	4277      	negs	r7, r6
    3178:	4177      	adcs	r7, r6
    317a:	2c00      	cmp	r4, #0
    317c:	d029      	beq.n	31d2 <__lesf2+0x7e>
    317e:	2f00      	cmp	r7, #0
    3180:	d017      	beq.n	31b2 <__lesf2+0x5e>
    3182:	4248      	negs	r0, r1
    3184:	4141      	adcs	r1, r0
    3186:	2001      	movs	r0, #1
    3188:	4249      	negs	r1, r1
    318a:	4308      	orrs	r0, r1
    318c:	e00b      	b.n	31a6 <__lesf2+0x52>
    318e:	2002      	movs	r0, #2
    3190:	2e00      	cmp	r6, #0
    3192:	d108      	bne.n	31a6 <__lesf2+0x52>
    3194:	2cff      	cmp	r4, #255	; 0xff
    3196:	d007      	beq.n	31a8 <__lesf2+0x54>
    3198:	2c00      	cmp	r4, #0
    319a:	d10a      	bne.n	31b2 <__lesf2+0x5e>
    319c:	2d00      	cmp	r5, #0
    319e:	d108      	bne.n	31b2 <__lesf2+0x5e>
    31a0:	4258      	negs	r0, r3
    31a2:	2301      	movs	r3, #1
    31a4:	4318      	orrs	r0, r3
    31a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31a8:	2002      	movs	r0, #2
    31aa:	2d00      	cmp	r5, #0
    31ac:	d1fb      	bne.n	31a6 <__lesf2+0x52>
    31ae:	2a00      	cmp	r2, #0
    31b0:	d0e1      	beq.n	3176 <__lesf2+0x22>
    31b2:	428b      	cmp	r3, r1
    31b4:	d1f4      	bne.n	31a0 <__lesf2+0x4c>
    31b6:	42a2      	cmp	r2, r4
    31b8:	dcf2      	bgt.n	31a0 <__lesf2+0x4c>
    31ba:	db04      	blt.n	31c6 <__lesf2+0x72>
    31bc:	42ae      	cmp	r6, r5
    31be:	d8ef      	bhi.n	31a0 <__lesf2+0x4c>
    31c0:	2000      	movs	r0, #0
    31c2:	42ae      	cmp	r6, r5
    31c4:	d2ef      	bcs.n	31a6 <__lesf2+0x52>
    31c6:	4258      	negs	r0, r3
    31c8:	4143      	adcs	r3, r0
    31ca:	2001      	movs	r0, #1
    31cc:	425b      	negs	r3, r3
    31ce:	4318      	orrs	r0, r3
    31d0:	e7e9      	b.n	31a6 <__lesf2+0x52>
    31d2:	2d00      	cmp	r5, #0
    31d4:	d1d3      	bne.n	317e <__lesf2+0x2a>
    31d6:	2000      	movs	r0, #0
    31d8:	2f00      	cmp	r7, #0
    31da:	d1e4      	bne.n	31a6 <__lesf2+0x52>
    31dc:	e7e0      	b.n	31a0 <__lesf2+0x4c>
    31de:	46c0      	nop			; (mov r8, r8)

000031e0 <__libc_init_array>:
    31e0:	4b0e      	ldr	r3, [pc, #56]	; (321c <__libc_init_array+0x3c>)
    31e2:	b570      	push	{r4, r5, r6, lr}
    31e4:	2500      	movs	r5, #0
    31e6:	1c1e      	adds	r6, r3, #0
    31e8:	4c0d      	ldr	r4, [pc, #52]	; (3220 <__libc_init_array+0x40>)
    31ea:	1ae4      	subs	r4, r4, r3
    31ec:	10a4      	asrs	r4, r4, #2
    31ee:	42a5      	cmp	r5, r4
    31f0:	d004      	beq.n	31fc <__libc_init_array+0x1c>
    31f2:	00ab      	lsls	r3, r5, #2
    31f4:	58f3      	ldr	r3, [r6, r3]
    31f6:	4798      	blx	r3
    31f8:	3501      	adds	r5, #1
    31fa:	e7f8      	b.n	31ee <__libc_init_array+0xe>
    31fc:	f000 fe2a 	bl	3e54 <_init>
    3200:	4b08      	ldr	r3, [pc, #32]	; (3224 <__libc_init_array+0x44>)
    3202:	2500      	movs	r5, #0
    3204:	1c1e      	adds	r6, r3, #0
    3206:	4c08      	ldr	r4, [pc, #32]	; (3228 <__libc_init_array+0x48>)
    3208:	1ae4      	subs	r4, r4, r3
    320a:	10a4      	asrs	r4, r4, #2
    320c:	42a5      	cmp	r5, r4
    320e:	d004      	beq.n	321a <__libc_init_array+0x3a>
    3210:	00ab      	lsls	r3, r5, #2
    3212:	58f3      	ldr	r3, [r6, r3]
    3214:	4798      	blx	r3
    3216:	3501      	adds	r5, #1
    3218:	e7f8      	b.n	320c <__libc_init_array+0x2c>
    321a:	bd70      	pop	{r4, r5, r6, pc}
    321c:	00003e60 	.word	0x00003e60
    3220:	00003e60 	.word	0x00003e60
    3224:	00003e60 	.word	0x00003e60
    3228:	00003e64 	.word	0x00003e64

0000322c <memcpy>:
    322c:	2300      	movs	r3, #0
    322e:	b510      	push	{r4, lr}
    3230:	4293      	cmp	r3, r2
    3232:	d003      	beq.n	323c <memcpy+0x10>
    3234:	5ccc      	ldrb	r4, [r1, r3]
    3236:	54c4      	strb	r4, [r0, r3]
    3238:	3301      	adds	r3, #1
    323a:	e7f9      	b.n	3230 <memcpy+0x4>
    323c:	bd10      	pop	{r4, pc}

0000323e <memset>:
    323e:	1c03      	adds	r3, r0, #0
    3240:	1882      	adds	r2, r0, r2
    3242:	4293      	cmp	r3, r2
    3244:	d002      	beq.n	324c <memset+0xe>
    3246:	7019      	strb	r1, [r3, #0]
    3248:	3301      	adds	r3, #1
    324a:	e7fa      	b.n	3242 <memset+0x4>
    324c:	4770      	bx	lr

0000324e <_puts_r>:
    324e:	b570      	push	{r4, r5, r6, lr}
    3250:	1c05      	adds	r5, r0, #0
    3252:	1c0e      	adds	r6, r1, #0
    3254:	2800      	cmp	r0, #0
    3256:	d004      	beq.n	3262 <_puts_r+0x14>
    3258:	6983      	ldr	r3, [r0, #24]
    325a:	2b00      	cmp	r3, #0
    325c:	d101      	bne.n	3262 <_puts_r+0x14>
    325e:	f000 fab5 	bl	37cc <__sinit>
    3262:	68ac      	ldr	r4, [r5, #8]
    3264:	89a3      	ldrh	r3, [r4, #12]
    3266:	071b      	lsls	r3, r3, #28
    3268:	d502      	bpl.n	3270 <_puts_r+0x22>
    326a:	6923      	ldr	r3, [r4, #16]
    326c:	2b00      	cmp	r3, #0
    326e:	d119      	bne.n	32a4 <_puts_r+0x56>
    3270:	1c28      	adds	r0, r5, #0
    3272:	1c21      	adds	r1, r4, #0
    3274:	f000 f93e 	bl	34f4 <__swsetup_r>
    3278:	2800      	cmp	r0, #0
    327a:	d013      	beq.n	32a4 <_puts_r+0x56>
    327c:	2001      	movs	r0, #1
    327e:	4240      	negs	r0, r0
    3280:	e045      	b.n	330e <_puts_r+0xc0>
    3282:	7831      	ldrb	r1, [r6, #0]
    3284:	2b00      	cmp	r3, #0
    3286:	da1b      	bge.n	32c0 <_puts_r+0x72>
    3288:	69a2      	ldr	r2, [r4, #24]
    328a:	4293      	cmp	r3, r2
    328c:	da11      	bge.n	32b2 <_puts_r+0x64>
    328e:	1c22      	adds	r2, r4, #0
    3290:	1c28      	adds	r0, r5, #0
    3292:	f000 f8d7 	bl	3444 <__swbuf_r>
    3296:	3001      	adds	r0, #1
    3298:	4242      	negs	r2, r0
    329a:	4142      	adcs	r2, r0
    329c:	b2d0      	uxtb	r0, r2
    329e:	2800      	cmp	r0, #0
    32a0:	d1ec      	bne.n	327c <_puts_r+0x2e>
    32a2:	3601      	adds	r6, #1
    32a4:	68a3      	ldr	r3, [r4, #8]
    32a6:	7832      	ldrb	r2, [r6, #0]
    32a8:	3b01      	subs	r3, #1
    32aa:	60a3      	str	r3, [r4, #8]
    32ac:	2a00      	cmp	r2, #0
    32ae:	d1e8      	bne.n	3282 <_puts_r+0x34>
    32b0:	e00c      	b.n	32cc <_puts_r+0x7e>
    32b2:	6823      	ldr	r3, [r4, #0]
    32b4:	7019      	strb	r1, [r3, #0]
    32b6:	6823      	ldr	r3, [r4, #0]
    32b8:	7819      	ldrb	r1, [r3, #0]
    32ba:	290a      	cmp	r1, #10
    32bc:	d103      	bne.n	32c6 <_puts_r+0x78>
    32be:	e7e6      	b.n	328e <_puts_r+0x40>
    32c0:	6823      	ldr	r3, [r4, #0]
    32c2:	7019      	strb	r1, [r3, #0]
    32c4:	6823      	ldr	r3, [r4, #0]
    32c6:	3301      	adds	r3, #1
    32c8:	6023      	str	r3, [r4, #0]
    32ca:	e7ea      	b.n	32a2 <_puts_r+0x54>
    32cc:	2b00      	cmp	r3, #0
    32ce:	da17      	bge.n	3300 <_puts_r+0xb2>
    32d0:	69a2      	ldr	r2, [r4, #24]
    32d2:	4293      	cmp	r3, r2
    32d4:	db08      	blt.n	32e8 <_puts_r+0x9a>
    32d6:	230a      	movs	r3, #10
    32d8:	6822      	ldr	r2, [r4, #0]
    32da:	7013      	strb	r3, [r2, #0]
    32dc:	6823      	ldr	r3, [r4, #0]
    32de:	7819      	ldrb	r1, [r3, #0]
    32e0:	290a      	cmp	r1, #10
    32e2:	d111      	bne.n	3308 <_puts_r+0xba>
    32e4:	1c28      	adds	r0, r5, #0
    32e6:	e001      	b.n	32ec <_puts_r+0x9e>
    32e8:	1c28      	adds	r0, r5, #0
    32ea:	210a      	movs	r1, #10
    32ec:	1c22      	adds	r2, r4, #0
    32ee:	f000 f8a9 	bl	3444 <__swbuf_r>
    32f2:	3001      	adds	r0, #1
    32f4:	4242      	negs	r2, r0
    32f6:	4142      	adcs	r2, r0
    32f8:	b2d0      	uxtb	r0, r2
    32fa:	2800      	cmp	r0, #0
    32fc:	d006      	beq.n	330c <_puts_r+0xbe>
    32fe:	e7bd      	b.n	327c <_puts_r+0x2e>
    3300:	230a      	movs	r3, #10
    3302:	6822      	ldr	r2, [r4, #0]
    3304:	7013      	strb	r3, [r2, #0]
    3306:	6823      	ldr	r3, [r4, #0]
    3308:	3301      	adds	r3, #1
    330a:	6023      	str	r3, [r4, #0]
    330c:	200a      	movs	r0, #10
    330e:	bd70      	pop	{r4, r5, r6, pc}

00003310 <puts>:
    3310:	b508      	push	{r3, lr}
    3312:	4b03      	ldr	r3, [pc, #12]	; (3320 <puts+0x10>)
    3314:	1c01      	adds	r1, r0, #0
    3316:	6818      	ldr	r0, [r3, #0]
    3318:	f7ff ff99 	bl	324e <_puts_r>
    331c:	bd08      	pop	{r3, pc}
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	20000068 	.word	0x20000068

00003324 <setbuf>:
    3324:	b508      	push	{r3, lr}
    3326:	424a      	negs	r2, r1
    3328:	414a      	adcs	r2, r1
    332a:	2380      	movs	r3, #128	; 0x80
    332c:	0052      	lsls	r2, r2, #1
    332e:	00db      	lsls	r3, r3, #3
    3330:	f000 f802 	bl	3338 <setvbuf>
    3334:	bd08      	pop	{r3, pc}
	...

00003338 <setvbuf>:
    3338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    333a:	1c1e      	adds	r6, r3, #0
    333c:	4b3c      	ldr	r3, [pc, #240]	; (3430 <setvbuf+0xf8>)
    333e:	1c04      	adds	r4, r0, #0
    3340:	681d      	ldr	r5, [r3, #0]
    3342:	1c0f      	adds	r7, r1, #0
    3344:	9201      	str	r2, [sp, #4]
    3346:	2d00      	cmp	r5, #0
    3348:	d005      	beq.n	3356 <setvbuf+0x1e>
    334a:	69ab      	ldr	r3, [r5, #24]
    334c:	2b00      	cmp	r3, #0
    334e:	d102      	bne.n	3356 <setvbuf+0x1e>
    3350:	1c28      	adds	r0, r5, #0
    3352:	f000 fa3b 	bl	37cc <__sinit>
    3356:	4b37      	ldr	r3, [pc, #220]	; (3434 <setvbuf+0xfc>)
    3358:	429c      	cmp	r4, r3
    335a:	d101      	bne.n	3360 <setvbuf+0x28>
    335c:	686c      	ldr	r4, [r5, #4]
    335e:	e008      	b.n	3372 <setvbuf+0x3a>
    3360:	4b35      	ldr	r3, [pc, #212]	; (3438 <setvbuf+0x100>)
    3362:	429c      	cmp	r4, r3
    3364:	d101      	bne.n	336a <setvbuf+0x32>
    3366:	68ac      	ldr	r4, [r5, #8]
    3368:	e003      	b.n	3372 <setvbuf+0x3a>
    336a:	4b34      	ldr	r3, [pc, #208]	; (343c <setvbuf+0x104>)
    336c:	429c      	cmp	r4, r3
    336e:	d100      	bne.n	3372 <setvbuf+0x3a>
    3370:	68ec      	ldr	r4, [r5, #12]
    3372:	9b01      	ldr	r3, [sp, #4]
    3374:	2b02      	cmp	r3, #2
    3376:	d858      	bhi.n	342a <setvbuf+0xf2>
    3378:	2e00      	cmp	r6, #0
    337a:	db56      	blt.n	342a <setvbuf+0xf2>
    337c:	1c28      	adds	r0, r5, #0
    337e:	1c21      	adds	r1, r4, #0
    3380:	f000 f9b6 	bl	36f0 <_fflush_r>
    3384:	2300      	movs	r3, #0
    3386:	6063      	str	r3, [r4, #4]
    3388:	61a3      	str	r3, [r4, #24]
    338a:	89a3      	ldrh	r3, [r4, #12]
    338c:	061b      	lsls	r3, r3, #24
    338e:	d503      	bpl.n	3398 <setvbuf+0x60>
    3390:	1c28      	adds	r0, r5, #0
    3392:	6921      	ldr	r1, [r4, #16]
    3394:	f000 fb0e 	bl	39b4 <_free_r>
    3398:	2283      	movs	r2, #131	; 0x83
    339a:	89a3      	ldrh	r3, [r4, #12]
    339c:	4393      	bics	r3, r2
    339e:	81a3      	strh	r3, [r4, #12]
    33a0:	9b01      	ldr	r3, [sp, #4]
    33a2:	2b02      	cmp	r3, #2
    33a4:	d013      	beq.n	33ce <setvbuf+0x96>
    33a6:	2f00      	cmp	r7, #0
    33a8:	d125      	bne.n	33f6 <setvbuf+0xbe>
    33aa:	2e00      	cmp	r6, #0
    33ac:	d101      	bne.n	33b2 <setvbuf+0x7a>
    33ae:	2680      	movs	r6, #128	; 0x80
    33b0:	00f6      	lsls	r6, r6, #3
    33b2:	1c30      	adds	r0, r6, #0
    33b4:	f000 faf4 	bl	39a0 <malloc>
    33b8:	1e07      	subs	r7, r0, #0
    33ba:	d118      	bne.n	33ee <setvbuf+0xb6>
    33bc:	2080      	movs	r0, #128	; 0x80
    33be:	00c0      	lsls	r0, r0, #3
    33c0:	f000 faee 	bl	39a0 <malloc>
    33c4:	1e07      	subs	r7, r0, #0
    33c6:	d110      	bne.n	33ea <setvbuf+0xb2>
    33c8:	2001      	movs	r0, #1
    33ca:	4240      	negs	r0, r0
    33cc:	e000      	b.n	33d0 <setvbuf+0x98>
    33ce:	2000      	movs	r0, #0
    33d0:	2202      	movs	r2, #2
    33d2:	89a3      	ldrh	r3, [r4, #12]
    33d4:	4313      	orrs	r3, r2
    33d6:	81a3      	strh	r3, [r4, #12]
    33d8:	2300      	movs	r3, #0
    33da:	60a3      	str	r3, [r4, #8]
    33dc:	1c23      	adds	r3, r4, #0
    33de:	3347      	adds	r3, #71	; 0x47
    33e0:	6023      	str	r3, [r4, #0]
    33e2:	6123      	str	r3, [r4, #16]
    33e4:	2301      	movs	r3, #1
    33e6:	6163      	str	r3, [r4, #20]
    33e8:	e021      	b.n	342e <setvbuf+0xf6>
    33ea:	2680      	movs	r6, #128	; 0x80
    33ec:	00f6      	lsls	r6, r6, #3
    33ee:	2280      	movs	r2, #128	; 0x80
    33f0:	89a3      	ldrh	r3, [r4, #12]
    33f2:	4313      	orrs	r3, r2
    33f4:	81a3      	strh	r3, [r4, #12]
    33f6:	9b01      	ldr	r3, [sp, #4]
    33f8:	2b01      	cmp	r3, #1
    33fa:	d105      	bne.n	3408 <setvbuf+0xd0>
    33fc:	89a3      	ldrh	r3, [r4, #12]
    33fe:	9a01      	ldr	r2, [sp, #4]
    3400:	431a      	orrs	r2, r3
    3402:	4273      	negs	r3, r6
    3404:	81a2      	strh	r2, [r4, #12]
    3406:	61a3      	str	r3, [r4, #24]
    3408:	4b0d      	ldr	r3, [pc, #52]	; (3440 <setvbuf+0x108>)
    340a:	2000      	movs	r0, #0
    340c:	62ab      	str	r3, [r5, #40]	; 0x28
    340e:	89a2      	ldrh	r2, [r4, #12]
    3410:	6027      	str	r7, [r4, #0]
    3412:	6127      	str	r7, [r4, #16]
    3414:	6166      	str	r6, [r4, #20]
    3416:	0713      	lsls	r3, r2, #28
    3418:	d509      	bpl.n	342e <setvbuf+0xf6>
    341a:	2303      	movs	r3, #3
    341c:	401a      	ands	r2, r3
    341e:	4253      	negs	r3, r2
    3420:	4153      	adcs	r3, r2
    3422:	425b      	negs	r3, r3
    3424:	401e      	ands	r6, r3
    3426:	60a6      	str	r6, [r4, #8]
    3428:	e001      	b.n	342e <setvbuf+0xf6>
    342a:	2001      	movs	r0, #1
    342c:	4240      	negs	r0, r0
    342e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3430:	20000068 	.word	0x20000068
    3434:	00003df4 	.word	0x00003df4
    3438:	00003e14 	.word	0x00003e14
    343c:	00003e34 	.word	0x00003e34
    3440:	00003749 	.word	0x00003749

00003444 <__swbuf_r>:
    3444:	b570      	push	{r4, r5, r6, lr}
    3446:	1c05      	adds	r5, r0, #0
    3448:	1c0e      	adds	r6, r1, #0
    344a:	1c14      	adds	r4, r2, #0
    344c:	2800      	cmp	r0, #0
    344e:	d004      	beq.n	345a <__swbuf_r+0x16>
    3450:	6983      	ldr	r3, [r0, #24]
    3452:	2b00      	cmp	r3, #0
    3454:	d101      	bne.n	345a <__swbuf_r+0x16>
    3456:	f000 f9b9 	bl	37cc <__sinit>
    345a:	4b23      	ldr	r3, [pc, #140]	; (34e8 <__swbuf_r+0xa4>)
    345c:	429c      	cmp	r4, r3
    345e:	d101      	bne.n	3464 <__swbuf_r+0x20>
    3460:	686c      	ldr	r4, [r5, #4]
    3462:	e008      	b.n	3476 <__swbuf_r+0x32>
    3464:	4b21      	ldr	r3, [pc, #132]	; (34ec <__swbuf_r+0xa8>)
    3466:	429c      	cmp	r4, r3
    3468:	d101      	bne.n	346e <__swbuf_r+0x2a>
    346a:	68ac      	ldr	r4, [r5, #8]
    346c:	e003      	b.n	3476 <__swbuf_r+0x32>
    346e:	4b20      	ldr	r3, [pc, #128]	; (34f0 <__swbuf_r+0xac>)
    3470:	429c      	cmp	r4, r3
    3472:	d100      	bne.n	3476 <__swbuf_r+0x32>
    3474:	68ec      	ldr	r4, [r5, #12]
    3476:	69a3      	ldr	r3, [r4, #24]
    3478:	60a3      	str	r3, [r4, #8]
    347a:	89a3      	ldrh	r3, [r4, #12]
    347c:	071b      	lsls	r3, r3, #28
    347e:	d50a      	bpl.n	3496 <__swbuf_r+0x52>
    3480:	6923      	ldr	r3, [r4, #16]
    3482:	2b00      	cmp	r3, #0
    3484:	d007      	beq.n	3496 <__swbuf_r+0x52>
    3486:	6823      	ldr	r3, [r4, #0]
    3488:	6922      	ldr	r2, [r4, #16]
    348a:	b2f6      	uxtb	r6, r6
    348c:	1a98      	subs	r0, r3, r2
    348e:	6963      	ldr	r3, [r4, #20]
    3490:	4298      	cmp	r0, r3
    3492:	db0f      	blt.n	34b4 <__swbuf_r+0x70>
    3494:	e008      	b.n	34a8 <__swbuf_r+0x64>
    3496:	1c28      	adds	r0, r5, #0
    3498:	1c21      	adds	r1, r4, #0
    349a:	f000 f82b 	bl	34f4 <__swsetup_r>
    349e:	2800      	cmp	r0, #0
    34a0:	d0f1      	beq.n	3486 <__swbuf_r+0x42>
    34a2:	2001      	movs	r0, #1
    34a4:	4240      	negs	r0, r0
    34a6:	e01d      	b.n	34e4 <__swbuf_r+0xa0>
    34a8:	1c28      	adds	r0, r5, #0
    34aa:	1c21      	adds	r1, r4, #0
    34ac:	f000 f920 	bl	36f0 <_fflush_r>
    34b0:	2800      	cmp	r0, #0
    34b2:	d1f6      	bne.n	34a2 <__swbuf_r+0x5e>
    34b4:	68a3      	ldr	r3, [r4, #8]
    34b6:	3001      	adds	r0, #1
    34b8:	3b01      	subs	r3, #1
    34ba:	60a3      	str	r3, [r4, #8]
    34bc:	6823      	ldr	r3, [r4, #0]
    34be:	1c5a      	adds	r2, r3, #1
    34c0:	6022      	str	r2, [r4, #0]
    34c2:	701e      	strb	r6, [r3, #0]
    34c4:	6963      	ldr	r3, [r4, #20]
    34c6:	4298      	cmp	r0, r3
    34c8:	d005      	beq.n	34d6 <__swbuf_r+0x92>
    34ca:	89a3      	ldrh	r3, [r4, #12]
    34cc:	1c30      	adds	r0, r6, #0
    34ce:	07db      	lsls	r3, r3, #31
    34d0:	d508      	bpl.n	34e4 <__swbuf_r+0xa0>
    34d2:	2e0a      	cmp	r6, #10
    34d4:	d106      	bne.n	34e4 <__swbuf_r+0xa0>
    34d6:	1c28      	adds	r0, r5, #0
    34d8:	1c21      	adds	r1, r4, #0
    34da:	f000 f909 	bl	36f0 <_fflush_r>
    34de:	2800      	cmp	r0, #0
    34e0:	d1df      	bne.n	34a2 <__swbuf_r+0x5e>
    34e2:	1c30      	adds	r0, r6, #0
    34e4:	bd70      	pop	{r4, r5, r6, pc}
    34e6:	46c0      	nop			; (mov r8, r8)
    34e8:	00003df4 	.word	0x00003df4
    34ec:	00003e14 	.word	0x00003e14
    34f0:	00003e34 	.word	0x00003e34

000034f4 <__swsetup_r>:
    34f4:	4b35      	ldr	r3, [pc, #212]	; (35cc <__swsetup_r+0xd8>)
    34f6:	b570      	push	{r4, r5, r6, lr}
    34f8:	681d      	ldr	r5, [r3, #0]
    34fa:	1c06      	adds	r6, r0, #0
    34fc:	1c0c      	adds	r4, r1, #0
    34fe:	2d00      	cmp	r5, #0
    3500:	d005      	beq.n	350e <__swsetup_r+0x1a>
    3502:	69ab      	ldr	r3, [r5, #24]
    3504:	2b00      	cmp	r3, #0
    3506:	d102      	bne.n	350e <__swsetup_r+0x1a>
    3508:	1c28      	adds	r0, r5, #0
    350a:	f000 f95f 	bl	37cc <__sinit>
    350e:	4b30      	ldr	r3, [pc, #192]	; (35d0 <__swsetup_r+0xdc>)
    3510:	429c      	cmp	r4, r3
    3512:	d101      	bne.n	3518 <__swsetup_r+0x24>
    3514:	686c      	ldr	r4, [r5, #4]
    3516:	e008      	b.n	352a <__swsetup_r+0x36>
    3518:	4b2e      	ldr	r3, [pc, #184]	; (35d4 <__swsetup_r+0xe0>)
    351a:	429c      	cmp	r4, r3
    351c:	d101      	bne.n	3522 <__swsetup_r+0x2e>
    351e:	68ac      	ldr	r4, [r5, #8]
    3520:	e003      	b.n	352a <__swsetup_r+0x36>
    3522:	4b2d      	ldr	r3, [pc, #180]	; (35d8 <__swsetup_r+0xe4>)
    3524:	429c      	cmp	r4, r3
    3526:	d100      	bne.n	352a <__swsetup_r+0x36>
    3528:	68ec      	ldr	r4, [r5, #12]
    352a:	89a3      	ldrh	r3, [r4, #12]
    352c:	b29a      	uxth	r2, r3
    352e:	0711      	lsls	r1, r2, #28
    3530:	d423      	bmi.n	357a <__swsetup_r+0x86>
    3532:	06d1      	lsls	r1, r2, #27
    3534:	d407      	bmi.n	3546 <__swsetup_r+0x52>
    3536:	2209      	movs	r2, #9
    3538:	2001      	movs	r0, #1
    353a:	6032      	str	r2, [r6, #0]
    353c:	3237      	adds	r2, #55	; 0x37
    353e:	4313      	orrs	r3, r2
    3540:	81a3      	strh	r3, [r4, #12]
    3542:	4240      	negs	r0, r0
    3544:	e040      	b.n	35c8 <__swsetup_r+0xd4>
    3546:	0753      	lsls	r3, r2, #29
    3548:	d513      	bpl.n	3572 <__swsetup_r+0x7e>
    354a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    354c:	2900      	cmp	r1, #0
    354e:	d008      	beq.n	3562 <__swsetup_r+0x6e>
    3550:	1c23      	adds	r3, r4, #0
    3552:	3344      	adds	r3, #68	; 0x44
    3554:	4299      	cmp	r1, r3
    3556:	d002      	beq.n	355e <__swsetup_r+0x6a>
    3558:	1c30      	adds	r0, r6, #0
    355a:	f000 fa2b 	bl	39b4 <_free_r>
    355e:	2300      	movs	r3, #0
    3560:	6363      	str	r3, [r4, #52]	; 0x34
    3562:	2224      	movs	r2, #36	; 0x24
    3564:	89a3      	ldrh	r3, [r4, #12]
    3566:	4393      	bics	r3, r2
    3568:	81a3      	strh	r3, [r4, #12]
    356a:	2300      	movs	r3, #0
    356c:	6063      	str	r3, [r4, #4]
    356e:	6923      	ldr	r3, [r4, #16]
    3570:	6023      	str	r3, [r4, #0]
    3572:	2208      	movs	r2, #8
    3574:	89a3      	ldrh	r3, [r4, #12]
    3576:	4313      	orrs	r3, r2
    3578:	81a3      	strh	r3, [r4, #12]
    357a:	6923      	ldr	r3, [r4, #16]
    357c:	2b00      	cmp	r3, #0
    357e:	d10b      	bne.n	3598 <__swsetup_r+0xa4>
    3580:	23a0      	movs	r3, #160	; 0xa0
    3582:	89a2      	ldrh	r2, [r4, #12]
    3584:	009b      	lsls	r3, r3, #2
    3586:	4013      	ands	r3, r2
    3588:	2280      	movs	r2, #128	; 0x80
    358a:	0092      	lsls	r2, r2, #2
    358c:	4293      	cmp	r3, r2
    358e:	d003      	beq.n	3598 <__swsetup_r+0xa4>
    3590:	1c30      	adds	r0, r6, #0
    3592:	1c21      	adds	r1, r4, #0
    3594:	f000 f9ac 	bl	38f0 <__smakebuf_r>
    3598:	2301      	movs	r3, #1
    359a:	89a2      	ldrh	r2, [r4, #12]
    359c:	4013      	ands	r3, r2
    359e:	d005      	beq.n	35ac <__swsetup_r+0xb8>
    35a0:	2300      	movs	r3, #0
    35a2:	60a3      	str	r3, [r4, #8]
    35a4:	6963      	ldr	r3, [r4, #20]
    35a6:	425b      	negs	r3, r3
    35a8:	61a3      	str	r3, [r4, #24]
    35aa:	e003      	b.n	35b4 <__swsetup_r+0xc0>
    35ac:	0791      	lsls	r1, r2, #30
    35ae:	d400      	bmi.n	35b2 <__swsetup_r+0xbe>
    35b0:	6963      	ldr	r3, [r4, #20]
    35b2:	60a3      	str	r3, [r4, #8]
    35b4:	2000      	movs	r0, #0
    35b6:	6923      	ldr	r3, [r4, #16]
    35b8:	4283      	cmp	r3, r0
    35ba:	d105      	bne.n	35c8 <__swsetup_r+0xd4>
    35bc:	0613      	lsls	r3, r2, #24
    35be:	d503      	bpl.n	35c8 <__swsetup_r+0xd4>
    35c0:	2340      	movs	r3, #64	; 0x40
    35c2:	431a      	orrs	r2, r3
    35c4:	81a2      	strh	r2, [r4, #12]
    35c6:	3801      	subs	r0, #1
    35c8:	bd70      	pop	{r4, r5, r6, pc}
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	20000068 	.word	0x20000068
    35d0:	00003df4 	.word	0x00003df4
    35d4:	00003e14 	.word	0x00003e14
    35d8:	00003e34 	.word	0x00003e34

000035dc <__sflush_r>:
    35dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    35de:	898a      	ldrh	r2, [r1, #12]
    35e0:	1c05      	adds	r5, r0, #0
    35e2:	1c0c      	adds	r4, r1, #0
    35e4:	0713      	lsls	r3, r2, #28
    35e6:	d45e      	bmi.n	36a6 <__sflush_r+0xca>
    35e8:	684b      	ldr	r3, [r1, #4]
    35ea:	2b00      	cmp	r3, #0
    35ec:	dc02      	bgt.n	35f4 <__sflush_r+0x18>
    35ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    35f0:	2b00      	cmp	r3, #0
    35f2:	dd1a      	ble.n	362a <__sflush_r+0x4e>
    35f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    35f6:	2f00      	cmp	r7, #0
    35f8:	d017      	beq.n	362a <__sflush_r+0x4e>
    35fa:	2300      	movs	r3, #0
    35fc:	682e      	ldr	r6, [r5, #0]
    35fe:	602b      	str	r3, [r5, #0]
    3600:	2380      	movs	r3, #128	; 0x80
    3602:	015b      	lsls	r3, r3, #5
    3604:	401a      	ands	r2, r3
    3606:	d001      	beq.n	360c <__sflush_r+0x30>
    3608:	6d62      	ldr	r2, [r4, #84]	; 0x54
    360a:	e015      	b.n	3638 <__sflush_r+0x5c>
    360c:	1c28      	adds	r0, r5, #0
    360e:	6a21      	ldr	r1, [r4, #32]
    3610:	2301      	movs	r3, #1
    3612:	47b8      	blx	r7
    3614:	1c02      	adds	r2, r0, #0
    3616:	1c43      	adds	r3, r0, #1
    3618:	d10e      	bne.n	3638 <__sflush_r+0x5c>
    361a:	682b      	ldr	r3, [r5, #0]
    361c:	2b00      	cmp	r3, #0
    361e:	d00b      	beq.n	3638 <__sflush_r+0x5c>
    3620:	2b1d      	cmp	r3, #29
    3622:	d001      	beq.n	3628 <__sflush_r+0x4c>
    3624:	2b16      	cmp	r3, #22
    3626:	d102      	bne.n	362e <__sflush_r+0x52>
    3628:	602e      	str	r6, [r5, #0]
    362a:	2000      	movs	r0, #0
    362c:	e05e      	b.n	36ec <__sflush_r+0x110>
    362e:	2140      	movs	r1, #64	; 0x40
    3630:	89a3      	ldrh	r3, [r4, #12]
    3632:	430b      	orrs	r3, r1
    3634:	81a3      	strh	r3, [r4, #12]
    3636:	e059      	b.n	36ec <__sflush_r+0x110>
    3638:	89a3      	ldrh	r3, [r4, #12]
    363a:	075b      	lsls	r3, r3, #29
    363c:	d506      	bpl.n	364c <__sflush_r+0x70>
    363e:	6863      	ldr	r3, [r4, #4]
    3640:	1ad2      	subs	r2, r2, r3
    3642:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3644:	2b00      	cmp	r3, #0
    3646:	d001      	beq.n	364c <__sflush_r+0x70>
    3648:	6c23      	ldr	r3, [r4, #64]	; 0x40
    364a:	1ad2      	subs	r2, r2, r3
    364c:	2300      	movs	r3, #0
    364e:	1c28      	adds	r0, r5, #0
    3650:	6a21      	ldr	r1, [r4, #32]
    3652:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3654:	47b8      	blx	r7
    3656:	89a3      	ldrh	r3, [r4, #12]
    3658:	1c42      	adds	r2, r0, #1
    365a:	d106      	bne.n	366a <__sflush_r+0x8e>
    365c:	682a      	ldr	r2, [r5, #0]
    365e:	2a00      	cmp	r2, #0
    3660:	d003      	beq.n	366a <__sflush_r+0x8e>
    3662:	2a1d      	cmp	r2, #29
    3664:	d001      	beq.n	366a <__sflush_r+0x8e>
    3666:	2a16      	cmp	r2, #22
    3668:	d119      	bne.n	369e <__sflush_r+0xc2>
    366a:	2200      	movs	r2, #0
    366c:	6062      	str	r2, [r4, #4]
    366e:	6922      	ldr	r2, [r4, #16]
    3670:	6022      	str	r2, [r4, #0]
    3672:	04db      	lsls	r3, r3, #19
    3674:	d505      	bpl.n	3682 <__sflush_r+0xa6>
    3676:	1c43      	adds	r3, r0, #1
    3678:	d102      	bne.n	3680 <__sflush_r+0xa4>
    367a:	682b      	ldr	r3, [r5, #0]
    367c:	2b00      	cmp	r3, #0
    367e:	d100      	bne.n	3682 <__sflush_r+0xa6>
    3680:	6560      	str	r0, [r4, #84]	; 0x54
    3682:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3684:	602e      	str	r6, [r5, #0]
    3686:	2900      	cmp	r1, #0
    3688:	d0cf      	beq.n	362a <__sflush_r+0x4e>
    368a:	1c23      	adds	r3, r4, #0
    368c:	3344      	adds	r3, #68	; 0x44
    368e:	4299      	cmp	r1, r3
    3690:	d002      	beq.n	3698 <__sflush_r+0xbc>
    3692:	1c28      	adds	r0, r5, #0
    3694:	f000 f98e 	bl	39b4 <_free_r>
    3698:	2000      	movs	r0, #0
    369a:	6360      	str	r0, [r4, #52]	; 0x34
    369c:	e026      	b.n	36ec <__sflush_r+0x110>
    369e:	2240      	movs	r2, #64	; 0x40
    36a0:	4313      	orrs	r3, r2
    36a2:	81a3      	strh	r3, [r4, #12]
    36a4:	e022      	b.n	36ec <__sflush_r+0x110>
    36a6:	690f      	ldr	r7, [r1, #16]
    36a8:	2f00      	cmp	r7, #0
    36aa:	d0be      	beq.n	362a <__sflush_r+0x4e>
    36ac:	680b      	ldr	r3, [r1, #0]
    36ae:	600f      	str	r7, [r1, #0]
    36b0:	1bdb      	subs	r3, r3, r7
    36b2:	9301      	str	r3, [sp, #4]
    36b4:	2300      	movs	r3, #0
    36b6:	0792      	lsls	r2, r2, #30
    36b8:	d100      	bne.n	36bc <__sflush_r+0xe0>
    36ba:	694b      	ldr	r3, [r1, #20]
    36bc:	60a3      	str	r3, [r4, #8]
    36be:	9b01      	ldr	r3, [sp, #4]
    36c0:	2b00      	cmp	r3, #0
    36c2:	ddb2      	ble.n	362a <__sflush_r+0x4e>
    36c4:	1c28      	adds	r0, r5, #0
    36c6:	6a21      	ldr	r1, [r4, #32]
    36c8:	1c3a      	adds	r2, r7, #0
    36ca:	9b01      	ldr	r3, [sp, #4]
    36cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    36ce:	47b0      	blx	r6
    36d0:	2800      	cmp	r0, #0
    36d2:	dc06      	bgt.n	36e2 <__sflush_r+0x106>
    36d4:	2240      	movs	r2, #64	; 0x40
    36d6:	2001      	movs	r0, #1
    36d8:	89a3      	ldrh	r3, [r4, #12]
    36da:	4240      	negs	r0, r0
    36dc:	4313      	orrs	r3, r2
    36de:	81a3      	strh	r3, [r4, #12]
    36e0:	e004      	b.n	36ec <__sflush_r+0x110>
    36e2:	9b01      	ldr	r3, [sp, #4]
    36e4:	183f      	adds	r7, r7, r0
    36e6:	1a1b      	subs	r3, r3, r0
    36e8:	9301      	str	r3, [sp, #4]
    36ea:	e7e8      	b.n	36be <__sflush_r+0xe2>
    36ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000036f0 <_fflush_r>:
    36f0:	b538      	push	{r3, r4, r5, lr}
    36f2:	690b      	ldr	r3, [r1, #16]
    36f4:	1c05      	adds	r5, r0, #0
    36f6:	1c0c      	adds	r4, r1, #0
    36f8:	2b00      	cmp	r3, #0
    36fa:	d101      	bne.n	3700 <_fflush_r+0x10>
    36fc:	2000      	movs	r0, #0
    36fe:	e01c      	b.n	373a <_fflush_r+0x4a>
    3700:	2800      	cmp	r0, #0
    3702:	d004      	beq.n	370e <_fflush_r+0x1e>
    3704:	6983      	ldr	r3, [r0, #24]
    3706:	2b00      	cmp	r3, #0
    3708:	d101      	bne.n	370e <_fflush_r+0x1e>
    370a:	f000 f85f 	bl	37cc <__sinit>
    370e:	4b0b      	ldr	r3, [pc, #44]	; (373c <_fflush_r+0x4c>)
    3710:	429c      	cmp	r4, r3
    3712:	d101      	bne.n	3718 <_fflush_r+0x28>
    3714:	686c      	ldr	r4, [r5, #4]
    3716:	e008      	b.n	372a <_fflush_r+0x3a>
    3718:	4b09      	ldr	r3, [pc, #36]	; (3740 <_fflush_r+0x50>)
    371a:	429c      	cmp	r4, r3
    371c:	d101      	bne.n	3722 <_fflush_r+0x32>
    371e:	68ac      	ldr	r4, [r5, #8]
    3720:	e003      	b.n	372a <_fflush_r+0x3a>
    3722:	4b08      	ldr	r3, [pc, #32]	; (3744 <_fflush_r+0x54>)
    3724:	429c      	cmp	r4, r3
    3726:	d100      	bne.n	372a <_fflush_r+0x3a>
    3728:	68ec      	ldr	r4, [r5, #12]
    372a:	220c      	movs	r2, #12
    372c:	5ea3      	ldrsh	r3, [r4, r2]
    372e:	2b00      	cmp	r3, #0
    3730:	d0e4      	beq.n	36fc <_fflush_r+0xc>
    3732:	1c28      	adds	r0, r5, #0
    3734:	1c21      	adds	r1, r4, #0
    3736:	f7ff ff51 	bl	35dc <__sflush_r>
    373a:	bd38      	pop	{r3, r4, r5, pc}
    373c:	00003df4 	.word	0x00003df4
    3740:	00003e14 	.word	0x00003e14
    3744:	00003e34 	.word	0x00003e34

00003748 <_cleanup_r>:
    3748:	b508      	push	{r3, lr}
    374a:	4902      	ldr	r1, [pc, #8]	; (3754 <_cleanup_r+0xc>)
    374c:	f000 f8ae 	bl	38ac <_fwalk_reent>
    3750:	bd08      	pop	{r3, pc}
    3752:	46c0      	nop			; (mov r8, r8)
    3754:	000036f1 	.word	0x000036f1

00003758 <std.isra.0>:
    3758:	2300      	movs	r3, #0
    375a:	b510      	push	{r4, lr}
    375c:	1c04      	adds	r4, r0, #0
    375e:	6003      	str	r3, [r0, #0]
    3760:	6043      	str	r3, [r0, #4]
    3762:	6083      	str	r3, [r0, #8]
    3764:	8181      	strh	r1, [r0, #12]
    3766:	6643      	str	r3, [r0, #100]	; 0x64
    3768:	81c2      	strh	r2, [r0, #14]
    376a:	6103      	str	r3, [r0, #16]
    376c:	6143      	str	r3, [r0, #20]
    376e:	6183      	str	r3, [r0, #24]
    3770:	1c19      	adds	r1, r3, #0
    3772:	2208      	movs	r2, #8
    3774:	305c      	adds	r0, #92	; 0x5c
    3776:	f7ff fd62 	bl	323e <memset>
    377a:	4b05      	ldr	r3, [pc, #20]	; (3790 <std.isra.0+0x38>)
    377c:	6224      	str	r4, [r4, #32]
    377e:	6263      	str	r3, [r4, #36]	; 0x24
    3780:	4b04      	ldr	r3, [pc, #16]	; (3794 <std.isra.0+0x3c>)
    3782:	62a3      	str	r3, [r4, #40]	; 0x28
    3784:	4b04      	ldr	r3, [pc, #16]	; (3798 <std.isra.0+0x40>)
    3786:	62e3      	str	r3, [r4, #44]	; 0x2c
    3788:	4b04      	ldr	r3, [pc, #16]	; (379c <std.isra.0+0x44>)
    378a:	6323      	str	r3, [r4, #48]	; 0x30
    378c:	bd10      	pop	{r4, pc}
    378e:	46c0      	nop			; (mov r8, r8)
    3790:	00003b15 	.word	0x00003b15
    3794:	00003b3d 	.word	0x00003b3d
    3798:	00003b75 	.word	0x00003b75
    379c:	00003ba1 	.word	0x00003ba1

000037a0 <__sfmoreglue>:
    37a0:	b570      	push	{r4, r5, r6, lr}
    37a2:	2568      	movs	r5, #104	; 0x68
    37a4:	1e4b      	subs	r3, r1, #1
    37a6:	435d      	muls	r5, r3
    37a8:	1c0e      	adds	r6, r1, #0
    37aa:	1c29      	adds	r1, r5, #0
    37ac:	3174      	adds	r1, #116	; 0x74
    37ae:	f000 f947 	bl	3a40 <_malloc_r>
    37b2:	1e04      	subs	r4, r0, #0
    37b4:	d008      	beq.n	37c8 <__sfmoreglue+0x28>
    37b6:	2100      	movs	r1, #0
    37b8:	1c2a      	adds	r2, r5, #0
    37ba:	6001      	str	r1, [r0, #0]
    37bc:	6046      	str	r6, [r0, #4]
    37be:	300c      	adds	r0, #12
    37c0:	60a0      	str	r0, [r4, #8]
    37c2:	3268      	adds	r2, #104	; 0x68
    37c4:	f7ff fd3b 	bl	323e <memset>
    37c8:	1c20      	adds	r0, r4, #0
    37ca:	bd70      	pop	{r4, r5, r6, pc}

000037cc <__sinit>:
    37cc:	6983      	ldr	r3, [r0, #24]
    37ce:	b513      	push	{r0, r1, r4, lr}
    37d0:	2b00      	cmp	r3, #0
    37d2:	d128      	bne.n	3826 <__sinit+0x5a>
    37d4:	6483      	str	r3, [r0, #72]	; 0x48
    37d6:	64c3      	str	r3, [r0, #76]	; 0x4c
    37d8:	6503      	str	r3, [r0, #80]	; 0x50
    37da:	4b13      	ldr	r3, [pc, #76]	; (3828 <__sinit+0x5c>)
    37dc:	4a13      	ldr	r2, [pc, #76]	; (382c <__sinit+0x60>)
    37de:	681b      	ldr	r3, [r3, #0]
    37e0:	6282      	str	r2, [r0, #40]	; 0x28
    37e2:	9301      	str	r3, [sp, #4]
    37e4:	4298      	cmp	r0, r3
    37e6:	d101      	bne.n	37ec <__sinit+0x20>
    37e8:	2301      	movs	r3, #1
    37ea:	6183      	str	r3, [r0, #24]
    37ec:	1c04      	adds	r4, r0, #0
    37ee:	f000 f81f 	bl	3830 <__sfp>
    37f2:	6060      	str	r0, [r4, #4]
    37f4:	1c20      	adds	r0, r4, #0
    37f6:	f000 f81b 	bl	3830 <__sfp>
    37fa:	60a0      	str	r0, [r4, #8]
    37fc:	1c20      	adds	r0, r4, #0
    37fe:	f000 f817 	bl	3830 <__sfp>
    3802:	2104      	movs	r1, #4
    3804:	60e0      	str	r0, [r4, #12]
    3806:	2200      	movs	r2, #0
    3808:	6860      	ldr	r0, [r4, #4]
    380a:	f7ff ffa5 	bl	3758 <std.isra.0>
    380e:	68a0      	ldr	r0, [r4, #8]
    3810:	2109      	movs	r1, #9
    3812:	2201      	movs	r2, #1
    3814:	f7ff ffa0 	bl	3758 <std.isra.0>
    3818:	68e0      	ldr	r0, [r4, #12]
    381a:	2112      	movs	r1, #18
    381c:	2202      	movs	r2, #2
    381e:	f7ff ff9b 	bl	3758 <std.isra.0>
    3822:	2301      	movs	r3, #1
    3824:	61a3      	str	r3, [r4, #24]
    3826:	bd13      	pop	{r0, r1, r4, pc}
    3828:	00003df0 	.word	0x00003df0
    382c:	00003749 	.word	0x00003749

00003830 <__sfp>:
    3830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3832:	4b1d      	ldr	r3, [pc, #116]	; (38a8 <__sfp+0x78>)
    3834:	1c06      	adds	r6, r0, #0
    3836:	681d      	ldr	r5, [r3, #0]
    3838:	69ab      	ldr	r3, [r5, #24]
    383a:	2b00      	cmp	r3, #0
    383c:	d102      	bne.n	3844 <__sfp+0x14>
    383e:	1c28      	adds	r0, r5, #0
    3840:	f7ff ffc4 	bl	37cc <__sinit>
    3844:	3548      	adds	r5, #72	; 0x48
    3846:	68ac      	ldr	r4, [r5, #8]
    3848:	686b      	ldr	r3, [r5, #4]
    384a:	3b01      	subs	r3, #1
    384c:	d405      	bmi.n	385a <__sfp+0x2a>
    384e:	220c      	movs	r2, #12
    3850:	5ea7      	ldrsh	r7, [r4, r2]
    3852:	2f00      	cmp	r7, #0
    3854:	d010      	beq.n	3878 <__sfp+0x48>
    3856:	3468      	adds	r4, #104	; 0x68
    3858:	e7f7      	b.n	384a <__sfp+0x1a>
    385a:	682b      	ldr	r3, [r5, #0]
    385c:	2b00      	cmp	r3, #0
    385e:	d106      	bne.n	386e <__sfp+0x3e>
    3860:	1c30      	adds	r0, r6, #0
    3862:	2104      	movs	r1, #4
    3864:	f7ff ff9c 	bl	37a0 <__sfmoreglue>
    3868:	6028      	str	r0, [r5, #0]
    386a:	2800      	cmp	r0, #0
    386c:	d001      	beq.n	3872 <__sfp+0x42>
    386e:	682d      	ldr	r5, [r5, #0]
    3870:	e7e9      	b.n	3846 <__sfp+0x16>
    3872:	230c      	movs	r3, #12
    3874:	6033      	str	r3, [r6, #0]
    3876:	e016      	b.n	38a6 <__sfp+0x76>
    3878:	2301      	movs	r3, #1
    387a:	1c20      	adds	r0, r4, #0
    387c:	425b      	negs	r3, r3
    387e:	81e3      	strh	r3, [r4, #14]
    3880:	3302      	adds	r3, #2
    3882:	81a3      	strh	r3, [r4, #12]
    3884:	6667      	str	r7, [r4, #100]	; 0x64
    3886:	6027      	str	r7, [r4, #0]
    3888:	60a7      	str	r7, [r4, #8]
    388a:	6067      	str	r7, [r4, #4]
    388c:	6127      	str	r7, [r4, #16]
    388e:	6167      	str	r7, [r4, #20]
    3890:	61a7      	str	r7, [r4, #24]
    3892:	305c      	adds	r0, #92	; 0x5c
    3894:	1c39      	adds	r1, r7, #0
    3896:	2208      	movs	r2, #8
    3898:	f7ff fcd1 	bl	323e <memset>
    389c:	1c20      	adds	r0, r4, #0
    389e:	6367      	str	r7, [r4, #52]	; 0x34
    38a0:	63a7      	str	r7, [r4, #56]	; 0x38
    38a2:	64a7      	str	r7, [r4, #72]	; 0x48
    38a4:	64e7      	str	r7, [r4, #76]	; 0x4c
    38a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38a8:	00003df0 	.word	0x00003df0

000038ac <_fwalk_reent>:
    38ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    38ae:	1c04      	adds	r4, r0, #0
    38b0:	1c07      	adds	r7, r0, #0
    38b2:	2600      	movs	r6, #0
    38b4:	9101      	str	r1, [sp, #4]
    38b6:	3448      	adds	r4, #72	; 0x48
    38b8:	2c00      	cmp	r4, #0
    38ba:	d016      	beq.n	38ea <_fwalk_reent+0x3e>
    38bc:	6863      	ldr	r3, [r4, #4]
    38be:	68a5      	ldr	r5, [r4, #8]
    38c0:	9300      	str	r3, [sp, #0]
    38c2:	9b00      	ldr	r3, [sp, #0]
    38c4:	3b01      	subs	r3, #1
    38c6:	9300      	str	r3, [sp, #0]
    38c8:	d40d      	bmi.n	38e6 <_fwalk_reent+0x3a>
    38ca:	89ab      	ldrh	r3, [r5, #12]
    38cc:	2b01      	cmp	r3, #1
    38ce:	d908      	bls.n	38e2 <_fwalk_reent+0x36>
    38d0:	220e      	movs	r2, #14
    38d2:	5eab      	ldrsh	r3, [r5, r2]
    38d4:	3301      	adds	r3, #1
    38d6:	d004      	beq.n	38e2 <_fwalk_reent+0x36>
    38d8:	1c38      	adds	r0, r7, #0
    38da:	1c29      	adds	r1, r5, #0
    38dc:	9b01      	ldr	r3, [sp, #4]
    38de:	4798      	blx	r3
    38e0:	4306      	orrs	r6, r0
    38e2:	3568      	adds	r5, #104	; 0x68
    38e4:	e7ed      	b.n	38c2 <_fwalk_reent+0x16>
    38e6:	6824      	ldr	r4, [r4, #0]
    38e8:	e7e6      	b.n	38b8 <_fwalk_reent+0xc>
    38ea:	1c30      	adds	r0, r6, #0
    38ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000038f0 <__smakebuf_r>:
    38f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38f2:	898b      	ldrh	r3, [r1, #12]
    38f4:	b091      	sub	sp, #68	; 0x44
    38f6:	079b      	lsls	r3, r3, #30
    38f8:	d506      	bpl.n	3908 <__smakebuf_r+0x18>
    38fa:	1c0b      	adds	r3, r1, #0
    38fc:	3347      	adds	r3, #71	; 0x47
    38fe:	600b      	str	r3, [r1, #0]
    3900:	610b      	str	r3, [r1, #16]
    3902:	2301      	movs	r3, #1
    3904:	614b      	str	r3, [r1, #20]
    3906:	e045      	b.n	3994 <__smakebuf_r+0xa4>
    3908:	1c0c      	adds	r4, r1, #0
    390a:	230e      	movs	r3, #14
    390c:	5ec9      	ldrsh	r1, [r1, r3]
    390e:	1c06      	adds	r6, r0, #0
    3910:	2900      	cmp	r1, #0
    3912:	da04      	bge.n	391e <__smakebuf_r+0x2e>
    3914:	2380      	movs	r3, #128	; 0x80
    3916:	89a5      	ldrh	r5, [r4, #12]
    3918:	401d      	ands	r5, r3
    391a:	d110      	bne.n	393e <__smakebuf_r+0x4e>
    391c:	e00c      	b.n	3938 <__smakebuf_r+0x48>
    391e:	aa01      	add	r2, sp, #4
    3920:	f000 f96a 	bl	3bf8 <_fstat_r>
    3924:	2800      	cmp	r0, #0
    3926:	dbf5      	blt.n	3914 <__smakebuf_r+0x24>
    3928:	23f0      	movs	r3, #240	; 0xf0
    392a:	9d02      	ldr	r5, [sp, #8]
    392c:	021b      	lsls	r3, r3, #8
    392e:	401d      	ands	r5, r3
    3930:	4b19      	ldr	r3, [pc, #100]	; (3998 <__smakebuf_r+0xa8>)
    3932:	18ed      	adds	r5, r5, r3
    3934:	426b      	negs	r3, r5
    3936:	415d      	adcs	r5, r3
    3938:	2780      	movs	r7, #128	; 0x80
    393a:	00ff      	lsls	r7, r7, #3
    393c:	e001      	b.n	3942 <__smakebuf_r+0x52>
    393e:	2500      	movs	r5, #0
    3940:	2740      	movs	r7, #64	; 0x40
    3942:	1c30      	adds	r0, r6, #0
    3944:	1c39      	adds	r1, r7, #0
    3946:	f000 f87b 	bl	3a40 <_malloc_r>
    394a:	2800      	cmp	r0, #0
    394c:	d10c      	bne.n	3968 <__smakebuf_r+0x78>
    394e:	89a3      	ldrh	r3, [r4, #12]
    3950:	059a      	lsls	r2, r3, #22
    3952:	d41f      	bmi.n	3994 <__smakebuf_r+0xa4>
    3954:	2202      	movs	r2, #2
    3956:	4313      	orrs	r3, r2
    3958:	81a3      	strh	r3, [r4, #12]
    395a:	1c23      	adds	r3, r4, #0
    395c:	3347      	adds	r3, #71	; 0x47
    395e:	6023      	str	r3, [r4, #0]
    3960:	6123      	str	r3, [r4, #16]
    3962:	2301      	movs	r3, #1
    3964:	6163      	str	r3, [r4, #20]
    3966:	e015      	b.n	3994 <__smakebuf_r+0xa4>
    3968:	2280      	movs	r2, #128	; 0x80
    396a:	4b0c      	ldr	r3, [pc, #48]	; (399c <__smakebuf_r+0xac>)
    396c:	62b3      	str	r3, [r6, #40]	; 0x28
    396e:	89a3      	ldrh	r3, [r4, #12]
    3970:	6020      	str	r0, [r4, #0]
    3972:	4313      	orrs	r3, r2
    3974:	81a3      	strh	r3, [r4, #12]
    3976:	6120      	str	r0, [r4, #16]
    3978:	6167      	str	r7, [r4, #20]
    397a:	2d00      	cmp	r5, #0
    397c:	d00a      	beq.n	3994 <__smakebuf_r+0xa4>
    397e:	230e      	movs	r3, #14
    3980:	5ee1      	ldrsh	r1, [r4, r3]
    3982:	1c30      	adds	r0, r6, #0
    3984:	f000 f94a 	bl	3c1c <_isatty_r>
    3988:	2800      	cmp	r0, #0
    398a:	d003      	beq.n	3994 <__smakebuf_r+0xa4>
    398c:	2201      	movs	r2, #1
    398e:	89a3      	ldrh	r3, [r4, #12]
    3990:	4313      	orrs	r3, r2
    3992:	81a3      	strh	r3, [r4, #12]
    3994:	b011      	add	sp, #68	; 0x44
    3996:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3998:	ffffe000 	.word	0xffffe000
    399c:	00003749 	.word	0x00003749

000039a0 <malloc>:
    39a0:	b508      	push	{r3, lr}
    39a2:	4b03      	ldr	r3, [pc, #12]	; (39b0 <malloc+0x10>)
    39a4:	1c01      	adds	r1, r0, #0
    39a6:	6818      	ldr	r0, [r3, #0]
    39a8:	f000 f84a 	bl	3a40 <_malloc_r>
    39ac:	bd08      	pop	{r3, pc}
    39ae:	46c0      	nop			; (mov r8, r8)
    39b0:	20000068 	.word	0x20000068

000039b4 <_free_r>:
    39b4:	b530      	push	{r4, r5, lr}
    39b6:	2900      	cmp	r1, #0
    39b8:	d03e      	beq.n	3a38 <_free_r+0x84>
    39ba:	3904      	subs	r1, #4
    39bc:	680b      	ldr	r3, [r1, #0]
    39be:	2b00      	cmp	r3, #0
    39c0:	da00      	bge.n	39c4 <_free_r+0x10>
    39c2:	18c9      	adds	r1, r1, r3
    39c4:	4a1d      	ldr	r2, [pc, #116]	; (3a3c <_free_r+0x88>)
    39c6:	6813      	ldr	r3, [r2, #0]
    39c8:	1c14      	adds	r4, r2, #0
    39ca:	2b00      	cmp	r3, #0
    39cc:	d102      	bne.n	39d4 <_free_r+0x20>
    39ce:	604b      	str	r3, [r1, #4]
    39d0:	6011      	str	r1, [r2, #0]
    39d2:	e031      	b.n	3a38 <_free_r+0x84>
    39d4:	4299      	cmp	r1, r3
    39d6:	d20d      	bcs.n	39f4 <_free_r+0x40>
    39d8:	6808      	ldr	r0, [r1, #0]
    39da:	180a      	adds	r2, r1, r0
    39dc:	429a      	cmp	r2, r3
    39de:	d103      	bne.n	39e8 <_free_r+0x34>
    39e0:	6813      	ldr	r3, [r2, #0]
    39e2:	18c3      	adds	r3, r0, r3
    39e4:	600b      	str	r3, [r1, #0]
    39e6:	6853      	ldr	r3, [r2, #4]
    39e8:	604b      	str	r3, [r1, #4]
    39ea:	6021      	str	r1, [r4, #0]
    39ec:	e024      	b.n	3a38 <_free_r+0x84>
    39ee:	428a      	cmp	r2, r1
    39f0:	d803      	bhi.n	39fa <_free_r+0x46>
    39f2:	1c13      	adds	r3, r2, #0
    39f4:	685a      	ldr	r2, [r3, #4]
    39f6:	2a00      	cmp	r2, #0
    39f8:	d1f9      	bne.n	39ee <_free_r+0x3a>
    39fa:	681d      	ldr	r5, [r3, #0]
    39fc:	195c      	adds	r4, r3, r5
    39fe:	428c      	cmp	r4, r1
    3a00:	d10b      	bne.n	3a1a <_free_r+0x66>
    3a02:	6809      	ldr	r1, [r1, #0]
    3a04:	1869      	adds	r1, r5, r1
    3a06:	1858      	adds	r0, r3, r1
    3a08:	6019      	str	r1, [r3, #0]
    3a0a:	4290      	cmp	r0, r2
    3a0c:	d114      	bne.n	3a38 <_free_r+0x84>
    3a0e:	6810      	ldr	r0, [r2, #0]
    3a10:	6852      	ldr	r2, [r2, #4]
    3a12:	1809      	adds	r1, r1, r0
    3a14:	6019      	str	r1, [r3, #0]
    3a16:	605a      	str	r2, [r3, #4]
    3a18:	e00e      	b.n	3a38 <_free_r+0x84>
    3a1a:	428c      	cmp	r4, r1
    3a1c:	d902      	bls.n	3a24 <_free_r+0x70>
    3a1e:	230c      	movs	r3, #12
    3a20:	6003      	str	r3, [r0, #0]
    3a22:	e009      	b.n	3a38 <_free_r+0x84>
    3a24:	6808      	ldr	r0, [r1, #0]
    3a26:	180c      	adds	r4, r1, r0
    3a28:	4294      	cmp	r4, r2
    3a2a:	d103      	bne.n	3a34 <_free_r+0x80>
    3a2c:	6814      	ldr	r4, [r2, #0]
    3a2e:	6852      	ldr	r2, [r2, #4]
    3a30:	1900      	adds	r0, r0, r4
    3a32:	6008      	str	r0, [r1, #0]
    3a34:	604a      	str	r2, [r1, #4]
    3a36:	6059      	str	r1, [r3, #4]
    3a38:	bd30      	pop	{r4, r5, pc}
    3a3a:	46c0      	nop			; (mov r8, r8)
    3a3c:	200001a0 	.word	0x200001a0

00003a40 <_malloc_r>:
    3a40:	2303      	movs	r3, #3
    3a42:	b570      	push	{r4, r5, r6, lr}
    3a44:	1ccc      	adds	r4, r1, #3
    3a46:	439c      	bics	r4, r3
    3a48:	3408      	adds	r4, #8
    3a4a:	1c05      	adds	r5, r0, #0
    3a4c:	2c0c      	cmp	r4, #12
    3a4e:	d201      	bcs.n	3a54 <_malloc_r+0x14>
    3a50:	240c      	movs	r4, #12
    3a52:	e005      	b.n	3a60 <_malloc_r+0x20>
    3a54:	2c00      	cmp	r4, #0
    3a56:	da03      	bge.n	3a60 <_malloc_r+0x20>
    3a58:	230c      	movs	r3, #12
    3a5a:	2000      	movs	r0, #0
    3a5c:	602b      	str	r3, [r5, #0]
    3a5e:	e042      	b.n	3ae6 <_malloc_r+0xa6>
    3a60:	428c      	cmp	r4, r1
    3a62:	d3f9      	bcc.n	3a58 <_malloc_r+0x18>
    3a64:	4a20      	ldr	r2, [pc, #128]	; (3ae8 <_malloc_r+0xa8>)
    3a66:	6813      	ldr	r3, [r2, #0]
    3a68:	1c10      	adds	r0, r2, #0
    3a6a:	1c19      	adds	r1, r3, #0
    3a6c:	2900      	cmp	r1, #0
    3a6e:	d013      	beq.n	3a98 <_malloc_r+0x58>
    3a70:	680a      	ldr	r2, [r1, #0]
    3a72:	1b12      	subs	r2, r2, r4
    3a74:	d40d      	bmi.n	3a92 <_malloc_r+0x52>
    3a76:	2a0b      	cmp	r2, #11
    3a78:	d902      	bls.n	3a80 <_malloc_r+0x40>
    3a7a:	600a      	str	r2, [r1, #0]
    3a7c:	188b      	adds	r3, r1, r2
    3a7e:	e01f      	b.n	3ac0 <_malloc_r+0x80>
    3a80:	428b      	cmp	r3, r1
    3a82:	d102      	bne.n	3a8a <_malloc_r+0x4a>
    3a84:	685a      	ldr	r2, [r3, #4]
    3a86:	6002      	str	r2, [r0, #0]
    3a88:	e01b      	b.n	3ac2 <_malloc_r+0x82>
    3a8a:	684a      	ldr	r2, [r1, #4]
    3a8c:	605a      	str	r2, [r3, #4]
    3a8e:	1c0b      	adds	r3, r1, #0
    3a90:	e017      	b.n	3ac2 <_malloc_r+0x82>
    3a92:	1c0b      	adds	r3, r1, #0
    3a94:	6849      	ldr	r1, [r1, #4]
    3a96:	e7e9      	b.n	3a6c <_malloc_r+0x2c>
    3a98:	4e14      	ldr	r6, [pc, #80]	; (3aec <_malloc_r+0xac>)
    3a9a:	6833      	ldr	r3, [r6, #0]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d103      	bne.n	3aa8 <_malloc_r+0x68>
    3aa0:	1c28      	adds	r0, r5, #0
    3aa2:	f000 f825 	bl	3af0 <_sbrk_r>
    3aa6:	6030      	str	r0, [r6, #0]
    3aa8:	1c28      	adds	r0, r5, #0
    3aaa:	1c21      	adds	r1, r4, #0
    3aac:	f000 f820 	bl	3af0 <_sbrk_r>
    3ab0:	1c03      	adds	r3, r0, #0
    3ab2:	1c42      	adds	r2, r0, #1
    3ab4:	d0d0      	beq.n	3a58 <_malloc_r+0x18>
    3ab6:	2203      	movs	r2, #3
    3ab8:	1cc6      	adds	r6, r0, #3
    3aba:	4396      	bics	r6, r2
    3abc:	4286      	cmp	r6, r0
    3abe:	d10a      	bne.n	3ad6 <_malloc_r+0x96>
    3ac0:	601c      	str	r4, [r3, #0]
    3ac2:	1c18      	adds	r0, r3, #0
    3ac4:	2107      	movs	r1, #7
    3ac6:	300b      	adds	r0, #11
    3ac8:	1d1a      	adds	r2, r3, #4
    3aca:	4388      	bics	r0, r1
    3acc:	1a82      	subs	r2, r0, r2
    3ace:	d00a      	beq.n	3ae6 <_malloc_r+0xa6>
    3ad0:	4251      	negs	r1, r2
    3ad2:	5099      	str	r1, [r3, r2]
    3ad4:	e007      	b.n	3ae6 <_malloc_r+0xa6>
    3ad6:	1a31      	subs	r1, r6, r0
    3ad8:	1c28      	adds	r0, r5, #0
    3ada:	f000 f809 	bl	3af0 <_sbrk_r>
    3ade:	1c43      	adds	r3, r0, #1
    3ae0:	d0ba      	beq.n	3a58 <_malloc_r+0x18>
    3ae2:	1c33      	adds	r3, r6, #0
    3ae4:	e7ec      	b.n	3ac0 <_malloc_r+0x80>
    3ae6:	bd70      	pop	{r4, r5, r6, pc}
    3ae8:	200001a0 	.word	0x200001a0
    3aec:	2000019c 	.word	0x2000019c

00003af0 <_sbrk_r>:
    3af0:	b538      	push	{r3, r4, r5, lr}
    3af2:	2300      	movs	r3, #0
    3af4:	4c06      	ldr	r4, [pc, #24]	; (3b10 <_sbrk_r+0x20>)
    3af6:	1c05      	adds	r5, r0, #0
    3af8:	1c08      	adds	r0, r1, #0
    3afa:	6023      	str	r3, [r4, #0]
    3afc:	f7fe fa3e 	bl	1f7c <_sbrk>
    3b00:	1c43      	adds	r3, r0, #1
    3b02:	d103      	bne.n	3b0c <_sbrk_r+0x1c>
    3b04:	6823      	ldr	r3, [r4, #0]
    3b06:	2b00      	cmp	r3, #0
    3b08:	d000      	beq.n	3b0c <_sbrk_r+0x1c>
    3b0a:	602b      	str	r3, [r5, #0]
    3b0c:	bd38      	pop	{r3, r4, r5, pc}
    3b0e:	46c0      	nop			; (mov r8, r8)
    3b10:	20000264 	.word	0x20000264

00003b14 <__sread>:
    3b14:	b538      	push	{r3, r4, r5, lr}
    3b16:	1c0c      	adds	r4, r1, #0
    3b18:	250e      	movs	r5, #14
    3b1a:	5f49      	ldrsh	r1, [r1, r5]
    3b1c:	f000 f8a4 	bl	3c68 <_read_r>
    3b20:	2800      	cmp	r0, #0
    3b22:	db03      	blt.n	3b2c <__sread+0x18>
    3b24:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3b26:	181b      	adds	r3, r3, r0
    3b28:	6563      	str	r3, [r4, #84]	; 0x54
    3b2a:	e003      	b.n	3b34 <__sread+0x20>
    3b2c:	89a2      	ldrh	r2, [r4, #12]
    3b2e:	4b02      	ldr	r3, [pc, #8]	; (3b38 <__sread+0x24>)
    3b30:	4013      	ands	r3, r2
    3b32:	81a3      	strh	r3, [r4, #12]
    3b34:	bd38      	pop	{r3, r4, r5, pc}
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	ffffefff 	.word	0xffffefff

00003b3c <__swrite>:
    3b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b3e:	1c1e      	adds	r6, r3, #0
    3b40:	898b      	ldrh	r3, [r1, #12]
    3b42:	1c05      	adds	r5, r0, #0
    3b44:	1c0c      	adds	r4, r1, #0
    3b46:	1c17      	adds	r7, r2, #0
    3b48:	05db      	lsls	r3, r3, #23
    3b4a:	d505      	bpl.n	3b58 <__swrite+0x1c>
    3b4c:	230e      	movs	r3, #14
    3b4e:	5ec9      	ldrsh	r1, [r1, r3]
    3b50:	2200      	movs	r2, #0
    3b52:	2302      	movs	r3, #2
    3b54:	f000 f874 	bl	3c40 <_lseek_r>
    3b58:	89a2      	ldrh	r2, [r4, #12]
    3b5a:	4b05      	ldr	r3, [pc, #20]	; (3b70 <__swrite+0x34>)
    3b5c:	1c28      	adds	r0, r5, #0
    3b5e:	4013      	ands	r3, r2
    3b60:	81a3      	strh	r3, [r4, #12]
    3b62:	1c3a      	adds	r2, r7, #0
    3b64:	230e      	movs	r3, #14
    3b66:	5ee1      	ldrsh	r1, [r4, r3]
    3b68:	1c33      	adds	r3, r6, #0
    3b6a:	f000 f81f 	bl	3bac <_write_r>
    3b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b70:	ffffefff 	.word	0xffffefff

00003b74 <__sseek>:
    3b74:	b538      	push	{r3, r4, r5, lr}
    3b76:	1c0c      	adds	r4, r1, #0
    3b78:	250e      	movs	r5, #14
    3b7a:	5f49      	ldrsh	r1, [r1, r5]
    3b7c:	f000 f860 	bl	3c40 <_lseek_r>
    3b80:	89a3      	ldrh	r3, [r4, #12]
    3b82:	1c42      	adds	r2, r0, #1
    3b84:	d103      	bne.n	3b8e <__sseek+0x1a>
    3b86:	4a05      	ldr	r2, [pc, #20]	; (3b9c <__sseek+0x28>)
    3b88:	4013      	ands	r3, r2
    3b8a:	81a3      	strh	r3, [r4, #12]
    3b8c:	e004      	b.n	3b98 <__sseek+0x24>
    3b8e:	2280      	movs	r2, #128	; 0x80
    3b90:	0152      	lsls	r2, r2, #5
    3b92:	4313      	orrs	r3, r2
    3b94:	81a3      	strh	r3, [r4, #12]
    3b96:	6560      	str	r0, [r4, #84]	; 0x54
    3b98:	bd38      	pop	{r3, r4, r5, pc}
    3b9a:	46c0      	nop			; (mov r8, r8)
    3b9c:	ffffefff 	.word	0xffffefff

00003ba0 <__sclose>:
    3ba0:	b508      	push	{r3, lr}
    3ba2:	230e      	movs	r3, #14
    3ba4:	5ec9      	ldrsh	r1, [r1, r3]
    3ba6:	f000 f815 	bl	3bd4 <_close_r>
    3baa:	bd08      	pop	{r3, pc}

00003bac <_write_r>:
    3bac:	b538      	push	{r3, r4, r5, lr}
    3bae:	1c05      	adds	r5, r0, #0
    3bb0:	2000      	movs	r0, #0
    3bb2:	4c07      	ldr	r4, [pc, #28]	; (3bd0 <_write_r+0x24>)
    3bb4:	6020      	str	r0, [r4, #0]
    3bb6:	1c08      	adds	r0, r1, #0
    3bb8:	1c11      	adds	r1, r2, #0
    3bba:	1c1a      	adds	r2, r3, #0
    3bbc:	f7fc fccc 	bl	558 <_write>
    3bc0:	1c43      	adds	r3, r0, #1
    3bc2:	d103      	bne.n	3bcc <_write_r+0x20>
    3bc4:	6823      	ldr	r3, [r4, #0]
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d000      	beq.n	3bcc <_write_r+0x20>
    3bca:	602b      	str	r3, [r5, #0]
    3bcc:	bd38      	pop	{r3, r4, r5, pc}
    3bce:	46c0      	nop			; (mov r8, r8)
    3bd0:	20000264 	.word	0x20000264

00003bd4 <_close_r>:
    3bd4:	b538      	push	{r3, r4, r5, lr}
    3bd6:	2300      	movs	r3, #0
    3bd8:	4c06      	ldr	r4, [pc, #24]	; (3bf4 <_close_r+0x20>)
    3bda:	1c05      	adds	r5, r0, #0
    3bdc:	1c08      	adds	r0, r1, #0
    3bde:	6023      	str	r3, [r4, #0]
    3be0:	f7fe f9de 	bl	1fa0 <_close>
    3be4:	1c43      	adds	r3, r0, #1
    3be6:	d103      	bne.n	3bf0 <_close_r+0x1c>
    3be8:	6823      	ldr	r3, [r4, #0]
    3bea:	2b00      	cmp	r3, #0
    3bec:	d000      	beq.n	3bf0 <_close_r+0x1c>
    3bee:	602b      	str	r3, [r5, #0]
    3bf0:	bd38      	pop	{r3, r4, r5, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	20000264 	.word	0x20000264

00003bf8 <_fstat_r>:
    3bf8:	b538      	push	{r3, r4, r5, lr}
    3bfa:	2300      	movs	r3, #0
    3bfc:	4c06      	ldr	r4, [pc, #24]	; (3c18 <_fstat_r+0x20>)
    3bfe:	1c05      	adds	r5, r0, #0
    3c00:	1c08      	adds	r0, r1, #0
    3c02:	1c11      	adds	r1, r2, #0
    3c04:	6023      	str	r3, [r4, #0]
    3c06:	f7fe f9cf 	bl	1fa8 <_fstat>
    3c0a:	1c43      	adds	r3, r0, #1
    3c0c:	d103      	bne.n	3c16 <_fstat_r+0x1e>
    3c0e:	6823      	ldr	r3, [r4, #0]
    3c10:	2b00      	cmp	r3, #0
    3c12:	d000      	beq.n	3c16 <_fstat_r+0x1e>
    3c14:	602b      	str	r3, [r5, #0]
    3c16:	bd38      	pop	{r3, r4, r5, pc}
    3c18:	20000264 	.word	0x20000264

00003c1c <_isatty_r>:
    3c1c:	b538      	push	{r3, r4, r5, lr}
    3c1e:	2300      	movs	r3, #0
    3c20:	4c06      	ldr	r4, [pc, #24]	; (3c3c <_isatty_r+0x20>)
    3c22:	1c05      	adds	r5, r0, #0
    3c24:	1c08      	adds	r0, r1, #0
    3c26:	6023      	str	r3, [r4, #0]
    3c28:	f7fe f9c4 	bl	1fb4 <_isatty>
    3c2c:	1c43      	adds	r3, r0, #1
    3c2e:	d103      	bne.n	3c38 <_isatty_r+0x1c>
    3c30:	6823      	ldr	r3, [r4, #0]
    3c32:	2b00      	cmp	r3, #0
    3c34:	d000      	beq.n	3c38 <_isatty_r+0x1c>
    3c36:	602b      	str	r3, [r5, #0]
    3c38:	bd38      	pop	{r3, r4, r5, pc}
    3c3a:	46c0      	nop			; (mov r8, r8)
    3c3c:	20000264 	.word	0x20000264

00003c40 <_lseek_r>:
    3c40:	b538      	push	{r3, r4, r5, lr}
    3c42:	1c05      	adds	r5, r0, #0
    3c44:	2000      	movs	r0, #0
    3c46:	4c07      	ldr	r4, [pc, #28]	; (3c64 <_lseek_r+0x24>)
    3c48:	6020      	str	r0, [r4, #0]
    3c4a:	1c08      	adds	r0, r1, #0
    3c4c:	1c11      	adds	r1, r2, #0
    3c4e:	1c1a      	adds	r2, r3, #0
    3c50:	f7fe f9b2 	bl	1fb8 <_lseek>
    3c54:	1c43      	adds	r3, r0, #1
    3c56:	d103      	bne.n	3c60 <_lseek_r+0x20>
    3c58:	6823      	ldr	r3, [r4, #0]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d000      	beq.n	3c60 <_lseek_r+0x20>
    3c5e:	602b      	str	r3, [r5, #0]
    3c60:	bd38      	pop	{r3, r4, r5, pc}
    3c62:	46c0      	nop			; (mov r8, r8)
    3c64:	20000264 	.word	0x20000264

00003c68 <_read_r>:
    3c68:	b538      	push	{r3, r4, r5, lr}
    3c6a:	1c05      	adds	r5, r0, #0
    3c6c:	2000      	movs	r0, #0
    3c6e:	4c07      	ldr	r4, [pc, #28]	; (3c8c <_read_r+0x24>)
    3c70:	6020      	str	r0, [r4, #0]
    3c72:	1c08      	adds	r0, r1, #0
    3c74:	1c11      	adds	r1, r2, #0
    3c76:	1c1a      	adds	r2, r3, #0
    3c78:	f7fc fc4c 	bl	514 <_read>
    3c7c:	1c43      	adds	r3, r0, #1
    3c7e:	d103      	bne.n	3c88 <_read_r+0x20>
    3c80:	6823      	ldr	r3, [r4, #0]
    3c82:	2b00      	cmp	r3, #0
    3c84:	d000      	beq.n	3c88 <_read_r+0x20>
    3c86:	602b      	str	r3, [r5, #0]
    3c88:	bd38      	pop	{r3, r4, r5, pc}
    3c8a:	46c0      	nop			; (mov r8, r8)
    3c8c:	20000264 	.word	0x20000264
    3c90:	42000800 	.word	0x42000800
    3c94:	42000c00 	.word	0x42000c00
    3c98:	42001000 	.word	0x42001000
    3c9c:	42001400 	.word	0x42001400
    3ca0:	42001800 	.word	0x42001800
    3ca4:	42001c00 	.word	0x42001c00
    3ca8:	0c0b0a09 	.word	0x0c0b0a09
    3cac:	00000e0d 	.word	0x00000e0d
    3cb0:	0000179a 	.word	0x0000179a
    3cb4:	00001796 	.word	0x00001796
    3cb8:	00001796 	.word	0x00001796
    3cbc:	000017f6 	.word	0x000017f6
    3cc0:	000017f6 	.word	0x000017f6
    3cc4:	000017b0 	.word	0x000017b0
    3cc8:	000017a0 	.word	0x000017a0
    3ccc:	000017b6 	.word	0x000017b6
    3cd0:	000017e4 	.word	0x000017e4
    3cd4:	000019dc 	.word	0x000019dc
    3cd8:	000019bc 	.word	0x000019bc
    3cdc:	000019bc 	.word	0x000019bc
    3ce0:	00001a48 	.word	0x00001a48
    3ce4:	000019ce 	.word	0x000019ce
    3ce8:	000019ea 	.word	0x000019ea
    3cec:	000019c0 	.word	0x000019c0
    3cf0:	000019f8 	.word	0x000019f8
    3cf4:	00001a38 	.word	0x00001a38
    3cf8:	65746e49 	.word	0x65746e49
    3cfc:	70757272 	.word	0x70757272
    3d00:	202d2074 	.word	0x202d2074
    3d04:	616d6553 	.word	0x616d6553
    3d08:	726f6870 	.word	0x726f6870
    3d0c:	65672065 	.word	0x65672065
    3d10:	6172656e 	.word	0x6172656e
    3d14:	2e646574 	.word	0x2e646574
    3d18:	0000000d 	.word	0x0000000d
    3d1c:	474f5250 	.word	0x474f5250
    3d20:	204d4152 	.word	0x204d4152
    3d24:	52415453 	.word	0x52415453
    3d28:	000d2154 	.word	0x000d2154
    3d2c:	00002872 	.word	0x00002872
    3d30:	0000283a 	.word	0x0000283a
    3d34:	00002856 	.word	0x00002856
    3d38:	0000282e 	.word	0x0000282e
    3d3c:	00002856 	.word	0x00002856
    3d40:	0000279a 	.word	0x0000279a
    3d44:	00002856 	.word	0x00002856
    3d48:	0000282e 	.word	0x0000282e
    3d4c:	0000283a 	.word	0x0000283a
    3d50:	0000283a 	.word	0x0000283a
    3d54:	0000279a 	.word	0x0000279a
    3d58:	0000282e 	.word	0x0000282e
    3d5c:	000028d8 	.word	0x000028d8
    3d60:	000028d8 	.word	0x000028d8
    3d64:	000028d8 	.word	0x000028d8
    3d68:	0000285c 	.word	0x0000285c
    3d6c:	0000283a 	.word	0x0000283a
    3d70:	0000283a 	.word	0x0000283a
    3d74:	00002922 	.word	0x00002922
    3d78:	0000282c 	.word	0x0000282c
    3d7c:	00002922 	.word	0x00002922
    3d80:	0000279a 	.word	0x0000279a
    3d84:	00002922 	.word	0x00002922
    3d88:	0000282c 	.word	0x0000282c
    3d8c:	0000283a 	.word	0x0000283a
    3d90:	0000283a 	.word	0x0000283a
    3d94:	0000279a 	.word	0x0000279a
    3d98:	0000282c 	.word	0x0000282c
    3d9c:	000028d8 	.word	0x000028d8
    3da0:	000028d8 	.word	0x000028d8
    3da4:	000028d8 	.word	0x000028d8
    3da8:	00002906 	.word	0x00002906
    3dac:	00002ac6 	.word	0x00002ac6
    3db0:	00002abe 	.word	0x00002abe
    3db4:	00002abe 	.word	0x00002abe
    3db8:	00002ab6 	.word	0x00002ab6
    3dbc:	00002a08 	.word	0x00002a08
    3dc0:	00002a08 	.word	0x00002a08
    3dc4:	00002aac 	.word	0x00002aac
    3dc8:	00002ab6 	.word	0x00002ab6
    3dcc:	00002a08 	.word	0x00002a08
    3dd0:	00002aac 	.word	0x00002aac
    3dd4:	00002a08 	.word	0x00002a08
    3dd8:	00002ab6 	.word	0x00002ab6
    3ddc:	00002a0a 	.word	0x00002a0a
    3de0:	00002a0a 	.word	0x00002a0a
    3de4:	00002a0a 	.word	0x00002a0a
    3de8:	00002b50 	.word	0x00002b50
    3dec:	00000043 	.word	0x00000043

00003df0 <_global_impure_ptr>:
    3df0:	20000008                                ... 

00003df4 <__sf_fake_stdin>:
	...

00003e14 <__sf_fake_stdout>:
	...

00003e34 <__sf_fake_stderr>:
	...

00003e54 <_init>:
    3e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e56:	46c0      	nop			; (mov r8, r8)
    3e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3e5a:	bc08      	pop	{r3}
    3e5c:	469e      	mov	lr, r3
    3e5e:	4770      	bx	lr

00003e60 <__init_array_start>:
    3e60:	000000dd 	.word	0x000000dd

00003e64 <_fini>:
    3e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e66:	46c0      	nop			; (mov r8, r8)
    3e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3e6a:	bc08      	pop	{r3}
    3e6c:	469e      	mov	lr, r3
    3e6e:	4770      	bx	lr

00003e70 <__fini_array_start>:
    3e70:	000000b5 	.word	0x000000b5
